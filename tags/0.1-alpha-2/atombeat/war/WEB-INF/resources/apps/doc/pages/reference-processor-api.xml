<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>Processor API</title>
    </header>
    <body>
        <section>
            <title>Scope</title> <p>This section documents the Orbeon Forms Processor API.
            This is a Java API that you can use to write custom processors. You can then use those
            custom processors in your Orbeon Forms applications, just like the standard
            processors bundled with Orbeon Forms.</p>
        </section>
        <section>
            <title>Why Write Custom Processors?</title>

            <p>
                In general, Orbeon Forms processors encapsulate logic to perform generic tasks
                such as executing an XSLT transformation, calling a web service or accessing a
                database using SQL. With those processors, the developer describes the specifics of
                a task at a high level in a declarative way.
            </p>
            <p>However, there are cases where:</p>
            <ul>
                <li>no existing processor exactly provides the functionality to be performed</li>
                <li>or, it is more suitable to write Java code to get the job done rather than
                using an existing processor</li>
            </ul>
            <p>
                In those cases, it makes sense for the developer to write your own processor in
                Java. This section goes through the essential APIs used to write processors in Java.
            </p>
            <note>
                <p>
                    You can compile your processor yourself, or you can use the convenient <a
                    href="processors-java">Java processor</a> which automatically compiles Java code
                    on the fly.
                </p>
            </note>
        </section>
        <section>
            <title>Prerequisites</title>
            <p>
                Writing Orbeon Forms processors is expected to be done by Java developers who
                are comfortable with the Java language as well as compiling and deploying onto
                servlet containers or J2EE application servers. In addition, we assume that the
                developer is comfortable with either:
            </p>
            <ul>
                <li>
                    The <link href="http://java.sun.com/j2se/1.4/docs/api/org/xml/sax/package-summary.html">SAX
                    API</link>
                </li>
                <li>
                    The <link
                    href="http://java.sun.com/j2se/1.4/docs/api/org/w3c/dom/package-summary.html">W3C
                    DOM</link> or <link
                    href="http://www.dom4j.org/apidocs/overview-summary.html">DOM4J</link> APIs.
                </li>
            </ul>
        </section>
        <section>
            <title>Processors With Outputs</title>

            <section>
                <title>Example</title>
                <p>We consider a very simple processor with an input
                <code>number</code> and an output <code>double</code>. The processor
                computes the double of the number it gets as an input. For
                instance, if the input is
                <code>&lt;number&gt;21&lt;/number&gt;</code>, the output will be
                <code>&lt;number&gt;42&lt;/number&gt;</code>.</p>
                <img print-format="pdf" src="../apps/doc/images/reference-processor-api-myprocessor.png"/>
                <source><![CDATA[import org.orbeon.oxf.pipeline.api.PipelineContext;
import org.orbeon.oxf.processor.SimpleProcessor;
import org.orbeon.oxf.processor.ProcessorInputOutputInfo;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.AttributesImpl;
import org.dom4j.Document;

public class MyProcessor extends SimpleProcessor {

    public MyProcessor() {
        addInputInfo(new ProcessorInputOutputInfo("number"));
        addOutputInfo(new ProcessorInputOutputInfo("double"));
    }

    public void generateDouble(PipelineContext context,
                               ContentHandler contentHandler)
            throws SAXException {

        // Get number from input using DOM4J
        Document numberDocument = readInputAsDOM4J(context, "number");
        String numberString = (String)
            numberDocument.selectObject("string(/number)");
        int number = Integer.parseInt(numberString);
        String doubleString = Integer.toString(number * 2);

        // Generate output document with SAX
        contentHandler.startDocument();
        contentHandler.startElement("", "number", "number",
                                    new AttributesImpl());
        contentHandler.characters(doubleString.toCharArray(), 0,
                                  doubleString.length());
        contentHandler.endElement("", "number", "number");
        contentHandler.endDocument();
    }
}]]></source>
        </section>
        <section>
            <title>Deriving from SimpleProcessor</title>
            <p>All the processors must implement the <code>Processor</code>
            interface (in the package
            <code>org.orbeon.oxf.pipeline.processors</code>).
            <code>SimpleProcessor</code> is an abstract class that implements all
            the methods of <code>Processor</code> and that can be used as a base
            class to create a custom processor (<code>MyProcessor.java</code> in
            the figure below).</p>
            <img print-format="pdf" src="../apps/doc/images/reference-processor-api-simple.png"/>
        </section>
        <section>
            <title>Declaring Inputs and Outputs</title>
            <p>
                The processor must declare its mandatory static inputs and outputs. This is done in
                the default constructor by calling the <code>addInputInfo</code> and
                <code>addOutputInfo</code> methods and passing an object of type
                <code>ProcessorInputOutputInfo</code>. For instance:
            </p>
            <source><![CDATA[public MyProcessor() {
    addInputInfo(new ProcessorInputOutputInfo("number"));
    addOutputInfo(new ProcessorInputOutputInfo("double"));
}
]]></source>
                <p>
                    In addition to the name of the input/output, one can pass an optional schema
                    URI declared in the <link href="reference-properties">Orbeon Forms
                    properties</link>. If a schema URI is specified, the corresponding input or
                    output can be <link href="processors-validation">validated</link>.
                </p>
                <note>
                    <p>
                        Note that the processor may have optional inputs and outputs, and/or read
                        dynamic inputs and generate dynamic outputs, in which case it doesn't need
                        to declare such inputs with <code>addInputInfo</code> and
                        <code>addOutputInfo</code>.
                    </p>
                </note>
            </section>
            <section>
                <title>Implementing generate Methods</title>
                <p>For each declared output, the class must declare a corresponding
                <code>generate</code> method. For instance, in the example, we have an
                output named <code>double</code>. The document for this output is
                produced by the method <code>generateDouble</code>.
                <code>generate</code> methods must have two arguments:</p>
                <ul>
                    <li>A <code>PipelineContext</code>. This context needs to be
                    passed to other methods that need one, typically to read inputs
                    (more on this later).</li>
                    <li>A <code>ContentHandler</code>. This is a <link href="http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html">SAX
                    content handler</link> that receives the document produced by
                    the <code>generate</code> method.</li>
                </ul>
            </section>
            <section>
                <title>Reading Inputs</title>
                <p>If the output depends on the inputs, one will need to read
                those inputs. There are 3 different APIs to read an input:</p>
                <ul>
                    <li>One can get the <link href="http://java.sun.com/j2se/1.4/docs/api/org/w3c/dom/package-summary.html">W3C
                    DOM</link> representation of the input document by calling
                    the <code>readInputAsDOM(context, name)</code> method.</li>
                    <li>One can get the <link href="http://www.dom4j.org/apidocs/index.html">DOM4J</link>
                    representation of the input document by calling the
                    <code>readInputAsDOM4J(context, name)</code> method.</li>
                    <li>One can provide a custom <link href="http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html">SAX
                    content handler</link> to the method
                    <code>readInputAsSAX(context, name,
                    contentHandler)</code>.</li>
                </ul>
                <p>Depending on what the <code>generate</code> method needs to
                do with the input document, one API might be more appropriate
                than the others.</p>
                <p>In our example, we want to get the value inside the
                <code>&lt;number&gt;</code> element. We decided to go with the
                DOM4J API, calling the
                <code>numberDocument.selectObject("string(/number)")</code> on
                the DOM4J document.</p>
            </section>
            <a name="generating-document"/>
            <section>
                <title>Generating a Document</title>
                <p>The output document can alternatively be generated by:</p>
                <ul>
                    <li>Directly calling methods of the content handler
                    received by the <code>generate</code> method. This is what we
                    do in the example detailed in this section. Here
                    is the code generating the output document:</li>
                    <source><![CDATA[contentHandler.startDocument();
contentHandler.startElement("", "number", "number",
                        new AttributesImpl());
contentHandler.characters(doubleString.toCharArray(), 0,
                      doubleString.length());
contentHandler.endElement("", "number", "number");
contentHandler.endDocument();
]]></source>
                <li>Create a DOM4J document and have it sent to the content
                handler using a <code>LocationSAXWriter</code> (in package
                <code>org.orbeon.oxf.xml.dom4j</code>):</li>
            </ul>

                <source><![CDATA[Document doc = ...;
LocationSAXWriter saxWriter = new LocationSAXWriter();
saxWriter.setContentHandler(contentHandler);
saxWriter.write(doc);
]]></source>
                <note>
                    <p>
                        Using the <code>LocationSAXWriter</code> provided with Orbeon Forms
                        is the preferred way to write a DOM4J document to a SAX content handler. The
                        standard JAXP API (calling <link
                        href="http://java.sun.com/j2se/1.4/docs/api/javax/xml/transform/Transformer.html#transform(javax.xml.transform.Source,%20javax.xml.transform.Result)">
                        <code>transform</code> </link> with a <link
                        href="http://www.dom4j.org/apidocs/org/dom4j/io/DocumentSource.html">
                        <code>org.dom4j.io.DocumentSource</code></link>) can also be used, but if it
                        is used, the location information stored in the DOM4J document will be lost.
                    </p>
                </note>

                <ul>
                    <li>Create a W3C document and send it to the content
                    handler using the standard JAXP API:</li>
                </ul>

                    <source><![CDATA[Document doc = ...;
Transformer identity = TransformerUtils.getIdentityTransformer();
transformer.transform(new DOMSource(doc), new SAXResult(contentHandler));
]]></source>
                    <note>
                        <p>
                            <code>TransformerUtils</code> is a Orbeon Forms class (in package
                            <code>org.orbeon.oxf.xml</code>). It will create and cache the
                            appropriate transformer factory. The developer is of course free to
                            create its own factory and transformer calling directly the JAXP API.
                        </p>
                    </note>
            </section>
        </section>
        <section>
            <title>Processors With No Output</title>
            <section>
                <title>Implementing The start Method</title>
                <p>
                    Implementing a processor with no output is very similar to implementing a
                    processor with outputs (see above). The only difference is that you need to
                    implement the <code>start()</code> method, instead of the
                    <code>generate()</code> methods.
                </p>
            </section>
            <section>
                <title>Example</title>

                <p>The processor below reads its <code>data</code> input and
                writes the content of the XML document to the standard output
                stream.</p>

                <img print-format="pdf" src="../apps/doc/images/reference-processor-api-systemout.png"/>
                <source><![CDATA[
package org.orbeon.oxf;

import org.dom4j.Document;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.orbeon.oxf.common.OXFException;
import org.orbeon.oxf.processor.ProcessorInputOutputInfo;
import org.orbeon.oxf.processor.SimpleProcessor;
import org.orbeon.oxf.pipeline.api.PipelineContext;

import java.io.IOException;
import java.io.StringWriter;

public class SystemOutProcessor extends SimpleProcessor {

    public SystemOutProcessor() {
        addInputInfo(new ProcessorInputOutputInfo("data"));
    }

    public void start(PipelineContext context) {
        try {
            Document dataDocument = readInputAsDOM4J(context, "data");
            OutputFormat format = OutputFormat.createPrettyPrint();
            format.setIndentSize(4);
            StringWriter writer = new StringWriter();
            XMLWriter xmlWriter = new XMLWriter(writer, format);
            xmlWriter.write(dataDocument);
            xmlWriter.close();
            System.out.println(writer.toString());
        } catch (IOException e) {
            throw new OXFException(e);
        }
    }
}
]]></source>
            </section>
        </section>
        <section>
            <title>Processor State</title>
            <section>
                <title>XPL Program State</title>
                <p>
                    A <code>PipelineContext</code> object is passed by the XPL engine to the
                    <code>start()</code>, <code>ProcessorOutput.readImpl()</code> and
                    <code>generateXxx()</code> methods.
                </p>
                <p>
                    The <code>PipelineContext</code> object is used to store information that must
                    be kept for the entire execution of the current XPL program. This information
                    is:
                </p>
                <ul>
                    <li>
                        Reset everytime the XPL program is run
                    </li>
                    <li>
                        Separate for multiple concurrent executions of an XPL program.
                    </li>
                    <li>
                        Shared among all the processors run during the XPL program's execution,
                        including multiple instances of a given processor.
                    </li>
                </ul>
                <p>
                    Use the following methods of <code>PipelineContext</code> to store XML program
                    state:
                </p>
                <source><![CDATA[
/**
 * Set an attribute in the context.
 *
 * @param key the attribute key
 * @param o   the attribute value to associate with the key
 */
public synchronized void setAttribute(Object key, Object o);
]]></source>
            <source><![CDATA[
/**
 * Get an attribute in the context.
 *
 * @param key the attribute key
 * @return    the attribute value, null if there is no attribute with the given key
 */
public Object getAttribute(Object key);
]]></source>
            </section>
            <section>
                <title>XPL Program Cleanup</title>
                <p>
                    You can register a listener on the <code>PipelineContext</code> object to
                    perform clean-up upon the termination of the XML program, using the following
                    API:
                </p>
                <source><![CDATA[
/**
 * Add a new listener to the context.
 *
 * @param listener
 */
public synchronized void addContextListener(ContextListener listener);
]]></source>
            <source><![CDATA[
/**
 * ContextListener interface to listen on PipelineContext events.
 */
public interface ContextListener {
    /**
     * Called when the context is destroyed.
     *
     * @param success true if the pipeline execution was successful, false otherwise
     */
    public void contextDestroyed(boolean success);
}
]]></source>
            <source><![CDATA[
/**
 * ContextListener adapter class to faciliate implementations of the ContextListener
 * interface.
 */
public static class ContextListenerAdapter implements ContextListener {
    public void contextDestroyed(boolean success) {
    }
}
]]></source>
                <p>
                    You can register a listener as follows:
                </p>
                            <source><![CDATA[
pipelineContext.addContextListener(new ContextListenerAdapter() {
    public void contextDestroyed(boolean success) {
        // Implement your clean-up code here
    }
);
]]></source>
                <p>
                    Examples of clean-up operations include:
                </p>
                <ul>
                    <li>Performing commits or rollbacks on external resources</li>
                    <li>Freeing-up external resources allocated for the execution of the XPL program only</li>
                </ul>
            </section>
            <section>
                <title>Processor Instance State</title>
                <p>
                    Processors with multiple outputs often have to perform some task when the first
                    output is read, store the result of the task, and then make it available to the
                    other outputs when they are read. This information is:
                </p>
                <ul>
                    <li>
                        Reset everytime the XPL program is run.
                    </li>
                    <li>
                        Separate for every processor instance.
                    </li>
                    <li>
                        Shared between calls of the <code>start()</code>,
                        <code>ProcessorOutput.readImpl()</code> and <code>generateXxx()</code> of a
                        given processor instance, during a given XPL program execution..
                    </li>
                </ul>
                <p>
                    The <code>PipelineContext</code> methods are not sufficient for this purpose.
                    In order to store state information tied to the current execution of the current
                    processor, and shared across the current processor's initialization as well as
                    outputs reads, use the following methods:
                </p>
                <source><![CDATA[
/**
 * This method is used by processor implementations to store state
 * information tied to the current execution of the current processor,
 * across processor initialization as well as reads of all the
 * processor's outputs.
 *
 * This method should be called from the reset() method.
 *
 * @param context current PipelineContext object
 * @param state   user-defined object containing state information
 */
protected void setState(PipelineContext context, Object state);
]]></source>
<source><![CDATA[
/**
 * This method is used to retrieve the state information set with setState().
 *
 * This method may be called from start() and ProcessorOutput.readImpl().
 *
 * @param context current PipelineContext object
 * @return        state object set by the caller of setState()
 */
protected Object getState(PipelineContext context);
]]></source>
                <p>
                    You initialize the processor state in the <code>reset()</code> method, as follows:
                </p>
                <source><![CDATA[
public void reset(PipelineContext context) {
    setState(context, new State());
}
]]></source>
                <p>
                    Where you define class State as you wish, for example:
                </p>
                <source><![CDATA[
private static class State {
    public Object myStuff;
    ...
}
]]></source>
                <p>
                    You can then obtain your execution state by calling the <code>getState()</code>
                    method:
                </p>
                <source><![CDATA[
State state = (State) getState(context);
]]></source>
                <p>
                    You call <code>getState()</code> from the <code>start()</code>,
                    <code>ProcessorOutput.readImpl()</code> or <code>generateXxx()</code>.
                </p>
            </section>
        </section>
        <a name="custom-processors"/>
        <section>
            <title>Using custom processors from XPL</title>
            <p>
                In order to use a custom processor compiled and deployed within Orbeon Forms (as one or more
                class files or JAR files), its main class (the one that implements the
                <code>Processor</code> interface) must be mapped to an XML qualified name. You do
                this mapping in a file called <code>custom-processors.xml</code> under the
                <code>config</code> directory. This is an example illustrating the format of the
                file:
            </p>
            <xml-source>
                <processors xmlns:my="http://my.company.com/ops/processors">

                    <processor name="my:processor">
                        <class name="com.company.my.MyOtherProcessor"/>
                    </processor>

                    <processor name="my:system-out">
                        <class name="com.company.my.SystemOutProcessor"/>
                    </processor>

                </processors>
            </xml-source>
            <p>
                You choose your own prefix name and namespace URI for that prefix, in this example
                <code>my</code> and <code>http://my.company.com/ops/processors</code> respectively.
                There is no strict format for the namespace URI, but it should identify your company
                or organization, here with <code>my.company.com</code>.
            </p>
            <p>
                Do the mapping on the <code>processors</code> element as usual in XML with:
            </p>
            <xml-source>
                xmlns:my="http://my.company.com/ops/processors"
            </xml-source>
            <p>
                You use processors in XPL using the same qualified names used in
                <code>custom-processors.xml</code>:
            </p>
            <xml-source>
                <p:processor name="my:system-out">
                    ...
                </p:processor>
            </xml-source>
            <p>
                It is important to declare the namespace mapping in
                <code>custom-processors.xml</code> as well as in the XPL programs that use those
                processors.
            </p>
            <p>
                There is no constraint to use a single namespace: you may declare multiple
                namespaces to categorize processors. Using one namespace per company or organization
                is however the recommended option for convenience.
            </p>
        </section>
    </body>
</document>
