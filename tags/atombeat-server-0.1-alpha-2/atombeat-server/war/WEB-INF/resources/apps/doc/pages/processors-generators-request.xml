<!--
  Copyright (C) 2009 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Request Generator</title>
    </header>
    <body>
        <a name="request-generator"/>
        <section>
            <title>Introduction</title>
            <p>
                Generators are a special category of processors that have no XML data inputs, only
                outputs. They are generally used at the top of an XML pipeline to generate XML data
                from a Java object or other non-XML source.
            </p>
            <p>
                The Request generator streams XML from the current HTTP request. It can serialize request information
                including headers, parameters, query strings, user and server information.
            </p>
        </section>
        <note>
            <p>
                The Request generator can be used as the first component in a web application
                pipeline, but it is recommended to use the <a href="reference-page-flow">Page Flow
                Controller</a> and <a href="reference-xforms-guide">XForms</a> whenever possible. There
                are cases where additional data from the request may be required, however, and where
                the Request generator must be used.
            </p>
        </note>
        <section>
            <title>Configuration</title>
            <p>
                The Request generator takes a mandatory configuration to select which request information to return.
                This configuration consists of a series of <code>include</code> and <code>exclude</code> elements
                containing XPath expressions selecting a number of element from the request tree. Those expressions can
                be as complex as any regular XPath 1.0 expression that returns a single node or a node-set. However, it
                is recommended to keep those expressions as simple as possible. One known limitation is that it is not
                possible to test on the <code>value</code> element of uploaded files, as well as the content of the
                request body.
            </p>
            <p>
                Sample Configuration:
            </p>
            <xml-source>
                <config>
                    <include>/request/path-info</include>
                    <include>/request/headers</include>
                    <include>/request/parameters/parameter[starts-with(name, 'document-id')]</include>
                    <exclude>/request/parameters/parameter[name = 'document-id-dummy']</exclude>
                </config>
            </xml-source>
            <p>
                The full tree is:
            </p>
            <xml-source>
                <request>
                    <container-type>servlet</container-type>
                    <container-namespace/>
                    <content-length>-1</content-length>
                    <content-type/>
                    <parameters>
                        <parameter>
                            <name>id</name>
                            <value>12</value>
                        </parameter>
                        <parameter>
                            <name>print</name>
                            <value>false</value>
                        </parameter>
                    </parameters>
                    <body/>
                    <protocol>HTTP/1.1</protocol>
                    <remote-addr>127.0.0.1</remote-addr>
                    <remote-host>localhost</remote-host>
                    <scheme>http</scheme>
                    <server-name>localhost</server-name>
                    <server-port>8080</server-port>
                    <is-secure>false</is-secure>
                    <auth-type>BASIC</auth-type>
                    <remote-user>jdoe</remote-user>
                    <context-path>/ops</context-path>
                    <headers>
                        <header>
                            <name>host</name>
                            <value>localhost:8080</value>
                        </header>
                        <header>
                            <name>user-agent</name>
                            <value>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.1) Gecko/20020826</value>
                        </header>
                        <header>
                            <name>accept-language</name>
                            <value>en-us, en;q=0.50</value>
                        </header>
                        <header>
                            <name>accept-encoding</name>
                            <value>gzip, deflate, compress;q=0.9</value>
                        </header>
                        <header>
                            <name>accept-charset</name>
                            <value>ISO-8859-1, utf-8;q=0.66, *;q=0.66</value>
                        </header>
                        <header>
                            <name>keep-alive</name>
                            <value>300</value>
                        </header>
                        <header>
                            <name>connection</name>
                            <value>keep-alive</value>
                        </header>
                        <header>
                            <name>referer</name>
                            <value>http://localhost:8080/ops/</value>
                        </header>
                        <header>
                            <name>cookie</name>
                            <value>JSESSIONID=DA6E64FC1E6DFF0499B5D6F46A32186A</value>
                        </header>
                    </headers>
                    <attributes>
                        <attribute>
                            <name>oxf.xforms.renderer.deployment</name>
                            <value>separate</value>
                        </attribute>
                        <attribute>
                            <name>javax.servlet.forward.context_path</name>
                            <value>/myapp</value>
                        </attribute>
                    </attributes>
                    <method>GET</method>
                    <path-info>/doc/home-welcome</path-info>
                    <request-path>/doc/home-welcome</request-path>
                    <path-translated>C:\orbeon\projects\OPS\build\ops-war\doc\home-welcome</path-translated>
                    <query-string>id=12&amp;print=false</query-string>
                    <requested-session-id>DA6E64FC1E6DFF0499B5D6F46A32186A</requested-session-id>
                    <request-uri>/ops/doc/home-welcome</request-uri>
                    <request-url>http://localhost:8888/ops/doc/home-welcome</request-url>
                    <servlet-path/>
                </request>
            </xml-source>
            <note>
                <p>
                    Orbeon Forms adds a computed request information item: the <code>request-path</code>. This is
                    defined as a concatenation of the <code>servlet-path</code> and the <code>path-info</code>. This is
                    useful because both these are frequently mixed up and often change depending on the application
                    server or its configuration.
                </p>
            </note>
            <warning>
                <p>
                    This generator excludes all information items by default. To obtain the whole tree (as shown in the
                    example above), you must explicitly include <code>/request</code>:
                </p>
                <xml-source border="false">
                    <p:processor name="oxf:request">
                        <p:input name="config">
                            <config>
                                <include>/request</include>
                            </config>
                        </p:input>
                        <p:output name="data" id="request"/>
                    </p:processor>
                </xml-source>
            </warning>
        </section>
        <section>
            <title>Request Attributes</title>
            <p>
                When the request includes <code>/request/attributes</code>, the Request generator attempts to retrieve
                request attributes. Since those can be any Java objects, as of October 2009 the generator only includes
                string values.
            </p>
        </section>
        <section>
            <title>Request Body</title>
            <p>
                When the request includes <code>/request/body</code>, the Request generator retrieves the body of the
                request sent to the application server. The content of the body is made available as the following data
                types:
            </p>
            <ul>
                <li>If the attribute <code>stream-type</code> on the <code>config</code> element
                is set to <code>xs:anyURI</code>, an URI is returned as the value of the
                <code>/request/body</code> element.</li>

                <li>If the attribute <code>stream-type</code> on the <code>config</code> element
                is set to <code>xs:base64Binary</code>, the content of the request encoded as
                Base64 is returned as the value of the <code>/request/body</code> element.</li>

                <li>Otherwise, the content of the <code>/request/body</code> is set as either
                <code>xs:anyURI</code> if the request body is large (as set by the
                <code>max-upload-memory-size</code> property, by default larger than 10 KB), or
                <code>xs:base64Binary</code> if the request body is small.</li>
            </ul>
            <p>
                Examples of configuration:
            </p>
            <xml-source>
                <config stream-type="xs:anyURI">
                    <include>/request/body</include>
                </config>
            </xml-source>
            <xml-source>
                <config stream-type="xs:base64Binary">
                    <include>/request/body</include>
                </config>
            </xml-source>
            <p>
                The resulting data type is always set on the body element, for example:
            </p>
            <xml-source>
                <request>
                    <body xsi:type="xs:anyURI">file:/C:/Tomcat/temp/upload_00000005.tmp</body>
                </request>
            </xml-source>
            <warning>
                Reading the request body is incompatible with reading HTML forms posted with the
                <code>multipart/form-data</code> encoding, typically used when uploading files.
                In such a case, you should read either only the request body, or only the
                request parameters.
            </warning>
        </section>
        <section>
            <title>Uploaded Files</title>
            <p>
                Uploaded files are stored into <code>parameter</code> elements, like any other
                form parameter. The rules for the data type used are the same as for the request
                body (see above), the data type depending on the <code>stream-type</code>
                attribute and the size of the uploaded files:
            </p>
            <xml-source>
                <config stream-type="xs:anyURI">
                    <include>/request/parameters</include>
                </config>
            </xml-source>
            <p>
                The <code>parameter</code> element for an uploaded file contains the following
                elements in addition to the <code>name</code> and <code>value</code> elements
                use for other parameters:
            </p>
            <ul>
                <li><code>filename</code>: stores the file name sent by the user agent</li>
                <li><code>content-type</code>: store the media type sent by the user agent</li>
                <li><code>content-length</code>: stores the actual size in bytes of the uploaded data</li>
            </ul>
            <p>
                A resulting uploaded file may look as follows:
            </p>
            <xml-source>
                <request>
                    <parameters>
                        <parameter>
                            <name>upload-form-element-name</name>
                            <filename>photo.jpg</filename>
                            <content-type>image/jpeg</content-type>
                            <content-length>2345</content-length>
                            <value xsi:type="xs:anyURI">file:/C:/Tomcat/temp/upload_00000005.tmp</value>
                        </parameter>
                    </parameters>
                </request>
            </xml-source>
        </section>
        <warning>
            The URL stored as the value of the upload or request body is temporary and only valid for the duration of
            the current request. It is only accessible from the server side, and will not be accessible from a client
            such as a web browser. It is not guaranteed to be a <code>file:</code> URL, only that it can be read with
            Orbeon Forms's <a href="#url-generator">URL generator</a>.
        </warning>
    </body>
</document>
