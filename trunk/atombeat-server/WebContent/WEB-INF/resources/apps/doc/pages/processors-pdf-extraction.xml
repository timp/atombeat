<!--
    Copyright (C) 2005 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
	<header>
		<title>PDF Extraction Processor</title>
	</header>
	<body>
		<section>
			<title>Rationale</title>
			<p>
                The PDF extraction processor will take an PDF file as input and extract meta
                information and or text from the PDF. The extracted structure can be used by
                fulltext search or a content management system to identify the exact location of
                content items. The processor makes use of the PDFBox Library <link
                href="http://www.pdfbox.org/">PDFBox on Sourceforge</link>.
            </p>
			<p>
                The processor allows 5 modes of operation. In mode one only the meta data and the
                bookmarks with title and page number but no text is extracted. In mode two meta
                data, bookmarks and text is extracted. In mode three meta data and text broken down
                into pages is extracted. In mode 4 only the meta data gets extracted (if any). In
                mode five first an extraction of bookmarks with text is attempted. If there are no
                bookmarks a fallback to pages is performed.
            </p>
			<p>
                If the file containes errors, then the operation might not complete. Most errors
                are captured and will lead to the insertion of an &lt;error&gt; tag. If the input
                file is fundamentally broken no output will be displayed (however the processor
                returns an empty &lt;PDFDocument /&gt; entry.
            </p>
            <note>
                <p>
                    This processor is a contribution from TAO Consulting Pte Ltd.
                </p>
            </note>
		</section>
		<section>
			<title>Usage</title>
			<p>
				<table ca="|l|p{0.5\textwidth}|">
					<tr>
						<th>Processor Name</th>
						<td>tao:from-pdf-converter</td>
					</tr>
					<tr>
						<th>config input</th>
						<td>Definition of the scope of extraction.</td>
					</tr>
					<tr>
						<th>data input</th>
						<td>The PDF document in Base64 encoding</td>
					</tr>
					<tr>
						<th>data output</th>
						<td>The XML Structure extracted from the PDF
                        </td>
					</tr>
				</table>
			</p>
			<section>
				<title>Config Input</title>
				<p>
                    The configuration input selects the mode of the extraction. Possible keywords
                    are: <i>bookmarks</i>, <i>bookmarksonly</i>, <i>bookmarkspages</i>, <i>meta</i>
                    or <i>pages</i>. Depending on that the extraction takes place. "bookmarkspages"
                    attempts to extract bookmarks with text enclosed. If the PDF doesn't contain
                    bookmarks the processor falls back to extract text by page.
                </p>
				<xml-source>
					<config>
						<action>bookmarks</action>
					</config>
				</xml-source>
			</section>
			<section>
				<title>Data Input</title>
				<p>
                    The data input must contain the PDF converted to Base64. This can happen from
                    URL Generator or the x-forms upload control. The Base64 encoding must comply to
                    the <a href="reference-formats#binary-documents">binary document format</a>.
                </p>
                <xml-source>
					<p:input name="data" href="#file"/>
				</xml-source>
			</section>
			<section>
				<title>Data Output</title>
				<p>
                    The data output is a XML structure with all PDF specific information. It starts
                    with a PDFDOcument element followed by the PDFMetadata element that contains PDF
                    meta data according to the <link href="http://www.adobe.com/">Adobe PDF</link>
                    specification. The document is then followed by either Bookmark or Page
                    Elements
                </p>
				<p>
                    For example, the following element could be generated:
                    <xml-source>
						<PDFDocument pages="32" author="Stephan H. Wissel" title="R6 Migration Report" subject="Recommendation for Migration">
							<PDFMetadata>... a lot of stuff here ... </PDFMetadata>
							<Bookmark level="1" page="2">
								<Title>Management Summary</Title>
							</Bookmark>
							<Bookmark level="1" page="3">
								<Title>Scope of work / Findings</Title>
								<Bookmark level="2" page="3">
									<Title>Scope of work</Title>
								</Bookmark>
							</Bookmark>
						</PDFDocument>
					</xml-source>
				</p>
			</section>
		</section>
	</body>
</document>
