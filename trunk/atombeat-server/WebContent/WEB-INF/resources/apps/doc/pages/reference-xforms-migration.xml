<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004-2008 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:ev="http://www.w3.org/2001/xml-events"
          xmlns:xi="http://www.w3.org/2001/XInclude" >
    <header>
        <title>Migrating from XForms Classic to XForms NG</title>
    </header>
    <body>
        <section added="2006-09-18">
            <title>Introduction</title>
            <p>
                This document describe migration from XForms Classic to XForms NG. If you have never used Orbeon
                PresentationServer 2.8 or earlier, you probably don't need to read the following.
            </p>
            <p>
                Migrating from XForms Classic to XForms NG consists in telling Orbeon Forms to use XForms NG, in
                making the necessary changes to adjust your XForms model and controls (this is necessary as XForms
                Classic was lacking in terms of compatibility with the XForms specification, and XForms NG on the
                contrary aims at implementing XForms 1.0 and XForms 1.1 fully), and (sometimes optionally) in making
                some architectural changes to your application:
            </p>
        </section>
        <section>
            <title>Configuring Orbeon Forms to use XForms NG</title>
            <ol>
                <li>
                    <p>
                        Identify in your page flow the pages that use XForms Classic. Those are defined by
                        <code>&lt;page></code> elements with the <code>xforms</code> attribute, for example:
                    </p>
                    <xml-source>
                        <page id="my-page" path-info="/my/page" xforms="/my-page/xforms-model.xml" view="/my-page/view.xhtml"/>
                    </xml-source>
                </li>
                <li>
                    <p>
                        For each page identified in the previous step, locate the XForms model file referred by the
                        <code>xforms</code> attribute. In most cases, this is a static XML file with a root element
                        called <code>&lt;xforms:model></code>, for example:
                    </p>
                    <xml-source>
                        <xforms:model>
                            <xforms:instance>
                                ...
                            </xforms:instance>
                            ...
                        </xforms:model>
                    </xml-source>
                    <p>
                        You must now insert the content of that file into your XHTML page view. In most cases, the
                        page view is a static XHTML file or a dynamic XSLT file that produces XHTML. Locate the
                        <code>&lt;xhtml:head></code> element and insert the XForms model as a child of that element:
                    </p>
                    <xml-source>
                        <xhtml:html>
                            <xhtml:head>
                                <xhtml:title>My Page</xhtml:title>
                                <xforms:model>
                                    <xforms:instance>
                                        ...
                                    </xforms:instance>
                                    ...
                                </xforms:model>
                            </xhtml:head>
                            <xhtml:body>
                                ...
                            </xhtml:body>
                        </xhtml:html>
                    </xml-source>
                    <p>
                        Alternatively, you can use XInclude to keep the XForms model external:
                    </p>
                    <xml-source show-namespaces="false" xmlns:xi="dummy">
                        <xhtml:html>
                            <xhtml:head>
                                <xhtml:title>My Page</xhtml:title>
                                <xi:include href="oxf:/my-page/xforms-model.xml"/>
                            </xhtml:head>
                            <xhtml:body>
                                ...
                            </xhtml:body>
                        </xhtml:html>
                    </xml-source>
                </li>
                <li>
                    <p>
                        In the page flow, remove the <code>xforms</code> attribute on the <code>&lt;page></code>
                        element:
                    </p>
                    <xml-source>
                        <page id="my-page" path-info="/my/page" view="/my-page/view.xhtml"/>
                    </xml-source>
                    <p>
                        What you have achieved at this point is migrating from XForms Classic's external
                        XForms model specification to the up-to-date way of including XForms directly within XHTML.
                        Note that this also allows you to use multiple XForms models simply by adding them as
                        children of the <code>&lt;xhtml:head></code> element:
                    </p>
                    <xml-source show-namespaces="false">
                        <xhtml:html>
                            <xhtml:head>
                                <xhtml:title>My Page</xhtml:title>
                                <xforms:model id="main-model">
                                    ...
                                </xforms:model>
                                <xforms:model id="resources-model">
                                    ...
                                </xforms:model>
                            </xhtml:head>
                            <xhtml:body>
                                ...
                            </xhtml:body>
                        </xhtml:html>
                    </xml-source>
                </li>
            </ol>
        </section>
        <section>
            <title>Updating XForms model and controls</title>
            <p>
                You are very likely to have to make further adjustments to your XForms controls and model. The
                following are possible things to look at:
            </p>
            <ul>
                <li>
                    <p>
                        The <code>&lt;xforms:submit></code> control requires a <code>submission</code>
                        attribute referring to an existing <code>&lt;xforms:submission></code> element
                        within an XForms model. Start creating an <code>&lt;xforms:submission></code>
                        element, assign it an id, and then set the <code>submission</code> attribute on
                        <code>&lt;xforms:submit></code>. For example:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:submission id="default-submission" method="post" action="/services/save" replace="none"/>
                        ...
                        <xforms:submit submission="default-submission">
                            <xforms:label>Save</xforms:label>
                        </xforms:submit>
                    </xml-source>
                </li>
                <li>
                    <p>
                        The <code>&lt;xxforms:if></code> and <code>&lt;xxforms:choose></code> extensions no
                        longer work with XForms NG. Use <code>&lt;xforms:switch></code> or
                        <code>&lt;xforms:group></code> with relevance instead. Note that you can often
                        convert simply from:
                    </p>
                    <xml-source show-namespaces="false">
                        <xxforms:if test="/form/first-name = 'Joe'">
                            ...
                        </xxforms:if>
                    </xml-source>
                    <p>
                        to:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:group ref=".[/form/first-name = 'Joe']">
                            ...
                        </xforms:group>
                    </xml-source>
                </li>
                <li>
                    <p>
                        With XForms Classic, activacting a trigger would make the unique XForms instance of the
                        unique XForms model available to Page Flow Controller processing (i.e. a PFC action,
                        model and view could be activated). With NG, this is no longer the case and processing
                        follows the XForms specification. This means in particular that if a submission fails
                        because the submitted instance is invalid, that instance will never be sent by the
                        XForms engine and will not, in particular, reach a page or service declared in the page
                        flow (unless the XForms 1.1 <code>validate="false"</code> attribute on
                        <code>&lt;xforms:submission></code> is set).
                    </p>
                    <p>
                        Similarly, using triggers to perform insertions or deletions into XForms instances does
                        not cause a submission to happen with XForms NG.
                    </p>
                </li>
                <li>
                    <p>
                        With XForms Classic, a submission would annotate an XForms instance with attributes
                        such as <code>xxforms:valid="true"</code>, etc. This is no longer the case with XForms
                        NG.
                    </p>
                </li>
            </ul>
        </section>
        <section>
            <title>Architectural considerations</title>
            <ul>
                <li>
                    <p>
                        Much of the work that was performed with page flow actions with XForms Classic can be
                        implemented with XForms events and XForms actions. This means that you will tend to
                        migrate functionality away from the PFC and towards XForms. This also means that you
                        will use less XSLT to produce your pages, or even none at all, which is ideal as that is
                        one less technology tha developers have to learn.
                    </p>
                </li>
                <li>
                    <p>
                        Because of the power of the <code>&lt;xforms:submission></code> element (which, with
                        XForms 1.1, allows you to call any REST service), you are likely to move towards a
                        service-oriented approach where your XForms page uses submissions that communicate with
                        services. Such services may be external, or they may be implemented in Orbeon Forms and
                        mapped in your page flow.
                    </p>
                </li>
            </ul>
        </section>
    </body>
</document>
