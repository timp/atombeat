<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:oxf="http://www.orbeon.com/oxf/processors" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<header>
		<title>Changes in Version 2.5</title>
	</header>
	<body>
        <section>
			<title>New in Version 2.5.4</title>
            <section>
                <title>Package Name in Examples and Documentation</title>
                <p>
                    Some examples and sections of the documentation where still referring to the
                    class <code>org.orbeon.oxf.processor.pipeline.PipelineContext</code> which has
                    been moved in <code>org.orbeon.oxf.pipeline.api.PipelineContext</code>. In
                    particular, this prevented some examples using the Java processor from working
                    properly.
                </p>
            </section>
        </section>
        <section>
			<title>New in Version 2.5.3</title>
            <section>
                <title>OXF Server Renamed to Orbeon Presentation Server</title>
                <p>
                    OXF Server is now called Orbeon Presentation Server. The new naming is
                    consistent with the other components of the Open Integration Suite open source
                    project.
                </p>
            </section>
            <section>
                <title>Command-Line Client</title>
                <ul>
                    <li>
                        The command-line client is now simpler and easier to use. The <a
                        href="integration-command-line">documentation</a> reflects this change.
                    </li>
                </ul>
            </section>
            <section>
                <title>Pipeline API for Java</title>
                <ul>
                    <li>
                        The pipeline API is now exposed and documented. It allows running pipelines
                        from any Java application. Please visit the <a
                        href="reference-pipeline-api">documentation</a> for more information.
                    </li>
                </ul>
            </section>
        </section>
		<section>
			<title>New in Version 2.5.2</title>
            <section>
                <title>XForms Changes</title>
                <ul>
                    <li>
                        A new <a href="/doc/reference-xforms-guide">reference XForms documentation</a> is
                        included.
                    </li>
                    <li>
                        The schema for XForms controls now allows for text inside an
                        <code>&lt;xforms:repeat></code> element.
                    </li>
                    <li>
                        Using the <code>&lt;xforms:select></code> element without an
                        <code>appearance</code> attribute no longer throws an exception.
                    </li>
                </ul>
            </section>
            <section>
                <title>BizDoc Application Improvements</title>
                <ul>
                    <li>
                        The <a href="/goto-example/bizdoc">BizDoc example application</a> now works
                        out of the box with WebLogic 8.1 and WebSphere 5.1.
                    </li>
                    <li>
                        The look and feel of the <a href="/goto-example/bizdoc">BizDoc example
                        application</a> has been improved and is now consistent between the version
                        integrated with the OXF examples and the standalone version.
                    </li>
                </ul>
            </section>
        </section>
        <section>
			<title>New in Version 2.5.1</title>
            <section>
                <title>Packaging</title>
                <p>
                    This version fixes a minor packaging issue.
                </p>
            </section>
        </section>
		<section>
			<title>New in Version 2.5</title>
            <section>
                <title>Compatibility with OXF 2.2</title>
                <p>
                    OXF 2.5 features several improvements that may require changes to existing
                    applications running on OXF 2.2. When migrating your existing applications
                    please pay special attention to the following areas:
                </p>
                <ul>
                    <li><a href="#xforms">XForms</a></li>
                    <li><a href="#xhtml">XHTML Support</a></li>
                    <li><a href="#pfc">Page Flow Controller</a></li>
                    <li><a href="#xslt">Default XSLT Transformer</a></li>
                    <li><a href="#xpl">Pipelines / XPL</a></li>
                    <li><a href="#properties">Properties</a></li>
                </ul>
            </section>
            <section>
			    <title>Major Changes</title>
                <a name="xforms"/>
                <section>
                    <title>XForms</title>
                    <p>Primary enhancements to the XForms engine in OXF 2.5 include:</p>
                    <ul>
                        <li>Support for the XForms repeat module (repeated portions of the UI)</li>
                        <li>Support for XForms model item properties (validation, calculation, and
                        visibility rules attached to the XForms instance)</li>
                        <li>XML Schema validation</li>
                        <li>Encryption of HTML field names and hidden field values</li>
                        <li>Full control on HTML generation from XForms</li>
                    </ul>
                    <p>
                        Below is a description of each of these enhancements as well as a list of
                        minor changes to the OXF XForms engine.
                    </p>
                    <ul>
                        <li>Enhancements:
                            <ul>
                                <li>
                                    <p>
                                        The following elements in the XForms repeat module are now
                                        supported: <code>repeat</code>, <code>itemset</code>,
                                        <code>insert</code>, and <code>delete</code>. With the
                                        XForms repeat module you can easily create pages where
                                        XForms controls are repeated. For example you can create an
                                        invoice made of line items (description, unit price,
                                        quantity) where lines can be added, edited, or deleted.
                                    </p>
                                    <p>
                                        The <a href="/goto-example/xforms-ubl">UBL Order</a> example
                                        illustrates this scenario. Here is a portion of the UBL example
                                        view that shows how <code>&lt;xforms:repeat></code> is being
                                        used. In this example, a line in an HTML table is generated for each order
                                        line from the XForms instance. On each line, a "remove" button
                                        is inserted. Note the <code>&lt;xforms:delete></code> action in
                                        the <code>&lt;xforms:sbumit></code>. When the button is pressed,
                                        the action will be executed and the corresponding line will be
                                        removed. The <code>index()</code> function returns the current
                                        index in the iterated nodeset. The first argument of
                                        <code>index()</code> is a nodeset id, declared with the
                                        <code>id</code> attribute on the <code>&lt;xforms:repeat></code>
                                        element (in this case, the id is: <code>lineSet</code>).
                                    </p>
                                    <xml-source show-namespaces="false">
                                        <xforms:repeat nodeset="order:Order/cat:OrderLine" id="lineSet">
                                            <xhtml:tr>
                                                <xhtml:td>
                                                    <xforms:input ref="cat:Item/cat:Description"/>
                                                </xhtml:td>
                                                <xhtml:td align="center">
                                                    <xforms:submit xxforms:appearance="image">
                                                        <xxforms:img src="/images/remove.png"/>
                                                        <xforms:label/>
                                                        <xforms:delete nodeset="/form/order:Order/cat:OrderLine" at="index('lineSet')"/>
                                                    </xforms:submit>
                                                </xhtml:td>
                                            </xhtml:tr>
                                        </xforms:repeat>
                                    </xml-source>
                                    <p>
                                        The <a href="/xforms-todo/">Repeating Elements</a> example illustrates a case
                                        of nested repeat.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                        Rules can be attached to elements and attributes of an
                                        XForms instance. These are called "model item properties" in
                                        XForms and they are used to:
                                    </p>
                                    <p>
                                        <ul>
                                            <li>
                                                Restrict the set of valid values for of an element
                                                or attribute (with XML Schema simple types like
                                                <code>xs:positiveInteger</code>, by making a value
                                                mandatory, or by providing an XPath expression that
                                                validates the value).
                                            </li>
                                            <li>
                                                Indicate that the value of a particular element or
                                                attribute is to be calculated by the XForms engine
                                                (calculation defined in the XPath language).
                                            </li>
                                            <li>
                                                Limit the access to an XForms control, such as a
                                                text field, bound to a specific element or attribute
                                                (allowing read-only access to the control, allowing
                                                no access to the control).
                                            </li>
                                        </ul>
                                    </p>

                                    You will find a very simple example of <code>&lt;xforms:bind></code> in the <a
                                    href="/xforms-controls/">XForms text</a> example. In this example we check that the
                                    correct password is entered with an XForms model that contains:

                                    <xml-source show-namespaces="false">
                                        <xforms:model xmlns:xforms="http://www.w3.org/2002/xforms">
                                            <xforms:instance>
                                                <form>
                                                    <secret>42</secret>
                                                </form>
                                            </xforms:instance>
                                            <xforms:bind nodeset="/form/secret" constraint="string(.) = '42'"/>
                                        </xforms:model>
                                    </xml-source>
                                </li>
                                <li>
                                    <p>
                                        You can make sure that the XForms instance conforms to a
                                        given schema by referencing this schema from the XForms
                                        model. You accomplish this by using the <code>schema</code>
                                        attribute on the <code>&lt;xforms:model></code> element. For
                                        instance:
                                    </p>
                                    <xml-source show-namespaces="false">
                                        <xforms:model schema="employee.xsd">
                                            <xforms:instance>
                                                <employee>
                                                    <age>-41</age>
                                                    ...
                                                </employee>
                                            </xforms:instance>
                                        </xforms:model>
                                    </xml-source>
                                    <p>
                                        In the example above, let's assume the schema,
                                        <code>employee.xsd</code>, indicates that the content of
                                        <code>&lt;age&gt;</code> must be a positive integer
                                        (<code>xs:positiveInteger</code>). If the end-user enters a
                                        negative value then the XForms engine annotates the
                                        <code>&lt;age&gt;</code> element in the XForms instance with
                                        an attribute <code>xxforms:valid="false"</code>. The model
                                        can look for this annotation if it depends on the instance
                                        being valid.
                                    </p>
                                    <p>
                                        Additionally the view can inform the end-user of the error
                                        via a control bound to the <code>&lt;age&gt;</code> element.
                                        For instance:
                                    </p>
                                    <xml-source>
                                        <xforms:input ref="age">
                                            <xforms:alert>The age must be a positive number</xforms:alert>
                                        </xforms:input>
                                    </xml-source>
                                    <p>
                                        If the end-user enters an invalid value, the alert will be
                                        displayed in the generated HTML as shown in the screenshot
                                        below. Note that you can fully control how errors are displayed
                                        by customizing the provided <code>xforms-to-xhtml.xsl</code>
                                        stylesheet.
                                    </p>
                                    <img src="../apps/doc/images/home-changes-error.png" width="352" height="145"/>
                                </li>
                                <li>
                                    <p>
                                        With OXF, part of the state of the application is stored in
                                        hidden HTML input fields. You can encrypt values in hidden
                                        input fields as well as the names of HTML form elements and
                                        by doing so prevent a malicious end-user from discovering or
                                        modifying the internal state of your application. You
                                        encrypt hidden input field values by setting the
                                        <code>oxf.xforms.encrypt-hidden</code> property to
                                        <code>true</code> in <code>properties.xml</code>.
                                    </p>
                                    <xml-source show-namespaces="false">
                                        <property as="xs:boolean" name="oxf.xforms.encrypt-hidden" value="true"/>
                                    </xml-source>
                                    <p>
                                        You encrypt the names of HTML form elements by setting the
                                        <code>oxf.xforms.encrypt-names</code> property to
                                        <code>true</code> in <code>properties.xml</code>:
                                    </p>
                                    <xml-source show-namespaces="false">
                                        <property as="xs:boolean" name="oxf.xforms.encrypt-names" value="true"/>
                                    </xml-source>
                                </li>
                                <li>
                                    <p>
                                        Before OXF 2.5, the output of the view was going through the
                                        "XForms output prologue" (if one was declared in the
                                        <code>controller.xml</code>), the XForms output, and finally the
                                        epilogue. The XForms output used to transform XForms controls
                                        to XHTML form elements.
                                    </p>
                                    <p>
                                        In OXF 2.5, things are done differently to make the whole
                                        process simpler and more explicit, and to grant you full control
                                        over the generated XHTML. Specifically:
                                    </p>
                                    <ol>
                                        <li>
                                            The output of the view goes directly to the
                                            epilogue.
                                        </li>
                                        <li>
                                            The XForms output processor is explicitly called from the
                                            epilogue.
                                        </li>
                                        <li>
                                            There is no need for an "XForms output prologue". If
                                            you want to transform the output of the view before it
                                            goes to the XForms output processor just add that
                                            transformation in the epilogue pipeline.
                                        </li>
                                        <li>
                                            The XForms output processor does not replace XForms
                                            elements with XHTML form elements. Instead, it adds
                                            annotation to the XForms elements so they can be easily
                                            transformed into XHTML later using a simple stylesheet.
                                            In fact OXF comes with a stylesheet,
                                            <code>xforms-to-xhtml.xsl</code>, that does just that.
                                            You can modify this stylesheet to customize the
                                            generated XHTML, or you can replace it altogether with
                                            your own stylesheet if you want to generate something
                                            else (say SVG) instead of XHTML.
                                        </li>
                                    </ol>
                                    <p>
                                        The figure below provides an overview of the transformation
                                        done in the epilogue:
                                    </p>
                                    <img print-format="pdf" src="../apps/doc/images/home-changes-epilogue.png"/>
                                </li>
                            </ul>
                        </li>
                    </ul>
                    <ul>
                        <li>Minor changes:
                            <p>
                                <ul>
                                    <li>
                                    Nested groups are now supported. For instance:

                                    <xml-source show-namespaces="false">
                                            <xforms:group ref="/form">
                                                <xforms:group ref="address">
                                                ...
                                            </xforms:group>
                                            </xforms:group>
                                        </xml-source>

                                    Is equivalent to:

                                    <xml-source show-namespaces="false">
                                            <xforms:group ref="/form/address">
                                            ...
                                        </xforms:group>
                                        </xml-source>
                                    </li>
                                    <li>
                                        Support for <code>&lt;xforms:caption&gt;</code>, which is
                                        not part of the final XForms specification, has been
                                        replaced with support for <code>&lt;xforms:label&gt;</code>,
                                        which is part of the final XForms specification.
                                    </li>
                                    <li>
                                        When multiple values are selected in a list or checkboxes the string containing
                                        the space separated list of selected values is stored in the element or
                                        attribute bound to the control. Also, see the <a href="/xforms-controls/">XForms
                                        selection</a> example.
                                    </li>
                                    <li>
                                        You must use the namespace
                                        <code>http://www.w3.org/2002/xforms</code> for all of your
                                        XForms elements as support for the old XForms namespaces has
                                        been removed.
                                    </li>
                                    <li>
                                        Previously the XForms engine evaluated the <code>ref</code>
                                        attribute in <code>&lt;xforms:filename&gt;</code> and
                                        <code>&lt;xforms:mediatype&gt;</code> in the same context as
                                        the <code>ref</code> attribute in the parent element. Now
                                        the engine evaluates them in the context defined by the
                                        <code>ref</code> attribute in
                                        <code>&lt;xforms:upload&gt;</code>, as per the XForms
                                        specification.
                                    </li>
                                </ul>
                            </p>
                        </li>
                    </ul>
                </section>
                <a name="xhtml"/>
                <section>
                    <title>XHTML Support</title>
                    <p>
                        The standard document format for page templates is now XHTML. With previous
                        versions of OXF, a format particular to OXF was used in the
                        <code>http://orbeon.org/oxf/xml/document</code> namespace. You would typically
                        declare this namespace as follows:
                        <code>xmlns:d="http://orbeon.org/oxf/xml/document"</code>. Page templates
                        looked like:
                    </p>
                    <xml-source>
                        <d:document xmlns:d="http://orbeon.org/oxf/xml/document">
                            <d:head>
                                <d:title>Home Page</d:title>
                            </d:head>
                            <d:body>
                                <p>Page content.</p>
                            </d:body>
                        </d:document>
                    </xml-source>
                    <p>
                        The same document should now look as follows:
                    </p>
                    <xml-source>
                        <xhtml:xhtml xmlns:xhtml="http://www.w3.org/1999/xhtml">
                            <xhtml:head>
                                <xhtml:title>Home Page</xhtml:title>
                            </xhtml:head>
                            <xhtml:body>
                                <p>Page content.</p>
                            </xhtml:body>
                        </xhtml:xhtml>
                    </xml-source>
                    <p>
                        While the differences between the XHTML and the OXF "document" format are minor,
                        using XHTML has the following benefits:
                    </p>
                    <ul>
                        <li>XHTML is a fully documented W3C standard </li>
                        <li>XHTML looks instantly familiar to any HTML developer</li>
                    </ul>
                    <p>
                        The OXF "document" format or the XHTML format are converted into regular HTML in
                        the epilogue defined in your Page Flow file. The new standard OXF epilogue now
                        only handles XHTML. If you have made changes to your epilogue file that depend
                        on the OXF "document" format, you may have to convert to using the XHTML format
                        instead.
                    </p>
                </section>
                <a name="pfc"/>
                <section>
                    <title>Page Flow Controller</title>
                    <ul>
                        <li>
                            <p>
                                For the sake of clarity we have renamed the Web Application
                                Controller the <a href="reference-page-flow">Page Flow
                                Controller</a>. Similarly files that were in the examples and named
                                <code>controller.xml</code> have been renamed
                                <code>page-flow.xml</code>.
                            </p>
                        </li>
                        <note>
                            <p>
                                Using the name <code>page-flow.xml</code> is not mandatory, but is
                                the recommended naming practice. If you are migrating from OXF 2.2,
                                it is also recommended to rename your <code>controller.xml</code>
                                files to <code>page-flow.xml</code>. If you do so, please update the
                                reference to <code>controller.xml</code> in your
                                <code>web.xml</code> as well.
                            </p>
                        </note>
                        <li>
                            <p>
                                The <code>&lt;view></code> element is not supported anymore. Attributes
                                on the <code>&lt;view></code> element were used to define:
                            </p>
                            <ol>
                                <li>The epilogue</li>
                                <li>What happens when no page is found</li>
                                <li>The namespace and prefix used by the XForms engine when
                                generating XHTML elements</li>
                                <li>An optional pipeline called "XForms output prologue" to be executed
                                on the output of the view before the XForms engine transforms the XForms
                                elements in XHTML</li>
                            </ol>
                            <p>
                                Let's see how those translate in the new <code>page-flow.xml</code>
                                syntax:
                            </p>
                            <ol>
                                <li>
                                    The epilogue is referenced with an <code>&lt;epilogue></code>
                                    element, for instance:

                                    <xml-source>
                                        <epilogue url="/config/epilogue.xpl"/>
                                    </xml-source>
                                </li>
                                <li>
                                    Instead of pointing to a pipeline to be executed when no page is found,
                                    you now define the id of the page to be displayed in that
                                    case, for example:

                                    <xml-source>
                                        <page id="not-found" path-info="/not-found" view="/config/not-found.xml"/>
                                        <not-found-handler page="not-found"/>
                                    </xml-source>
                                </li>
                                <li>
                                    As we have seen above in the XForms section, the XForms engine does
                                    not generate XHTML directly but instead decorates the XForms
                                    elements, which are then transformed in XHTML in
                                    <code>xforms-to-xhtml.xsl</code>, itself is called from the
                                    epilogue. So that stylesheet now fully controls the generated
                                    elements. The provided <code>xforms-to-xhtml.xsl</code> generates
                                    XHTML elements in the XHTML namespace.
                                </li>
                                <li>
                                    The OXF processor part of the OXF XForms engine that decorates the
                                    XForms elements is ran from the epilogue. If you need to run a
                                    transformation on the output of the view before it goes to the
                                    XForms engine, you now insert this transformation by modifying the
                                    <code>epilogue.xpl</code>. As a result, an "XForms output prologue" is no
                                    longer needed.
                                </li>
                            </ol>
                            <p>
                                Note that the pre-OXF 2.5 <code>&lt;view></code> element is not
                                supported anymore. Consequently, you will need to change your page flow when
                                upgrading to OXF 2.5.
                            </p>
                        </li>
                        <li>
                            <a name="instance-passing"/>
                            <p>
                                You can now control what method is used to transitions from one page to
                                the other. Consider this page flow:
                            </p>
                            <xml-source>
                                <page id="a" path-info="/a" xforms="..." model="..." view="...">
                                    <action when="...">
                                        <result page="b"/>
                                    </action>
                                </page>
                                <page id="b" path-info="/b" xforms="..." model="..." view="..."/>
                            </xml-source>
                            <p>
                                Going from page "a" to page "b" can be done with either a "forward" or
                                a "redirect":
                            </p>
                            <table>
                                <tr>
                                    <th>Redirect</th>
                                    <td>
                                        <img print-format="pdf" src="../apps/doc/images/home-changes-forward.png"/>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Forward</th>
                                    <td>
                                        <img print-format="pdf" src="../apps/doc/images/home-changes-redirect.png"/>
                                    </td>
                                </tr>
                            </table>
                            <p>
                                The "forward" method is new in OXF 2.5. The benefit of the
                                "redirect" method is that after being redirected to page <i>b</i>,
                                the end-user will see a URL starting with <code>/b</code> in the
                                browser's address bar. He/she will also be able to bookmark that
                                page and come back to it later. However, a drawback is that the
                                request for page <i>b</i> is sent by the browser with a
                                <code>GET</code> method. Since browsers impose limits on the
                                maximum amount of information that can be sent in a major
                                <code>GET</code> (URL length), this method might not work if the
                                amount of information that needs to be passed to page <i>b</i> from
                                page <i>a</i> is too large. This typically happens when working with
                                fairly large XForms instances. In those cases, you must use the
                                "forward" method, which does not limit the amount of information
                                passed from page to page. The "forward" method also reduces the
                                number of roundtrips with the server.
                            </p>
                            <p>
                                You can configure the method:
                            </p>
                            <ol>
                                <li>
                                    At the application level, in <code>properties.xml</code> with:
                                    <xml-source>
                                        <property as="xs:string" processor-name="oxf:page-flow" name="instance-passing" value="forward|redirect"/>
                                    </xml-source>
                                </li>
                                <li>
                                    At the page flow level with the <code>instance-passing</code>
                                    attribute on the page flow root element:
                                    <xml-source>
                                        <config instance-passing="forward|redirect">...</config>
                                    </xml-source>
                                </li>
                                <li>
                                    In the page flow at the "result" level, with the
                                    <code>instance-passing</code> attribute on the
                                    <code>&lt;result></code> element:
                                    <xml-source>
                                        <page id="a" path-info="/a" xforms="..." model="..." view="...">
                                            <action when="...">
                                                <result page="b" instance-passing="forward|redirect"/>
                                            </action>
                                        </page>
                                    </xml-source>
                                </li>
                            </ol>
                            <p>
                                A configuration at the application level (<code>properties.xml</code>)
                                can be overridden by a configuration at the page flow level
                                (<code>instance-passing</code> on the root element), which can in its
                                turn be overridden by a configuration at the result level
                                (<code>instance-passing</code> on the <code>&lt;result></code> element).
                            </p>
                        </li>
                    </ul>
                </section>
                <a name="xslt"/>
                <section>
                    <title>Default XSLT Transformer</title>
                    <p>
                        Saxon 7.9.1 is now the default and recommended XSLT transformer. Saxon rivals
                        Xalan in terms of performance and is better aligned with changes in the XSLT
                        specification. In particular, Saxon supports XSLT 2.0, which offers major
                        improvements over XSLT 1.0.
                    </p>
                    <p>
                        This means that when you use the <code>oxf:xslt</code> processor the XSLT
                        input is processed by Saxon. If your existing code makes use of
                        Xalan-specific extensions you must do one of the following (in order of
                        preference):
                    </p>
                    <ul>
                        <li>Standard XSLT constructs supported by Saxon</li>
                        <li>EXSLT extensions supported by Saxon</li>
                        <li>Saxon-specific extensions</li>
                        <li>Refer explicitly to the Xalan tranformer by using <code>oxf:xalan</code></li>
                    </ul>
                    <p>
                        The Page Flow Controller uses the default XSLT transformer for processing
                        XSLT page templates referenced directly by the Page Flow. If you have an
                        XSLT page template that must be processed by an alternate XSLT transformer
                        you must use a pipeline that calls your XSLT transformer. For example, if
                        your page definition in the Page Flow is as follows:
                    </p>
                    <xml-source>
                        <page view="my-view.xsl"/>
                    </xml-source>
                    <p>
                        Change it to call an XPL pipeline instead:
                    </p>
                    <xml-source>
                        <page view="my-view.xpl"/>
                    </xml-source>
                    <p>
                        And embed, or refer to your existing stylesheet from the newly created
                        pipeline:
                    </p>
                    <xml-source>
                        <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline">
                            <p:param type="input" name="data"/>
                            <p:param type="output" name="data"/>
                            <p:processor name="oxf:xalan">
                                <p:input name="config" href="my-view.xsl"/>
                                <p:input name="data" href="#data"/>
                                <p:output name="data" ref="data"/>
                            </p:processor>
                        </p:config>
                    </xml-source>
                </section>
                <a name="xpl"/>
                <section>
                    <title>Pipelines / XPL</title>
                    <ul>
                        <li>
                            <p>
                                Processors are now referenced by name instead of URI. For instance, the
                                URI for the XSLT processor was <code>oxf/processor/xslt</code> and this
                                processor was called in an XPL file with:
                            </p>
                            <xml-source show-namespaces="false">
                                <p:processor uri="oxf/processor/xslt">
                                    ...
                                </p:processor>
                            </xml-source>
                            <p>
                                Starting with OXF 2.5, the name of this processor is
                                <code>oxf:xslt</code>, where <code>oxf</code> is a prefix mapped to the
                                namespace <code>http://www.orbeon.com/oxf/processors</code>. You call
                                the XSLT processor in OXF 2.5 with:
                            </p>
                            <xml-source show-namespaces="false">
                                <p:processor name="oxf:xslt">
                                    ...
                                </p:processor>
                            </xml-source>
                            <p>
                                All the OXF processors are in the
                                <code>http://www.orbeon.com/oxf/processors</code> namespace. When creating your
                                own processors, choose a namespace (e.g.
                                <code>http://www.acme.com/oxf/processors</code>), and create processor
                                names in that namespace (e.g. <code>acme:my-processor</code>).
                            </p>
                            <p>
                                Using URIs to reference processors is deprecated: you can still use URIs
                                in OXF 2.5, however URIs support might be dropped in a future release.
                                Until that happens, you can optionally provide a URI in addition to a
                                name when you declare your own processors in
                                <code>processors.xml</code>. For example, you could have:
                            </p>
                            <xml-source show-namespaces="false">
                                <processor name="acme:my-processor" uri="oxf/processor/my-processor">
                                    <class name="com.acme.MyProcessor"/>
                                </processor>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                You can now have a <code>&lt;p:for-each&gt;</code> that does not produce
                                a document. You do this by not having any of the <code>root</code>,
                                <code>id</code>, or <code>ref</code> attribute on the
                                <code>&lt;p:for-each&gt;</code> element. This example issues one SQL
                                request (e.g. an insert or an update as we are not interested in the output) for each employee contained in a document:
                            </p>
                            <xml-source show-namespaces="false">
                                <p:for-each href="#employees" select="/employees/employee">
                                    <p:processor name="oxf:sql">
                                        <p:input name="data" href="current()"/>
                                        <p:input name="config">...</p:input>
                                        <p:output name="data" id="sql-out"/>
                                    </p:processor>
                                    <p:processor name="oxf:null-serializer">
                                        <p:input name="data" href="#sql-out"/>
                                    </p:processor>
                                </p:for-each>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                When no id that can be reused later is defined in any branch of a
                                <code>&lt;p:choose></code>, then <code>&lt;p:otherwise></code> is optional.
                                For instance, say you have want to save in a file an "employee" document if
                                his salary is above $100K, you can write in your pipeline:
                            </p>
                            <xml-source show-namespaces="false">
                                <p:choose href="#employee">
                                    <p:when test="/employee/salary > 100000">
                                        <p:processor name="oxf:file-serializer">
                                            <p:input name="config">
                                                <config>
                                                    <file>highly-paid-employee.xml</file>
                                                    ...
                                                </config>
                                            </p:input>
                                            <p:input name="data" href="#employee"/>
                                        </p:processor>
                                    </p:when>
                                </p:choose>
                            </xml-source>
                        </li>
                        <li>
                            You can now reference ids declared outside a
                            <code>&lt;p:for-each&gt;</code> from inside the
                            <code>&lt;p:for-each&gt;</code>.
                        </li>
                        <li>
                            You can now reference the current document
                            with <code>current()</code> in a
                            <code>&lt;p:for-each&gt;</code> from statements inside a
                            <code>&lt;p:choose&gt;</code>, itself in the
                            <code>&lt;p:for-each&gt;</code>.
                        </li>
                        <li>
                            Several issues with <code>&lt;p:for-each&gt;</code> have been fixed. Those
                            were particularly visible when using nested <code>&lt;p:for-each&gt;</code>.
                        </li>
                    </ul>
                </section>
                <a name="properties"/>
                <section>
                    <title>Properties</title>
                    <p>
                        The format of the OXF properties files, available as
                        <code>config/properties.xml</code>, now supports:
                    </p>
                    <ul>
                        <li>a syntax to specify value types based on XML Schema types</li>
                        <li>processor-specific properties</li>
                    </ul>
                    <p>
                        Properties global to OXF have the following syntax:
                    </p>
                    <xml-source>
                        <property as="xs:integer" name="oxf.cache.size" value="200"/>
                    </xml-source>
                    <p>
                        The <code>as</code> attribute specifies the type, according to the XML Schema
                        conventions, of the value of the property stored in the <code>value</code>
                        attribute. The <code>name</code> attribute specifies the name of the property.
                        The following types are currently available:
                    </p>
                    <ul>
                        <li>xs:string</li>
                        <li>xs:integer</li>
                        <li>xs:boolean</li>
                        <li>xs:date</li>
                        <li>xs:dateTime</li>
                        <li>xs:QName</li>
                        <li>xs:anyURI</li>
                    </ul>
                    <p>
                        Processor-specific properties have an additional <code>processor</code>
                        attribute that specifies the name of the processor it applies to. For example:
                    </p>
                    <xml-source>
                        <property as="xs:string" processor-name="oxf:page-flow" name="instance-passing" value="redirect"/>
                    </xml-source>
                    <p>
                        The example above means that the <code>instance-passing</code> property of the
                        <code>oxf:page-flow</code> processor is set to the string value
                        <code>redirect</code>. Only the <code>oxf:page-flow</code> processor "sees" this
                        property.
                    </p>
                    <p>
                        The <code>xs</code> and <code>oxf</code> prefixes must be defined at the
                        beginning of the properties file. Please refer to the standard properties file
                        under <code>config/properties.xml</code> directory for a complete example.
                    </p>
                    <p>
                        Note that property types depend on property names. For example, the
                        <code>oxf:page-flow</code> processor expects an <code>instance-passing</code>
                        property of type <code>xs:string</code>. Specifying an other type will cause an
                        error.
                    </p>
                    <p>
                        Several properties have been renamed:
                    </p>
                    <ul>
                        <li><code>oxf.log4j-config</code> replaces <code>oxf.servlet.log4j</code></li>

                        <li>
                            All processor-specific properties, ones that had names of the form
                            <code>oxf.processor_name.property_name</code>, now have names of the
                            form <code>oxf.property_name</code>. The scheme described above is used
                            to indicate the processor the property applies to.
                        </li>
                    </ul>
                </section>
                <section>
                    <title>JDK 1.4 and Supported Application Servers</title>
                    <p>
                        OXF 2.5 requires the JDK 1.4. Consequently, application servers that only run
                        with JDK 1.3 are no longer supported. Supported application servers include:
                    </p>
                    <ul>
                        <li>
                            <a href="http://jakarta.apache.org/tomcat/">Apache Tomcat</a> 4.1.30 and 5.0.25</li>
                        <li>
                            <a href="http://www-3.ibm.com/software/webservers/appserv/">IBM WebSphere Application Server</a> 5.1</li>
                        <li>
                            <a href="http://www.bea.com/framework.jsp?CNT=index.htm&amp;FP=/content/products/server">BEA WebLogic Server</a> 8.1</li>
                    </ul>
                    <p>
                        For more information on supported application servers, please send your questions to
                        info@orbeon.com.
                    </p>
                </section>
            </section>
            <section>
			    <title>Other Changes</title>
                <section>
                    <title>Scope Generator and Scope Serializer</title>
                    <p>
                        The Session generator and Session serializer processors are deprecated. They
                        are replaced by the <a href="processors-generators#scope-generator">Scope
                        generator</a> and <a href="processors-serializers#scope-serializer">Scope
                        serializer</a> processors, which can store and retrieve documents from the
                        session scope, but also from the application and request scopes.
                    </p>
                </section>
                <section>
                    <title>Session Listeners</title>
                    <p>
                        You can setup a processor to be executed when a session is created and when it
                        is destroyed. Typically, one would use this feature to run a pipeline loading and
                        storing the session scope the user's profile when that user logs in (see the
                        Scope generator and serializer above). This can be set up in the Web application
                        configuration (<code>web.xml</code>) with:
                    </p>
                    <xml-source>
                        <context-param>
                            <param-name>oxf.session-created-processor.name</param-name>
                            <param-value>{http://www.orbeon.com/oxf/processors}pipeline</param-value>
                        </context-param>
                        <context-param>
                            <param-name>oxf.session-created-processor.input.config</param-name>
                            <param-value>oxf:/context/session-created.xpl</param-value>
                        </context-param>
                        <context-param>
                            <param-name>oxf.session-destroyed-processor.name</param-name>
                            <param-value>{http://www.orbeon.com/oxf/processors}pipeline</param-value>
                        </context-param>
                        <context-param>
                            <param-name>oxf.session-destroyed-processor.input.config</param-name>
                            <param-value>oxf:/context/session-destroyed.xpl</param-value>
                        </context-param>
                    </xml-source>
                    <p>
                        With the above configuration, the pipeline
                        <code>oxf:/context/session-created.xpl</code> will run when users log in,
                        and <code>oxf:/context/session-destroyed.xpl</code> will run when users log out, or
                        when their session expires.
                    </p>
                </section>
                <section>
                    <title>XUpdate</title>
                    <ul>
                        <li>
                            New XUpdate elements:
                            <ul>
                                <li>
                                    &lt;xu:message> ? Just like the XSLT <code>&lt;xsl:message></code>,
                                    the content of the element is evaluated and logged. This is typically
                                    used to debug an XUpdate program.
                                </li>
                                <li>
                                    &lt;xu:error> ? The XUpdate program is interrupted as an exception
                                    is thrown with the result of the evaluation of the element content.
                                </li>
                                <li>
                                    &lt;xu:namespace> ? Adds a namespace declaration on the current
                                    element, just like the XSLT <code>&lt;xsl:namespace></code>.
                                </li>
                            </ul>
                        </li>
                        <li>
                            New XPath functions:
                            <ul>
                                <li>
                                    The XPath 2.0 function <code>get-namespace-uri-for-prefix()</code>
                                    is supported (the XPath engine is still 1.0 compliant, not
                                    2.0).
                                </li>
                                <li>
                                    <code>evaluate(xpath, namespaces, nodeset)</code> ? Evaluates the
                                    first string argument as an XPath expression in the context of the
                                    third nodeset argument. Any prefix used in the XPath expression must
                                    be defined in the second argument, which is a nodeset of namespace
                                    nodes.
                                </li>
                            </ul>
                        </li>
                        <li>
                            Bug fixes:
                            <ul>
                                <li>
                                    In some cases, when multiple statements are used in a
                                    <code>&lt;xu:for-each&gt;</code>, a statement could change the
                                    context and the subsequent statement would execute with an
                                    incorrect context. This issue is now fixed.
                                </li>
                                <li>
                                    Recursive functions are now allowed.
                                </li>
                            </ul>
                        </li>
                    </ul>
                </section>
                <section>
                    <title>Java Processor</title>
                    <p>
                        The Java processor now also includes classes from the
                        <code>WEB-INF/classes</code> directory when compiling Java files stored in the
                        resources directory. This way you can put support classes directly in
                        <code>WEB-INF/classes</code> without having to package them in a JAR and to
                        deploy this JAR in <code>WEB-INF/lib</code>.
                    </p>
                </section>
                <section>
                    <title>XInclude Support</title>
                    <p>
                        You can now use XInclude in any XML file. For example, you can have an XForms
                        instance declared in a file and the XForms model in another file, with the later
                        including the former with XInclude. Say you have a document that defines the
                        structure of an employee in <code>employee.xml</code>:
                    </p>
                    <xml-source>
                        <employee>
                            <firstname/>
                            <lastname/>
                            <salary/>
                            ...
                        </employee>
                    </xml-source>
                    <p>
                        Your XForms model can then include this document as an XForms instance with an
                        XInclude element. That element must be in the
                        <code>http://www.w3.org/2001/XInclude</code> namespace:
                    </p>
                    <xml-source show-namespaces="false" xmlns:xi="dummy">
                        <xforms:model>
                            <xforms:instance>
                                <xi:include href="employee.xml"/>
                            </xforms:instance>
                        </xforms:model>
                    </xml-source>
                    <p>Limitations:</p>
                    <ul>
                        <li>
                            Files that are included with XInclude must be static: their content cannot
                            change while the application is running. If they do, there is a risk that
                            an older version could be used due to aggressive caching.
                        </li>
                        <li>
                            XPointer is not supported. You can only include entire documents.
                        </li>
                    </ul>
                </section>
                <section>
                    <title>Examples Portal</title>
                    <p>
                        The OXF examples are presented in a new examples portal allowing easy navigation
                        between running examples, their description, and their source code.
                    </p>
                </section>
                <section>
                    <title>XML Databases support</title>
                    <p>
                         OXF now supports XML databases using the XML:DB API and ships with the
                         open source eXist database. New examples demonstrating this support are:
                    </p>
                    <ul>
                        <li><b>The <a href="/goto-example/bizdoc">"BizDoc" Example
                        Application</a></b>, a simplistic document-centric application which
                        illustrates creating, reading, updating, and deleting (also known as CRUD
                        operations) XML business documents from a database.</li> <li><b>The XML:DB
                        Sandbox</b>, in which you can enter and run queries against an XML
                        database.</li>
                    </ul>
                    <p>
                        For more information, please refer to the <a
                        href="OPS Tutorial.pdf">OPS Tutorial</a>.
                    </p>
                </section>
                <section>
                    <title>Resource Server</title>
                    <p>
                        The <a href="processors-other#resource-server">Resource Server</a> now
                        supports serving any URL, in addition to serving OXF resources (URLs with
                        the form oxf:*). Additionally, case insensitive pattern matching is used for
                        the <code>content-type</code> header generation.
                    </p>
                </section>
            </section>
            <!--
			<section>
				<title>SQL Processor</title>
				<p>
                    The <a href="processors-sql">SQL Processor</a> supports BLOBs and the native
                    Oracle <code>XMLType</code> data type. CLOB, BLOB and <code>XMLType</code>
                    support is better documented and comes with examples. [TODO: Document, mention
                    streaming, etc.]
                </p>
			</section>
			<section>
				<title>Chart Processor</title>
				<p>
                    The <a href="processors-charts-spreadsheets#chart">Chart processor</a>
                    supports more chart types, such as horizontal bar and 3D stacked bar.
                </p>
			</section>
			<section>
				<title>Chart Processor</title>
				<ul>
					<li>serializer</li>
					<li>legend was always visible</li>
					<li>xpath expression selecting attributes</li>
					<li>new category-margin</li>
				</ul>
			</section>
			<section>
				<title>PDF Serializer</title>
				<ul>
					<li>no more error message with logger sent to console</li>
				</ul>
			</section>
			<section>
				<title>Bean Generator</title>
				<p>
                    The bean generator serializes objects stored in the HTTP request or session to
                    XML. When the Bean generator finds an instance of
                    <code>org.w3c.dom.Document</code>, it sends the corresponding XML as-is. Nothing
                    changed for instances of other classes: they are serialized to XML as JavaBeans.
                </p>
			</section>
            -->
		</section>
	</body>
</document>
