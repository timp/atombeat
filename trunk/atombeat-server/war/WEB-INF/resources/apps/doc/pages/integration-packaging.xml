<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
	<header>
		<title>Packaging and Deployment</title>
	</header>
	<body>
		<section>
			<title>Scope</title>
			<p>
                This section explains the structure of the standard WAR distributed with Orbeon Forms and how this WAR
                integrates with the application server (or Servlet container). This information is useful if you need to
                repackage Orbeon Forms. For instance, if you want to build an EAR file, or if you need to deploy more
                complex Orbeon Forms applications containing Servlets, Servlet Filters, Portlets, and Servlet context
                listeners.
            </p>
		</section>
		<section>
			<title>WAR Structure</title>
            <p>
                The following table lists the most important files contained in <code>orbeon.war</code>: 
            </p>
            <table>
				<tr>
					<th>Files</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>
						<code>WEB-INF/lib/orbeon.jar</code>
					</td>
					<td>JAR file with all the Orbeon Forms classes.</td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/lib/orbeon-resources-public.jar</code>
					</td>
					<td>JAR file with all the Orbeon Forms files that can be served to a web client, such as CSS and JavaScript files.</td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/lib/orbeon-resources-private.jar</code>
					</td>
					<td>JAR file with all the Orbeon Forms files that can not be served to a web client.</td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/lib/*.jar</code>
					</td>
					<td>
                        All the other JAR files in the <code>WEB-INF/lib</code> directory are used either by the Orbeon
                        Forms core engine, or one of the Presentation Server processors.
                    </td>
				</tr>
				<tr>
					<td>
						<code>WEB-INF/web.xml</code>
					</td>
					<td>
                        The standard descriptor for this WAR file. It configures the Orbeon Forms properties and
                        resource manager, the Orbeon Forms main servlet and Ajax servlet, as well as other resources
                        such as the embedded eXist XML database.
                    </td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/portlet.xml</code>
					</td>
					<td>
                        The standard portlet descriptor for this WAR file is required if you use portlets. It typically
                        declares instances of <code>OPSPortlet</code>. For more information, see <a
                        href="integration-portlets">JSR-168 Portlets</a>.
                    </td>
				</tr>
                <!--
                <tr>
					<td>
						<code>WEB-INF/weblogic.xml</code>
					</td>
					<td>
                        An additional descriptor for WebLogic. This descriptor typically maps
                        resource names to actual resources configured in the application server
                        (e.g. for EJBs, users, JDBC data sources, etc).
                    </td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/sun-web.xml</code>
					</td>
					<td>
                        An additional descriptor for SunOne. This descriptor typically maps
                        resource names to actual resources configured in the application server
                        (e.g. for EJBs, users, JDBC data sources, etc).
                    </td>
				</tr>
				-->
				<tr>
					<td>
						<code>WEB-INF/resources/*</code>
					</td>
					<td>
                        Contains Orbeon Forms resources.
                    </td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/resources/config/*</code>
					</td>
					<td>
                        Contains Orbeon Forms resources which you can configure. In particular, this directory
                        contains <code>properties.xml</code>, the main Orbeon Forms configuration file.
                    </td>
				</tr>
                <tr>
					<td>
						<code>WEB-INF/resources/apps/*</code>
					</td>
					<td>
                        Contains Orbeon Forms example applications resources. Each sub-directory contains a separate
                        Orbeon Forms example application. When building your own application xxx
                    </td>
				</tr>
                <tr>
					<td>
						<code>xforms-jsp/*</code>
					</td>
					<td>
                        Contains examples using JavaServer Pages (JSP) to produce XForms. This directory can be removed
                        if you do not want to run these examples.
                    </td>
				</tr>
            </table>
		</section>
		<section>
			<title>Orbeon Forms Initialization</title>
            <p>
                The following figure illustrates the initialization of a simple Orbeon Forms
                deployment in a J2EE application server:
            </p>
			<img print-format="pdf" src="../apps/doc/images/integration-packaging-bootstrap.png" width="593" height="581"/>
            <p>
                The initialization follows this lifecycle:
            </p>
			<ol>
				<li>
					<p>The application server reads the
                    <code>WEB-INF/web.xml</code> file, which:</p>
					<ul>
						<li>Declares a Servlet named <code>orbeon-main-servlet</code>
                        implemented by the class <code>org.orbeon.oxf.servlet.OrbeonServlet</code> (loaded from
                        <code>lib/orbeon.jar</code>)</li>
						<li>Defines <code>orbeon-main-servlet</code> as the default Servlet
                        (i.e. the Servlet handling all the requests).</li>
					</ul>
					<xml-source>
<web-app>
    <servlet>
        <servlet-name>orbeon-main-servlet</servlet-name>
        <servlet-class>org.orbeon.oxf.servlet.OrbeonServlet</servlet-class>
        <comment>Initialization parameters here (see below)</comment>
    </servlet>
    <servlet-mapping>
        <servlet-name>orbeon-main-servlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
					</xml-source>
				</li>
				<li>
					<p>
                        The <code>web.xml</code> file configures the <code>OPSServlet</code> with a
                        minimal set of parameters. Those parameters tell <code>OPSServlet</code>:
                    </p>
					<ul>
						<li>
                            <p>
                                What resource manager has to be used, and how this resource manager is configured. In
                                the default WAR bundled in the Orbeon Forms distribution, Orbeon Forms loads resources
                                from the <code>WEB-INF/resources</code> directory inside the WAR. If it can't find a
                                resource in this directory, it will try to look for it inside <code>orbeon.jar</code> or
                                <code>orbeon-resources-private.jar</code>. Only static resources that are part of
                                Orbeon Forms are stored in <code>orbeon.jar</code> and
                                <code>orbeon-resources-private.jar</code> (as opposed to Orbeon Forms applications). The
                                <link href="reference-resource-managers">Resource Managers</link> section explains in
                                detail how resource managers work.
                            </p>
                        </li>
						<li>
                            <p>
                                The location of <code>properties.xml</code>, by default <code>oxf:/config/properties.xml</code>.
                                See <a href="reference-properties">Configuration Properties</a> for more details.
                            </p>
                        </li>
                        <li>
                            <p>
                                What main processor or context listener processors must be used. By default, the Page
                                Flow Controller is used as the main processor.:
                            </p>
                            <xml-source>
                                <comment>The main processor that OPSServlet must execute</comment>
                                <init-param>
                                    <param-name>oxf.main-processor.name</param-name>
                                    <param-value>{http://www.orbeon.com/oxf/processors}page-flow</param-value>
                                </init-param>
                                <comment>The Page Flow Controller configuration file</comment>
                                <init-param>
                                    <param-name>oxf.main-processor.input.controller</param-name>
                                    <param-value>oxf:/page-flow.xml</param-value>
                                </init-param>
                            </xml-source>
                        </li>
					</ul>
				</li>
				<li>
					<p>
                        More Orbeon Forms configuration is available in an XML file, <code>properties.xml</code>, stored
                        with the resources. The exact name and path of this file is specified within
                        <code>web.xml</code>. For more information about the properties file, see <link
                        href="reference-properties">Orbeon Forms Properties</link>.
                    </p>
				</li>
				<li>
                    The <code>oxf.main-processor.input.controller</code> property connects the
                    <code>controller</code> input of the Page Flow Controller to the configuration
                    file <code>oxf:/page-flow.xml</code>. The Page Flow Controller reads
                    this input before it starts to operate.
                </li>
                <p>
                    <li>
                        The Page Flow Controller now handles client requests and dispatches them
                        to other pipelines. For more information about the role of the controller,
                        see the <link href="reference-page-flow">Page Flow Controller
                        reference</link>.
                    </li>
                </p>
			</ol>
		</section>
        <a name="main-processor"/>
        <section>
			<title>Main Processor</title>
            <section>
                <title>Definition</title>
                <p>
                    In the same way that an old-fashioned program has a main function, Presentation
                    Server has the concept of main processor. Within a web application, the main
                    processor is the processor that is run each time a Servlet, Servlet filter or
                    Portlet receives a client request. Within a command-line application, the main
                    processor is simply the processor that runs when the application is run.
                </p>
                <p>
                    In the simplest web application deployment scenario, as shown in the example
                    above, only one Orbeon Forms Servlet needs to be configured. In more
                    complex scenarios, it is possible to deploy multiple Orbeon Forms
                    Servlets, Servlet filters, and Portlets, as well as one Orbeon Forms
                    Servlet context listener, within the same Web or Portlet Application. The
                    following figure illustrates this:
                </p>
                <img print-format="pdf" src="../apps/doc/images/integration-portlets-deployment.png" width="522" height="234"/>
                <p>
                    Additional non-Orbeon Forms components can obviously be deployed within
                    the same Web or Portlet Application.
                </p>
            </section>
            <section>
                <title>Orbeon Forms Servlet, Orbeon Forms Servlet Filter, and Orbeon Forms Portlet</title>
                <p>
                    These components can each have their own main processor. The main processor for
                    such components is looked up in in the initialization parameters of the component. For
                    example, in the case of a Servlet:
                </p>
                <xml-source>
                    <servlet>
                        <servlet-name>orbeon-main-servlet</servlet-name>
                        <servlet-class>org.orbeon.oxf.servlet.OrbeonServlet</servlet-class>
                        <comment> Set main processor </comment>
                        <init-param>
                            <param-name>oxf.main-processor.name</param-name>
                            <param-value>{http://www.orbeon.com/oxf/processors}page-flow</param-value>
                        </init-param>
                        <init-param>
                            <param-name>oxf.main-processor.input.controller</param-name>
                            <param-value>oxf:/page-flow.xml</param-value>
                        </init-param>
                        <comment> ... </comment>
                    </servlet>
                </xml-source>
            </section>
        </section>
        <a name="error-processor"/>
        <section>
			<title>Error Processor</title>
            <section>
                <title>Definition</title>
                <p>
                    In case an error is encountered during the execution or the main processor associated with a
                    servlet, Orbeon Forms tries to execute an error processor. The error processor is typically a
                    pipeline that produces a page showing the exception that was encountered. For more information,
                    please refer to the <a href="reference-error-pipeline">Error Page</a> documentation.
                </p>
            </section>
            <a name="error-configuration"/>
            <section>
                <title>Configuring the Error Processor</title>
                <p>
                    You can configure an error processor in the same way the main processor is configured. The preferred
                    way of configuring the error processor is using the component's initialization parameters in <code>web.xml</code>. For example, in the case
                    of a Servlet:
                </p>
                <xml-source>
                    <servlet>
                        <servlet-name>orbeon-main-servlet</servlet-name>
                        <servlet-class>org.orbeon.oxf.servlet.OrbeonServlet</servlet-class>
                        <comment> ... </comment>
                        <comment> Set error processor </comment>
                        <init-param>
                            <param-name>oxf.error-processor.name</param-name>
                            <param-value>{http://www.orbeon.com/oxf/processors}pipeline</param-value>
                        </init-param>
                        <init-param>
                            <param-name>oxf.error-processor.input.config</param-name>
                            <param-value>oxf:/config/error.xpl</param-value>
                        </init-param>
                        <comment> Set supported methods </comment>
                        <comment> ... </comment>
                    </servlet>
                </xml-source>
            </section>
        </section>
	</body>
</document>
