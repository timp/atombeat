<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Other Serializers</title>
    </header>
    <body>
        <section>
            <title>Scope</title>
            <p>
                Serializers are processors with no XML output. A serializer, just like any processor, can access files,
                connect to databases, and take actions depending on its inputs. See also the <a
                href="processors-serializers-http">HTTP serializer</a>.
            </p>
        </section>
        <a name="url-serializer"/>
        <section>
            <title>URL Serializer</title>
            <p>
                The URL serializer mirrors the functionality of the <a href="processors-generators-url">URL
                generator</a>. Instead of reading from of URL, it writes its <code>data</code> input as XML into a
                URL.
            </p>
            <note>
                <p>
                    The <code>oxf:</code>, <code>file:</code> and <code>http:</code> protocols allow writing.
                </p>
                <p>
                    When using the <code>oxf:</code> protocol, the <a
                    href="reference-resource-managers#filesystem">Filesystem</a> and <a
                    href="reference-resource-managers#webapp">WebApp</a> resource managers support write operations.
                </p>
            </note>
            <p>
                The URL serializer takes a <code>config</code> input with a single <code>url</code> element containing
                the URL to write to. The <code>data</code> input is serialized according the rules of the XML
                serializer.
            </p>
            <xml-source>
                <p:processor name="oxf:url-serializer" xmlns:p="http://www.orbeon.com/oxf/pipeline">
                    <p:input name="config">
                        <config>
                            <url>oxf:/path/current.xml</url>
                        </config>
                    </p:input>
                    <p:input name="data" href="#xml-data"/>
                </p:processor>
            </xml-source>
        </section>
        <a name="file-serializer"/>
        <section>
            <title>File Serializer</title>
            <p>
                The File serializer supports decoding <a href="reference-formats">binary or text data</a> encapsulated
                in XML documents and writing it to a file on disk. The file serializer can write to a file you choose or
                to a temporary file. When writting to a temporary file, you need to read the <i>data</i> output to
                get the URL of the temporary file that was produced and which will consist of an element
                <i>url</i> containing URL of the temporary file, such as:
                <code>&lt;url>file:/tmp/gaga.tmp&lt;/url></code>.
            </p>
            <p>
                The configuration consists of the following elements:
            </p>
            <table>
                <tr>
                    <th colspan="2">Element Name</th>
                    <th>Type</th>
                    <th>Purpose</th>
                    <th>Default Value</th>
                </tr>
                <tr>
                    <td rowspan="4">If data written to a file you specify</td>
                    <td>file</td>
                    <td>Absolute or relative path to a file</td>
                    <td>Specifies the file to write to.</td>
                    <td><i>none</i></td>
                </tr>
                <tr>
                    <td>directory</td>
                    <td>Optional absolute path to a directory</td>
                    <td>Specifies the path relative to which the <code>file</code> element is resolved.</td>
                    <td><i>none</i></td>
                </tr>
                <tr>
                    <td>append</td>
                    <td>boolean</td>
                    <td>
                        If the file already exists: appends content to the file if <code>true</code>, or replaces the
                        file if <code>false</code>.
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>make-directories</td>
                    <td>boolean</td>
                    <td>
                        If the file is located in a directory that doesn't exist: creates the necessary directories if
                        <code>true</code>, or raises an error if <code>false</code>.
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td rowspan="2">If data written to a temporary file</td>
                    <td>scope</td>
                    <td>Can be <code>request</code>, <code>session</code>, or <code>application</code></td>
                    <td>
                        <ul>
                            <li>If set to <code>request</code>, then the temporary file is removed at the end of the HTTP request.</li>
                            <li>If set to <code>session</code>, then the temporary file is removed when the session of the current user expires.</li>
                            <li>If set to <code>application</code>, then the temporary file is removed when the servlet is stopped (typically when the application server is stopped).</li>
                        </ul>
                    </td>
                    <td><i>none</i></td>
                </tr>
                <tr>
                    <td>proxy-result</td>
                    <td>boolean</td>
                    <td>
                        <p>
                            Whether the resulting URL must be proxied. If <code>false</code>, the URL is a temporary
                            server-side URL. If <code>true</code>, the URL is an absolute path which can be used from
                            the web browser to retrieve the temporary file. The path does not contain the servlet
                            context.
                        </p>
                        <p>
                            This can only be <code>true</code> if the <code>&lt;scope></code> element is <code>session</code>.
                        </p>
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td colspan="2">content-type</td>
                    <td>content type, without any attributes</td>
                    <td>
                        Indicates the content type to use.
                    </td>
                    <td><code>application/octet-stream</code> for binary mode, <code>text/plain</code> for text mode</td>
                </tr>
                <tr>
                    <td colspan="2">force-content-type</td>
                    <td>boolean</td>
                    <td>
                        Indicates whether the content type provided has precedence. This requires a
                        <code>content-type</code> element.
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td colspan="2">ignore-document-content-type</td>
                    <td>boolean</td>
                    <td>
                        Indicates whether the content type provided by the input document should be ignored.
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td colspan="2">encoding</td>
                    <td>valid encoding name</td>
                    <td>
                        Indicates the text encoding to use.
                    </td>
                    <td>utf-8</td>
                </tr>
                <tr>
                    <td colspan="2">force-encoding</td>
                    <td>boolean</td>
                    <td>
                        Indicates whether the encoding provided has precedence. This requires an <code>encoding</code>
                        element.
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td colspan="2">ignore-document-encoding</td>
                    <td>boolean</td>
                    <td>
                        Indicates whether the encoding provided by the input document should be ignored.
                    </td>
                    <td>false</td>
                </tr>
                <tr>
                    <td colspan="2">cache-control/use-local-cache</td>
                    <td>boolean</td>
                    <td>
                        Whether the resulting stream must be locally cached. For documents or binaries that are large
                        or known to change at every request, it is recommended to set this to false.
                    </td>
                    <td>true</td>
                </tr>
            </table>
            <p>
                Here is how you serialize a document produced by a pipeline to a file on disk:
            </p>
            <xml-source>
                <comment> Convert a document to serialized XML </comment>
                <p:processor name="oxf:xml-converter">
                    <p:input name="config">
                        <config>
                            <encoding>utf-8</encoding>
                        </config>
                    </p:input>
                    <p:input name="data" href="#my-document"/>
                    <p:output name="data" id="converted"/>
                </p:processor>
                <comment> Write the document to a file </comment>
                <p:processor name="oxf:file-serializer">
                    <p:input name="config">
                        <config>
                            <directory>build/doc/reference</directory>
                            <file>single-file-doc.html</file>
                            <make-directories>true</make-directories>
                            <append>false</append>
                        </config>
                    </p:input>
                    <p:input name="data" href="#converted"/>
                </p:processor>
            </xml-source>
            <p>
                Note the use of the <a href="processors-converters#xml-converter">XML converter</a> processor, which
                serializes the XML document produced by the pipeline to a textual representation of XML.
            </p>
            <p>
                Here is how you can copy a file specified with a URL from one location to the other, by using the URL
                generator and the File serializer:
            </p>
            <xml-source>
                <comment> Read original file </comment>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>file:/my-image.jpg</url>
                        </config>
                    </p:input>
                    <p:output name="data" id="image-data"/>
                </p:processor>
                <comment> Write to another file </comment>
                <p:processor name="oxf:file-serializer">
                    <p:input name="config">
                        <config>
                            <file>/my-copied-image.jpg</file>
                        </config>
                    </p:input>
                    <p:input name="data" href="#image-data"/>
                </p:processor>
            </xml-source>
            <p>
                In the following example, data is written to a temporary file which will be deleted when the session of the
                current user expires. The URL of the temporary file is returned by the File serializer through its
                <i>data</i> output.
            </p>
            <xml-source>
                <p:processor name="oxf:file-serializer">
                    <p:input name="config">
                        <config>
                            <scope>session</scope>
                        </config>
                    </p:input>
                    <p:input name="data" href="#data-to-write"/>
                    <p:output name="data" id="url-written"/>
                </p:processor>
            </xml-source>
        </section>
        <a name="scope-serializer"/>
        <section>
            <title>Scope Serializer</title>
            <p>
                The Scope serializer can store documents into the application, session and request
                scopes. It works together with the <a
                href="processors-generators#scope-generator">Scope generator</a>.
            </p>
            <p>
                The Scope serializer has a <code>config</code> input in the following format:
            </p>
            <xml-source>
                <config>
                    <key>cart</key>
                    <scope>application|session|request</scope>
                    <session-scope>application|portlet</session-scope>
                </config>
            </xml-source>
            <table>
                <tr>
                    <th>key</th>
                    <td>
                        The <code>&lt;key></code> element contains a string used to identify
                        the document. The same key must be used to store and retrieve a
                        document.
                    </td>
                </tr>
                <tr>
                    <th>scope</th>
                    <td>
                        <p>
                            The <code>&lt;scope></code> element specifies in what scope the
                            document is to be stored. The available scopes are:
                        </p>
                        <ul>
                            <li>
                                <b>application</b> - The application scope starts when the Web
                                application is deployed. It ends when the Web application is
                                undeployed. The application scope provides an efficient storage for
                                data that does not need to be persisted and that is common for all
                                users. It is typically used to cache information (e.g. configuration
                                data for the application read from a database).
                            </li>
                            <li>
                                <b>session</b> - The session scope is attached to a given user of
                                the Web application. It is typically used to store information that
                                does not need to be persisted and is specific to a given user. It is
                                typically used to cache the user's profile.
                            </li>
                            <li>
                                <b>request</b> - The request scope starts when an HTTP request is sent to the server. It
                                ends when the corresponding HTTP response is sent back to the client. The request scope
                                can be used to integrate a Orbeon Forms application with legacy J2EE servlets.
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <th>session-scope</th>
                    <td>
                        <p>
                            The <code>&lt;session-scope></code> element specifies in what session
                            scope the document is to be stored. This element is only allowed when
                            the &lt;scope> element is set to <code>session</code>. The available
                            session scopes are:
                        </p>
                        <ul>
                            <li>
                                <b>application</b> - access the entire application session. This is
                                always a valid value.
                            </li>
                            <li>
                                <b>portlet</b> - access the local portlet session. This is only
                                valid if the processor is run within a portlet.
                            </li>
                        </ul>
                        <p>
                            If the element is missing, a default value is used:
                            <code>application</code> when the processor runs within a servlet, and
                            <code>portlet</code> when the processor runs within a portlet.
                        </p>
                    </td>
                </tr>
            </table>
            <p>
                In addition to the <code>config</code> input, the Scope serializer has a
                <code>data</code> input receiving the document to store.
            </p>
            <note>
                <p>
                    The Session serializer, previously used, is now deprecated. Use the Scope
                    serializer with session scope instead.
                </p>
            </note>
        </section>
        <a name="null-serializer"/>
        <section>
            <title>Null Serializer</title>
            <p>
                The Null serializer acts as a black hole. The <code>data</code> input is read and
                ignored. This processor is useful when a pipeline or a branch of a
                <code>p:choose</code> element doesn't have to return any document.
            </p>
            <xml-source>
                <p:processor name="oxf:null-serializer">
                    <p:input name="data" href="#document"/>
                </p:processor>
            </xml-source>
        </section>
        <a name="flushing"/>
        <section>
            <title>Flushing the Output Stream</title>
            <p>
                All serializers (XML, HTML, text, and FOP) will flush their output stream when they
                encounter the following processing instruction: <code>&lt;?oxf-serializer
                flush?&gt;</code> <p/> This instruction allows the browser to display a Web page
                incrementally. Incremental display is typically useful when sending large tables or
                when the first part of a Web page could be displayed, while the rest of the page
                cannot until a time consuming action is performed.
            </p>
        </section>
        <a name="legacy-serializers"/>
        <section>
            <title>Legacy HTTP Serializers</title>
            <note>
                <p>
                    Use of these serializers should be replaced by <a
                    href="processors-converters">converters</a> connected to the <a
                    href="processors-serializers-http">HTTP serializer</a>.
                </p>
            </note>
            <p>
                These serializers share a common functionality: writing their data input to an HTTP
                response. Typically, this means sending data back to a client web browser. This can
                be done in a Servlet environment or a Portlet environment. All share the same
                configuration, but differ in how they convert their input data. The following
                describes the common configuration, then the specifics for each serializer.
            </p>
            <note>
                <p>
                    When using the command-line mode, instead of sending the output through HTTP,
                    the HTTP serializers send their output to the standard output. In such a case,
                    the parameters that do not affect the content of the data, such as
                    content-type, status-code, etc. are ignored.
                </p>
            </note>
            <p>
                All serializers send the cache control HTTP headers, including
                <code>Last-Modified</code>, <code>Expires</code> and <code>Cache-Control</code>.
                The content type and content length headers are also supported.
            </p>
            <a name="http-configuration"/>
            <section>
                <title>Configuration</title>
                <p>
                    The configuration consists of the following optional elements.
                </p>
                <table ca="|l|p{0.3\textwidth}|p{0.2\textwidth}|">
                    <tr>
                        <th>Element</th>
                        <th>Purpose</th>
                        <th>Default</th>
                    </tr>
                    <tr>
                        <td>content-type</td>
                        <td>content type sent to the client</td>
                        <td>Specific to each serializer</td>
                    </tr>
                    <tr>
                        <td>encoding</td>
                        <td>The default text encoding</td>
                        <td>utf-8</td>
                    </tr>
                    <tr>
                        <td>status-code</td>
                        <td>HTTP status code sent to the client</td>
                        <td>SC_OK, or 100</td>
                    </tr>
                    <tr>
                        <td>error-code</td>
                        <td>HTTP error code sent to the client</td>
                        <td>none</td>
                    </tr>
                    <tr>
                        <td>empty-content</td>
                        <td>Forces the serializer to return an empty content, without reading its data input</td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>version</td>
                        <td>HTML or XML version number</td>
                        <td>4.01 for HTML (ignored for XML, which always output 1.0)</td>
                    </tr>
                    <tr>
                        <td>public-doctype</td>
                        <td>The public doctype</td>
                        <td>&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; for HTML, none otherwise</td>
                    </tr>
                    <tr>
                        <td>system-doctype</td>
                        <td>The system doctype</td>
                        <td>&quot;http://www.w3.org/TR/html4/loose.dtd&quot; for HTML, none otherwise</td>
                    </tr>
                    <tr>
                        <td>omit-xml-declaration</td>
                        <td>Specifies whether an XML declaration must be omitted</td>
                        <td>false for XML and HTML (i.e. a declaration is output by default), ignored otherwise</td>
                    </tr>
                    <tr>
                        <td>standalone</td>
                        <td>
                            If true, specifies <code>standalone="yes"</code> in the document
                            declaration. If false, specifies <code>standalone="no"</code> in the
                            document declaration.
                        </td>
                        <td>not specified for XML, ignored otherwise</td>
                    </tr>
                    <tr>
                        <td>indent</td>
                        <td>Specifies if the output is indented</td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>indent-amount</td>
                        <td>Specifies the number of indentation space</td>
                        <td>1</td>
                    </tr>
                    <tr>
                        <td>cache-control/use-local-cache</td>
                        <td>
                            Whether the resulting stream must be locally cached. For documents
                            or binaries that are large or known to change at every request, it
                            is recommended to set this to false.
                        </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>header</td>
                        <td>
                            Adds a custom HTTP header to the response. The nested elements
                            <code>name</code> and <code>value</code> contain the name and value
                            of the header, respectively. You can add multiple headers.
                        </td>
                        <td>none</td>
                    </tr>
                </table>
                <xml-source>
                    <config>
                        <content-type>text/html</content-type>
                        <status-code>100</status-code>
                        <empty-content>false</empty-content>
                        <error-code>0</error-code>
                        <version>4.01</version>
                        <public-doctype>-//W3C//DTD HTML 4.01//EN</public-doctype>
                        <system-doctype>http://www.w3.org/TR/html4/strict.dtd</system-doctype>
                        <omit-xml-declaration>false</omit-xml-declaration>
                        <standalone>true</standalone>
                        <encoding>utf-8</encoding>
                        <indent-amount>4</indent-amount>
                        <cache-control>
                            <use-local-cache>true</use-local-cache>
                        </cache-control>
                        <header>
                            <name>Content-Disposition</name>
                            <value>attachment; filename=image.jpeg;</value>
                        </header>
                    </config>
                </xml-source>
            </section>
            <a name="xml-serializer"/>
            <section>
                <title>XML Serializer</title>
                <p>
                    This serializer writes XML text. The output is indented with no spaces and
                    encoded using the UTF-8 character set. The default content type is
                    <code>application/xml</code>.
                </p>
                <xml-source>
                    <p:processor name="oxf:xml-serializer">
                        <p:input name="config">
                            <config>
                                <content-type>text/vnd.wap.wml</content-type>
                            </config>
                        </p:input>
                        <p:input name="data" href="#wml"/>
                    </p:processor>
                </xml-source>
            </section>
            <a name="html-serializer"/>
            <section>
                <title>HTML Serializer</title>
                <p>
                    The HTML serializer's output conforms to the XSLT <code>html</code> semantic. The
                    <code>doctype</code> is set to <link
                    href="http://www.w3.org/TR/1998/REC-html40-19980424/sgml/loosedtd.html">HTML 4.0
                    Transitional</link> and the content is indented with no space and encoded using the UTF-8 character
                    set. The default content type is <code>text/html</code>. The following is a simple HTML serializer
                    example:
                </p>
                <xml-source>
                    <p:processor name="oxf:html-serializer">
                        <p:input name="config">
                            <config/>
                        </p:input>
                        <p:input name="data" href="#html"/>
                    </p:processor>
                </xml-source>
                <note>
                    <p>
                        The <link href="http://www.w3.org/TR/2000/REC-xml-20001006">XML 1.0
                        Specification</link> prohibits a DOCTYPE definition with a Public ID and
                        no System ID.
                    </p>
                </note>
            </section>
            <a name="text-serializer"/>
            <section>
                <title>Text Serializer</title>
                <p>
                    The Text serializer's output conforms to the XSLT <code>text</code> semantic. The output is encoded
                    using the UTF-8 character set. This serializer is typically useful for pipelines generating Comma
                    Separated Value (CSV) files. The default content type is <code>text/plain</code>.
                </p>
                <xml-source>
                    <p:processor name="oxf:text-serializer">
                        <p:input name="config">
                            <config/>
                        </p:input>
                        <p:input name="data" href="#text"/>
                    </p:processor>
                </xml-source>
            </section>
        </section>
    </body>
</document>
