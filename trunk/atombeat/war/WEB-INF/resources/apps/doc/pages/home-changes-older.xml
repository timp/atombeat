<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms">

    <header>
        <title>Changes - Version 2.2 and Earlier</title>
    </header>
    <body>
        <section>
            <title>New in Version 2.2</title>
            <section>
                <title>Struts Message Access</title>
                <p>
                    The <a
                    href="model2x-struts#messages"><code>struts:message()</code></a>
                    function has a new parameters order. The last argument,
                    <code>bundle</code>, moved to the second
                    position to be more user-friendly. Only the first argument
                    is mandatory.
                    <dl>
                        <li><b>Former Syntax: </b><code>struts:message('key', 'arg0', 'arg1', 'arg2', 'arg3', 'bundle')</code></li>
                        <li><b>New Syntax: </b><code>struts:message('key', 'bundle', 'arg0', 'arg1', 'arg2', 'arg3', 'arg4')</code></li>
                    </dl>
                </p>
                <p>
                    Furthermore, the Struts functions are now supported in Saxon
                    6, Saxon 7 and XSLTC in addition to Xalan.
                </p>
            </section>
            <section>
                <title>Tamino Support</title>
                <p>
                    OXF now supports accessing Software AG's Tamino XML
                    database. Five new processors have been added to query,
                    insert, delete and update XML documents in Tamino. See <a
                    href="processors-xmldb">XML Databases</a> section for more
                    details.
                </p>
            </section>
            <section>
                <title>Web Application Controller</title>
                <ul>
                    <li><p>
                        <b>XSLT 2.0</b> ? The Web application controller now
                        picks a different engine to execute XSLT stylesheets
                        depending on the version of the stylesheet. For XSLT 1.0
                        stylesheets, it uses <code>oxf/processor/xslt-1.0</code>
                        (by default Xalan) and for XSLT 2.0 stylesheets it uses
                        <code>oxf/processor/xslt-2.0</code> (by default Saxon
                        7). The defaults can be changed in the
                        <code>processors.xml</code> file. Note that the <link
                        href="http://www.w3.org/TR/xslt20/#simplified-stylesheet">XSLT
                        2.0 simplified stylesheets modules</link> are also
                        supported.
                    </p></li>
                    <li><p>
                        <b>Setting resources MIME type</b> ? With the new
                        optional <code>mime-type</code> attribute on the
                        <code>files</code> element, you can set the MIME type
                        sent to the browser. For instance, with <code>&lt;files
                        path-info="*.java" mime-type="text/plain"/&gt;</code>
                        the Java files will be served with the plain text MIME
                        type, instead of the default <code>text/x-java</code>
                        MIME type.
                    </p></li>
                </ul>
            </section>
            <section>
                <title>HTTP Serializers</title>
                <p>
                    The <a
                        href="processors-serializers-http">HTTP
                        Serializers</a> can add custom headers to the HTTP response.
                </p>
            </section>
            <section>
                <title>LDAP Processor</title>
                <p>
                    The <a href="processors-ldap">LDAP processor</a> now supports the SSL protocol.
                </p>
            </section>
            <section>
                <title>Logging System Initialization</title>
                <p>
                    You can now skip the <a href="reference-properties#log4j">Log4J
                    initialization</a> sequence if necessary by omitting the
                    <code>oxf.servlet.log4j</code> property.
                </p>
            </section>
            <section>
                <title>New OXF Examples</title>
                <ul>
                    <li>
                        The <link href="../examples/javaprocessor">Java
                        processor example</link> shows how to create a custom
                        processor in Java and use it in a pipeline with the
                        <link href="processors-java">Java processor</link>.
                    </li>
                    <li>
                        <link href="../examples/rss-form">Create Your Own RSS
                        Feeds</link> retrieves a Web page with the resource
                        generator, selects part of the document with an XPath
                        expression, and creates an RSS feed from the extracted
                        data.
                    </li>
                    <li>
                        The <link href="../examples/spellchecker">Google Spell
                        Checker</link> spell-checks a paragraph of text entered
                        in a form by searching it on Google. The queries are
                        sent to Google with the <link
                        href="processors-generators-url">URL
                        generator</link>.
                    </li>
                    <li>
                        The <link href="../examples/tamino">Tamino XML
                        Server example</link> provides a sandbox to experiment with the
                        5 new processors provided in this version to access Software AG's
                        Tamino XML database.
                    </li>
                    <li>
                        The <link href="../examples/report">Report in HTML, PDF,
                        and Excel</link> example illustrates how to generate different
                        formats (here an HTML page, a PDF document, and an
                        Excel spreadsheet) from the same XML data.
                    </li>
                </ul>
            </section>
            <section>
                <title>Resource Server</title>
                <p>
                    The format of the <code>mime-types</code> input has changed: the
                    mapping from a file to a MIME type used to be based only on
                    the file extension; it is now based on a pattern, which
                    allows for more flexibility. Note that using
                    <code>&lt;files&gt;</code> elements in the Web application
                    controller configuration is in general preferred over
                    directly calling the resource server processor.
                </p>
            </section>
            <section>
                <title>XUpdate</title>
                <ul>
                    <li>
                        When the <code>select</code> expression on a
                        <code>&lt;xu:append&gt;</code> returns a node set, the
                        append operation is performed on each node of the node
                        set.
                    </li>
                    <li>
                        XUpdate error messages now point to the file, line
                        number and column number involved in the error.
                    </li>
                    <li>
                        Relatives URLs in the <code>doc()</code> and
                        <code>document()</code> functions are now supported.
                        When using a relative URL, it is interpreted as relative
                        to the XUpdate program location.
                    </li>
                    <li>
                        The <code>position()</code> function now correctly
                        returns the context position when used in a
                        <code>&lt;xu:for-each&gt;</code>.
                    </li>
                </ul>
            </section>
            <section>
                <title>URL Generator</title>
                <p>
                    You can now <link href="processors-generators-url#http-headers">specify the
                    HTTP headers</link> sent to the server when retrieving a document with the URL
                    Generator.
                </p>
            </section>
        </section>
        <section>
            <title>New in Version 2.1</title>
            <section>
                <title>Support for Oracle 9i Application Server</title>
                <p>
                    OXF 2.1 supports Oracle 9i Application Server, version
                    9.0.3.0.0. Read the <link
                    href="intro-install#oc4j">installation instructions</link>.
                </p>
            </section>
            <section>
                <title>Preliminary JSR-168 Support</title>
                <p>
                    OXF 2.1 introduces the OXF Portlet, a Java portlet following
                    the Java Portlet Specification Version 1.0 (Proposed Final
                    Draft) of August 26, 2003, also known as JSR-168. OXF hides
                    the complexity of the Portlet API to allow most OXF
                    applications to work unmodified within portlet containers
                    and to follow the best practices allowed by the Web
                    Application Controller.
                </p>
                <p>
                    In addition, OXF 2.1 includes alpha versions of the OXF
                    Portlet Container and the OXF Portal.
                </p>
                <p>
                    For more information, please visit <a
                    href="integration-portlets">JSR-168 Portlets</a>.
                </p>
            </section>
            <section>
                <title>Support for Iterations in Pipelines</title>
                <p>
                    Version 2.1 introduces a new construct to perform iterations
                    in XPL. Refer to the <link
                    href="reference-xpl-pipelines#for-each">Pipeline processor
                    documentation</link> for more information.
                </p>
            </section>
            <section>
                <title>Java Processor</title>
                <p>
                    The <link href="processors-java">Java processor</link> is
                    significantly enhanced in this version. In particular:
                </p>
                <ul>
                    <li><p>
                        In previous versions, it did not support custom
                        processors implemented over more than one Java file.
                        This limitation is waived in OXF 2.1: the Java
                        processor can now be used for complex custom
                        processors, or multiple processors that share the same
                        "utility classes".
                    </p></li>
                    <li><p>
                        The Java processor only compiles the Java files of
                        a custom processor when needed. If the compiled files are
                        up-to-date, no compilation will be performed, even if
                        the Java files were compiled in a "previous session" and
                        the application server has been restarted since then.
                    </p></li>
                    <li><p>
                        All the custom processors deployed in the same
                        <i>sourcepath</i> (see the <link
                        href="processors-java">Java processor</link>
                        documentation for more details) are loaded by the same
                        class loader. This is more efficient than always
                        creating one class loader per custom processor, as in
                        previous versions of OXF, and allows different
                        processors deployed in the same sourcepath to share
                        state stored in static class attributes.
                    </p></li>
                </ul>
            </section>
            <section>
                <title>Validation Processor</title>
                <p>
                    The <code>config</code> input has been renamed
                    <code>schema</code>. The new <code>config</code> input
                    selects the mode of the validator, either decorating, or
                    not. Read the <link href="processors-validation">Validation
                    Processor</link> documentation for more information.
                </p>
            </section>
            <section>
                <title>Renaming of Servlet, Servlet Filter and ServletContextListener</title>
                <p>
                    The names <code>ProcessorServlet</code> (Servlet),
                    <code>ProcessorFilter</code> (Servlet filter) and
                    <code>ProcessorServletContextListener</code> (Servlet
                    context listener) in <code>web.xml</code> are now deprecated
                    in favor of <code>OXFServlet</code>,
                    <code>OXFServletFilter</code> and
                    <code>OXFServletContextListener</code>. The old names
                    still work but will eventually be removed.
                </p>
            </section>
            <section>
                <title>Deprecation of Property Names</title>
                <p>
                    The following property names in <code>properties.xml</code>
                    have been deprecated:
                </p>
                <ul>
                    <li><code>oxf.servlet.processor</code></li>
                    <li><code>oxf.servlet.input.*</code></li>
                    <li><code>oxf.servlet.context-initialized.processor</code></li>
                    <li><code>oxf.servlet.context-initialized.input.*</code></li>
                    <li><code>oxf.servlet.context-destroyed.processor</code></li>
                    <li><code>oxf.servlet.context-destroyed.input.*</code></li>
                </ul>
                <p>
                    The new names are as follows:
                </p>
                <ul>
                    <li><code>oxf.main-processor.uri</code></li>
                    <li><code>oxf.main-processor.input.*</code></li>
                    <li><code>oxf.context-initialized-processor.uri</code></li>
                    <li><code>oxf.context-initialized-processor.input.*</code></li>
                    <li><code>oxf.context-destroyed-processor.uri</code></li>
                    <li><code>oxf.context-destroyed-processor.input.*</code></li>
                </ul>
                <p>
                    Visit <a href="integration-packaging">Packaging and
                    Deployment</a> for more information.
                </p>
            </section>
            <section>
                <title>Main Processor per Web Application Component</title>
                <p>
                    In previous versions, there was only a single main processor
                    (often the Web Application Controller processor) for all
                    the components (Servlets and Servlet filters) in
                    <code>web.xml</code>. It is now possible to specify a
                    different main processor and associated inputs for each
                    Servlet, Servlet filter and JSR-168 Portlet. Visit <a
                    href="integration-packaging">Packaging and Deployment</a>
                    for more information.
                </p>
            </section>
            <section>
                <title>Resource Server</title>
                <p>
                    The <link href="processors-other#resource-server">Resource
                    Server</link> MIME Media Type input name has been changed
                    from <code>mime-type</code> to <code>mime-types</code> for
                    consistancy reasons.
                </p>
            </section>
            <section>
                <title>Upgrade to the Logging System</title>
                <p>
                    As documented in the <link
                    href="reference-xpl-pipelines">Pipeline Processor</link>
                    section, you can see processors input and output XML
                    documents by adding a <code>debug</code> attribute on the
                    <code>&lt;p:input&gt;</code> and
                    <code>&lt;p:output&gt;</code> elements. When this attribute
                    is specified, OXF logs the corresponding XML document with
                    Log4j. You can configure Log4j to send this information to
                    Chainsaw, a graphical log viewer bundled with Log4j.
                </p>
                <p>
                    Version 1.2.8 of Log4j is now bundled with OXF and the
                    <code>log4j.xml</code> in the OXF showcase application shows
                    how Log4j can be configured to use Chainsaw. With
                    Chainsaw, you can easily filter log messages and see the
                    messages produced on a remote server.
                </p>
                <img src="../apps/doc/images/home-changes-chainsaw.png" width="479" height="475"/>
            </section>
            <section>
                <title>Debug Processor</title>
                <p>
                    When encountering a <code>debug</code> attribute in a
                    pipeline, the Pipeline processor inserts a Debug processor.
                    This processor is now <link
                    href="processors-other#debug">explicitly documented</link>
                    and it is now possible to replace it by your own custom
                    debug processor, that may implement a different behaviours
                    than the default debug processor.
                </p>
            </section>
            <section>
                <title>Explicit HTML Serializer DOCTYPE</title>
                <p>
                    The HTML Serializer used to output a default DOCTYPE. This
                    did not allow to generate HTML output with no DOCTYPE at
                    all, which is needed for example to generate HTML fragments
                    for JSR-168 portlets. If you are using the HTML Serializer
                    manually, you have to explicitly set the DOCTYPE in the
                    serializer configuration if you want to output one. The Web
                    Application Controller still outputs a default HTML
                    DOCTYPE. To override it, use your own serializer in your
                    epilogue.
                </p>
            </section>
            <section>
                <title>URL Rewriting</title>
                <p>
                    URL Rewriting in OXF has been overhauled with the addition
                    of portlet support, and <a
                    href="reference-url-rewriting">documented</a>.
                </p>
            </section>
            <section>
                <title>Chart Processor</title>
                <p>
                    Colors must now be always prefixed by the pound sign (#).
                    They used to be only prefixed for colors specified in the
                    <code>chart</code> input, but not the <code>data</code>
                    input.
                </p>
            </section>
            <section>
                <title>Struts Message Resources</title>
                <p>
                    The Struts Message Resources support is now compatible with
                    Struts 1.1 and allows the user to specify the resource
                    bundle key. See the <link
                    href="model2x-struts">Struts
                    Integration</link> page for details.
                </p>
            </section>
            <section>
                <title>XPointer in Pipelines</title>
                <ul>
                    <li>
                        In XPL, XPointer expressions that reference attributes are
                        not valid. In previous versions of OXF, they used to return
                        an empty node set. The expression <code>aggregate('root',
                        #doc#xpointer(/element/@attribute))</code> returned the
                        document: <code>&lt;root/&gt;</code>. Starting with OXF
                        2.1, using XPointer expressions pointing to an
                        attribute generates an error message.
                    </li>
                    <li>
                        The XPath expression <code>string(/)</code> used in an
                        XPointer expression always returned an empty string.
                        This was due to a bug in Jaxen, the underlying XPath
                        library. A version of Jaxen that has been patched to fix
                        this issue is bundled with OXF 2.1.
                    </li>
                </ul>
            </section>
            <section>
                <title>Web Application Controller</title>
                <ul>
                    <li>
                        The <code>xforms-output-prologue</code> attribute was broken
                        in 2.0.0, 2.0.1 and 2.0.2. It now works as described in the
                        <link href="reference-page-flow">Web Application
                        Controller section</link>.
                    </li>
                    <li>
                        Forwarding from a first page to a second page with
                        <code>&lt;result page="second-page"/&gt;</code> did not
                        work if the XForms instance of the second page contained
                        duplicate elements. This issue is fixed in OXF 2.1 and
                        it is now possible to do a forward to a page whose
                        instance contains duplicate elements, like:

                        <xml-source>
                            <instance>
                                <employee/>
                                <employee/>
                            </instance>
                        </xml-source>
                    </li>
                    <li>
                        <p>
                            In the previous version of OXF, the "data" input of the
                            model wasn't used. Starting with this version, if an
                            action is executed, the "data" output of the action is
                            connected to the "data" input of the model. Similarly,
                            if an action is executed but there is no model, then the
                            "data" output of the action is connected to the "data"
                            input of the view.
                        </p>
                        <p>
                            This change has a specific repercussion for pages
                            where all the conditions below are met:
                        </p>
                        <ul>
                            <li>XForms is used</li>
                            <li>An action is executed and has a "data" output</li>
                            <li>Either:
                                <ul>
                                    <li>The model is implemented in an XSL file</li>
                                    <li>Both conditions are met:
                                        <ul>
                                            <li>The view is implemented in an XSL file</li>
                                            <li>There is no model or the model has no data output</li>
                                        </ul>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                        <p>
                            In this specific case, in previous versions of OXF
                            the XSL file was applied to the XForms instance.
                            Starting with this new version of OXF, the XSL file
                            is applied to the "data" output of the action.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>XUpdate Processor</title>
                <ul>
                    <li>
                        This version introduces <code>&lt;xu:while&gt;</code>, a
                        new construct to loop construct to perform a set
                        operation while a condition is met. See the <link
                        href="processors-xupdate">XUpdate processor
                        section</link> for more details.
                    </li>
                    <li>
                        XPath expressions in XUpdate programs can now use OXF
                        URLs in the <code>document()</code> function, for
                        instance:
                        <code>document('oxf:/dir/somefile.xml')</code>.
                    </li>
                    <li>
                        Namespace prefixes can now be used in XPath expressions.
                        As with XSLT, when a namespace prefix is used in an
                        XPath expression, the namespace must be declared in the
                        XUpdate program on the element where it is used, or one
                        of it ancestors.
                    </li>
                </ul>
            </section>
            <section>
                <title>Exception Page</title>
                <p>
                    The exception page now shows an easier to read, structured
                    stack trace when possible (Java 1.4 or greater). If the
                    feature is not available from the underlying VM, the page
                    reverts to the old behavior.
                </p>
            </section>
            <section>
                <title>Documentation</title>
                <p>
                    The documentation has been reorganized so as to be easier
                    to tackle. In addition, the following topics have been
                    added:
                </p>
                <ul>
                    <li><b>Using the Java Security Manager</b> ? The Java security manager can be
                    used to prevent OXF applications to perform unauthorized operations. The <link
                    href="intro-install#security">Installing OPS</link> section now
                    documents how to run OXF under a Security Manager.</li>

                    <li><b>Chart Processor</b> ? Documentation for the Chart processor is now
                    provided in the <link href="processors-charts-spreadsheets#chart">Charts and
                    Spreadsheets</link> section.</li>

                    <li><b>URL Serializer</b> ? Documentation for the URL Serializer is now
                    provided in the <link
                    href="processors-serializers#url-serializer">Serializers</link> section.</li>

                    <li><b>Debug Processor</b> ? Documentation for the Debug Processor is now
                    provided in the <link href="processors-other#debug">Other Processors</link>
                    section.</li>

                    <li><b>URL Rewriting</b> ? Documentation for the <a
                    href="reference-url-rewriting">URL rewriting mechanisms in Presentation
                    Server</a>, including portlet support.</li>
                </ul>
            </section>
            <section>
                <title>Limited Java 1.3 support</title>
                <p>
                    The following features are only supported with a JVM 1.4 or higher.
                    <ul>
                        <li>XSLT 2.0 and XPath 2.0, provided by Saxon 7</li>
                        <li>OLAP Processor</li>
                        <li><link href="integration-portlets">OXF Portal</link></li>
                    </ul>
                </p>
            </section>
        </section>
        <section>
            <title>New in Version 2.0.2</title>

            <section>
                <title>New XForms Wizard Example</title>
                <p>
                    The <a href="http://www.orbeon.com/oxf/examples/">OXF Showcase Application</a>
                    includes a new example that demonstrates how to build <a
                    href="http://www.orbeon.com/oxf/examples/xforms-wizard-firstname">wizards</a> in
                    OXF using XForms.
                </p>
            </section>
            <section>
                <title>
                    Issue with &lt;view&gt; Element in Web Application Controller Configuration
                </title>
                <p>
                    The Web Application Controller did not understand configuration files (usually
                    in <code>page-flow.xml</code>) when no <code>&lt;view&gt;</code> element was
                    declared. When no <code>&lt;view&gt;</code> element was declared, a null
                    pointer exception was thrown. This issue is resolved in OXF 2.0.2.
                </p>
            </section>
            <section>
                <title>Issue with XUpdate Processor</title>
                <p>
                    <a href="home-faq#caching">Caching</a> in the XUpdate processor was too
                    aggressive, causing the debug statement on the <code>config</code> input, or
                    upstream in the pipeline on processors leading to this input not to be printed.
                    In some very rare cases, this could have caused an old version of the XUpdate
                    program to be used. This issue is fixed in OXF 2.0.2.
                </p>
            </section>
            <section>
                <title>Issue with Command Line Applications</title>
                <p>
                    Command line applications using OXF did not work because incorrect JAR files
                    were referenced from the <code>MANIFEST.MF</code> bundled in
                    <code>oxf.jar</code>. This is issue is fixed in OXF 2.0.2.
                </p>
            </section>
            <section>
                <title>NullPointerException in URL Generator</title>
                <p>
                    The URL generator could throw a NullPointerException when using configurations
                    containing only an <code>&lt;url></code> element and no content-type. This issue
                    is fixed in OXF 2.0.2.
                </p>
            </section>
        </section>
        <section>
            <title>New in Version 2.0.1</title>

            <section>
                <title>Issue with WebLogic and Tomcat</title>
                <p>
                    In WebLogic 7, WebLogic 8.1 and Tomcat (with Sun's JDK 1.3), the JAR class
                    loader doesn't know how to determine the last modified date of a resource
                    contained in a JAR file. Under those circumstances, the OXF 2.0.0 cache
                    considers that those resources can not be cached. This problem is fixed with OXF
                    2.0.1. If you are running WebLogic or Tomcat (with JDK 1.3), you should upgrade
                    to OXF 2.0.1. This upgrade will enhance your application's performance.
                </p>
            </section>
            <section>
                <title>Issue with WAR files on Tomcat</title>
                <p>
                   When Web applications are deployed on Tomcat in the form of compressed WAR files,
                   and the application resources are stored in the WAR file, OXF 2.0.0 is not able
                   to determine the last modified date of the resources. Consequently, caching was
                   not performed on those resources. OXF 2.0.1 can determine the last modified date
                   of the resources even when they are packaged in a compressed WAR. In this
                   scenario, users will notice that their applications will run much faster with OXF
                   2.0.1.
                </p>
            </section>
            <section>
                <title>
                    JavaServer Faces (JSF) Examples on Tomcat 4.1.x and
                    WebLogic 7.0 and 8.1
                </title>
                <p>
                   The JSF examples now work with Tomcat 4.1.x and WebLogic 7.0 8.1. The version of
                   JSTL that shipped with the JSF Reference Implementation Early Access 4 was not
                   compatible with JSP 1.2. OXF 2.0.1 ships with a version of JSTL compatible with
                   JSP 1.2, supported by Tomcat 4.1.x and WebLogic. In addition, some fixes for
                   WebLogic have been introduced. Please read the updated <a
                   href="intro-install">installation instructions</a> for more details.
                </p>
            </section>
            <section>
                <title>Packages Names</title>
                <p>
                    Some of the classes exposed by OXF to allow applications to implement custom
                    processors have been moved to new packages. The <link
                    href="reference-processor-api">Processor API</link> section documents the new
                    package names. You should also recompile all your custom processors when
                    switching to OXF 2.0 (or later) to make sure that you are using valid package
                    and class names.
                </p>
            </section>
            <section>
                <title>Deployment descriptor</title>
                <p>
                    The Web application deployment descriptor, <code>web.xml</code> changed
                    significantly with the 2.0 release. The OXF initialization parameters are now
                    declared in <code>context-param</code> elements instead of
                    <code>servlet/init-param</code> elements. The OXF engine can be used from a
                    variety of sources and the initialization parameters must be accessible from a
                    servlet, filter or context listeners.
                </p>
            </section>
            <section>
                <title>Custom Processors with No Output</title>
                <p>
                    The <link href="reference-processor-api">Processor API</link>
                    chapter now explains how to write processors with no output
                    in Java using the OXF processor API.
                </p>
            </section>
        </section>
        <section>
            <title>New in Version 2.0</title>

            <section>
                <title>New Web Application Controller</title>
                <p>
                    The Web Application Controller (WAC) is the heart of an OXF Web application.
                    It maps incoming user requests to individual pages and defines how each page is
                    built out of a model and a view, according to the model-view-controller (MVC)
                    architecture. It also defines which XForms model is used for a given page.
                </p>
                <p>
                    In addition to these existing features, the new WAC in OXF 2.0 allows you to
                    declare the entire site navigation logic (also known as page workflow). With a
                    central place where the navigation logic is defined, pages can be developed
                    completely independently from each other. To implement page navigation, the WAC
                    now supports actions and action results.
                </p>
                <p>
                    The new WAC helps you design your Web application with a complete
                    separation between:
                </p>
                <p>
                    <ul>
                        <li>
                            Site Logic: what pages are brought up and when, as well as how
                            navigation happens is orchestrated from page to page.
                        </li>
                        <li>
                            Page Logic (the Model in MVC): for example, how data entered by the
                            user is validated and then used to retrieve and update data in a
                            database.
                        </li>
                        <li>
                            Page Layout (the View in MVC): how information is laid out in a Web
                            page in order to be presented to the user.
                        </li>
                        <li>
                            Site Presentation: layout and look and feel common to all the pages in
                            your Web application or Web site, e.g.: site navigation menus, table
                            backgrounds, or number formatting.
                        </li>
                    </ul>
                </p>
                <p align="center">
                    <br/> <img print-format="pdf" src="../apps/doc/images/reference-controller-oxf-app.png"/>
                    <center><it><br/>Figure 1: Separation of concerns<br/> in an OXF
                    application</it></center>
                </p>
                <p>Other improvements to the Web Application Controller include:</p>
                <ul>
                    <p><li><b>Efficiency</b> - When the configuration changes, the new Web
                    Application Controller is now much faster to recreate the internal structures
                    needed to handle the new configuration. It also uses less memory, allowing for a
                    larger cache size with the same heap size.</li></p>

                    <p><li><b>Serializer choice and configuration</b> - By default, the output of
                    the view is sent to the browser with the HTML serializer. It is still the
                    default, but now the epilogue can serialize the output of the view. In this case
                    the epilogue will has no <code>data</code> output. This gives you the full
                    latitude to choose what serializer to use and what its configuration
                    is.</li></p>
                </ul>
                <p>
                    This version of the WAC is backward compatible with the OXF 1.x WAC, meaning
                    that your current configuration file will work out of the box with OXF 2.0.
                </p>
            </section>

            <section>
                <title>XForms Improvements</title>
                <section>
                    <title>Custom Attributes</title>

                    <p>In version 1.5.2, attributes of XForms controls in the
                        <code>http://orbeon.org/oxf/xml/xforms</code> namespace were copied to the
                        generated HTML elements. This version introduces new attributes in the
                        <code>http://orbeon.org/oxf/xml/xforms</code> namespace (in particular the
                        <code>appearance</code> attribute on submit controls). As of version 2.0,
                        attributes are copied if they are in a namespace and this namespace is not
                        <code>http://orbeon.org/oxf/xml/xforms</code>. The namespace is left
                        unchanged when the attribute is copied. Please refer to the XForms section for
                        more information.
                    </p>
                </section>

                <section>
                    <title>Submit Controls</title>

                    <p>New XForms submit controls have been introduced to support
                        submit images (corresponding to the HTML <code>&lt;input
                        type="image"></code>) and HTML links that behave like submit buttons. The
                        submit controls can be configured to set values in the instance. See the
                        <link href="../examples/xforms-submit">XForms Submit Controls</link>
                        example for more information.
                    </p>
                </section>

                <section>
                    <title>Examples</title>

                    <ul>
                        <li>
                            The XForms controls are now shown on 3 pages:
                            <link
                                href="../examples/xforms-text">text controls</link>,
                            <link
                                href="../examples/xforms-selection">selection
                                controls</link> and
                            <link
                                href="../examples/xforms-submit">submit controls</link>
                        </li>
                        <li>
                            A
                            <link href="../examples/xforms-default">new
                                example</link> demonstrates the use of default values in
                            the XForms model.
                        </li>
                        <li>
                            A
                            <link href="../examples/xforms-report">new
                                example</link> illustrates how to create a "report
                            table", where you can choose how the data is sorted and
                            what columns are displayed.
                        </li>
                    </ul>
                </section>

                <section>
                    <title>Namespaces Support</title>

                    <p>Custom namespaces can now be used in the XForms instance.
                        For example, you can declare an XForms model like:</p>

                    <xml-source>
                        <xforms:model xmlns:xforms="http://www.w3.org/2002/xforms">
                            <xforms:instance>
                                <a:form xmlns:a="http://www.example.com/a">
                                    <b:element xmlns:b="http://www.example.com/b/"/>
                                </a:form>
                            </xforms:instance>
                        </xforms:model>
                    </xml-source>

                    <p>If you use namespaces in the XForms instance, you need to use
                        prefixes when referring to an instance element or attribute in the
                        <code>ref</code> attribute of XForms controls. For example, you can refer to
                        the instance above in a text field with:
                    </p>

                    <xml-source>
                        <xforms:group ref="x:form"
                                         xmlns:x="http://www.example.com/a"
                                         xmlns:xforms="http://www.w3.org/2002/xforms">
                            <xforms:input ref="y:element"
                                          xmlns:y="http://www.example.com/b/"/>
                        </xforms:group>
                    </xml-source>

                    <p>Note that the prefixes used here (<code>x</code> and
                        <code>y</code>) are different from the one used on the instance
                        (<code>a</code> and <code>b</code>). This is perfectly legal as long as the
                        prefix used in the <code>ref</code> attribute maps to the same URI as the
                        one used in the XForms instance.
                    </p>

                    <p>You can declare your XForms instance using a default
                        namespace. e.g.:</p>

                    <xml-source>
                        <xforms:model xmlns:xforms="http://www.w3.org/2002/xforms">
                            <xforms:instance>
                                <form xmlns="http://www.example.com/">
                                    <element/>
                                </form>
                            </xforms:instance>
                        </xforms:model>
                    </xml-source>

                    <p>To refer to an element or an attribute of an instance with a
                        default namespace you need to declare a prefix and use it in the
                        <code>ref</code> attribute. For example:
                    </p>

                    <xml-source>
                        <xforms:group ref="x:form"
                                         xmlns:x="http://www.example.com/"
                                         xmlns:xforms="http://www.w3.org/2002/xforms">
                            <xforms:input ref="x:element"/>
                        </xforms:group>
                    </xml-source>

                </section>
                <section>
                    <title>xforms:label</title>
                    <p>
                        In the latest W3C XForms recommendation (12 November 2002) the
                        <code>xforms:label</code> element was renamed in <code>xforms:label</code>.
                        OXF now supports xforms:label as a synonym for <code>xforms:label</code>
                        (still supported for backward compatibility).
                    </p>
                </section>
                <section>
                    <title>Form Name</title>
                    <p>
                        You now set the name of the generated HTML form by setting the
                        <code>id</code> attribute on the <code>&lt;xforms:model&gt;</code> element.
                        If this attribute is not set, the form name is "xforms".
                    </p>
                </section>
            </section>
            <section>
                <title>Struts Portlets Support</title>
                <p>
                    The Servlet Include Generator is used to call a URI within the Servlet container
                    that runs OXF. The URI must return well-formed XML. This processor can
                    effectively implement portlets in conjunction with the Struts/OXF integration.
                </p>
            </section>
            <section>
                <title>SQL Processor Improvements</title>
                <section>
                    <title>CLOB Support</title>
                    <p>
                        The SQL Processor Supports reading from and writing to CLOBs. The code is
                        JDBC compliant whenever possible. In addition, it also implements specific
                        support for Oracle under Tomcat 4.1.
                    </p>
                    <p>
                        When doing insertions of strings and XML fragments, it is possible to
                        specify a SQL type, for example:
                    </p>
                    <xml-source show-namespaces="false">
<sql:param type="oxf:xmlFragment"
              sql-type="clob"
              select="/document"
              xmlns:sql="http://orbeon.org/oxf/xml/sql"/>
                    </xml-source>
                    <p>
                       This causes the SQL Processor to use the CLOB APIs to set the value. The
                       following statement causes the same value to be written as a SQL VARCHAR
                       type instead:
                    </p>
                    <xml-source show-namespaces="false">
<sql:param type="oxf:xmlFragment" sql-type="varchar"
              select="/document"
              xmlns:sql="http://orbeon.org/oxf/xml/sql"/>
                    </xml-source>
                </section>
                <section>
                    <title>Iterations in &lt;sql:param&gt;</title>
                    <p>
                        &lt;sql:param&gt; supports a new <i>separator</i> attribute. When that
                        attribute is present, the result of the XPath expression in the
                        <i>select</i> attribute is interpreted as a node-set. One query parameter is
                        set for each element in the node set, separated by the characters in the
                        separator. For example:
                    </p>
                    <xml-source show-namespaces="false">
<sql:query xmlns:sql="http://orbeon.org/oxf/xml/sql">
select * from ps_book
 where book_id in (<sql:param
                      type="xs:int"
                      select="/query/book-id" separator=","/>)
</sql:query>
                    </xml-source>
                </section>
                <section>
                    <title>Transaction Support</title>
                    <p>
                        OXF executes each HTTP request in a single SQL transaction.
                    </p>
                </section>
            </section>
            <section>
                <title>JavaServer Faces Integration</title>
                <p>
                    Supports the Early Access 4 implementation of JSF. This allows using OXF to
                    implement a JSF application's look and feel. For more information, visit <a
                    href="model2x-jsf">Using OXF with JavaServer Faces (JSF)</a>.
                </p>
            </section>
            <section>
                <title>Other Improvements</title>
                <section>
                    <title>Transformers</title>
                    <p>
                        Transformers are now unified and pluggable. OXF supports
                        XSLT and JAXP (TrAX) transformers, and ships with the
                        following implementations:
                        <ul>
                            <li>Xalan 2.5.1 Interpreter</li>
                            <li>Xalan 2.5.1 Compiler (XSLTC)</li>
                            <li>Saxon 6.5.2</li>
                            <li>Saxon 7.5.1 (supporting a subset of XSLT 2.0)</li>
                            <li>Joost 20030502 (streaming transformer)</li>
                        </ul>
                    </p>
                </section>
                <section>
                    <title>URL Generator</title>
                    <p>
                        Supports loading and parsing of any HTML document through
                        the HTMLTidy library.
                    </p>
                </section>
                <section>
                    <title>Configurable Serializers</title>
                    <p>
                        As of versin 2.0, it is possible to configure the HTML, XML and Text
                        serializers (DOCTYPE, encoding, formatting, etc.). By default, the HTML
                        Serializer outputs an HTML 4.01 transitional doctype.
                    </p>
                </section>
                <section>
                    <title>Image Server</title>
                    <p>
                        In addition to scaling and cropping images, the Image Server now supports a
                        set of basic drawing operations, including drawing rectangles and straight
                        lines, that can be performed over existing images
                    </p>
                </section>
                <section>
                    <title>Request Generator</title>
                    <p>
                        When specifying "/request/body" in the list of included parameters, the
                        Request Generator parses the body of request. This allows to implement Web
                        Services.
                    </p>
                </section>
                <section>
                    <title>File Serializer</title>
                    <p>
                        The File Serializer now allows better control on the
                        output file format.
                    </p>
                </section>
                <section>
                    <title>Validation Processor</title>
                    <p>
                        The Validation Processor allows schemas (W3C or
                        RelaxNG) to import sub-schemas via oxf: URL.
                    </p>
                </section>
                <section>
                    <title>Resource Server</title>
                    <p>
                        The Resource Server allows customization of the content type based on file
                        extension. In addition, cache control HTTP headers are set so that resources
                        can be cached by clients with Tomcat 4.1 even when security constraints are
                        defined in web.xml.
                    </p>
                </section>
                <section>
                    <title>URL Resource Manager</title>
                    <p>
                        This new extension to the Resource Manager allows to load resources from a
                        remote Web server or version control system.
                    </p>
                </section>
            </section>
            <section>
                <title>New Processors</title>
                <p>
                    <ul>
                        <li><b>LDAP Processor</b> - Supports querying an LDAP server through JNDI
                        and filtering out the resulting attributes.</li>

                        <li><b>XQuery Processor</b> - Supports transforming XML documents based on
                        the XQuery specification.</li>

                        <li><b>XUpdate Processor</b> - Supports updating XML documents based on the
                        XUpdate specification.</li>

                        <li><b>Chart Processor</b> - Support for charts based on the JFreeChart
                        engine. This processor can either stream images to a client web browser, or
                        save them on disk to allow for caching if the charts are to be reused.</li>

                        <li><b>PDF Serializer</b> - This processor easily converts XML documents to
                        PDF file, utilizing XSL-FO and the Apache FOP library.</li>

                        <li><b>Yahoo Instant Messaging Processor</b> - Support for sending and
                        receiving Instant Messages though the Yahoo service.</li>

                        <li><b>Scheduler Processor</b> - OXF now supports scheduling tasks
                        implemented as XML pipelines. A task can be started, stopped, and executed
                        at a specific time or at a regular interval.</li>

                        <li><b>Initialization and Destruction Listeners</b> - Support for Servlet
                        context initialization and destruction listeners, implemented as XML
                        pipelines.</li>

                        <li><b>Email Processor</b> - Support for sending email messages.</li>
                        <li><b>Excel Import and Export</b> - Support for Excel Import and Export.</li>
                    </ul>
                </p>
            </section>
        </section>
        <section>
            <title>New in Version 1.5.2</title>
            <section>
                <title>Improved Struts Integration</title>

                <p>The Struts integration has been revamped to include support
                    for Castor 0.9.4.3, Castor mapping files, serialization of
                    any bean, access to ActionErrors and application resources. See
                    the
                    <link href="model2x-struts">documentation</link> for
                    details.
                </p>
                <note>
                    <p>
                        Castor 0.9.4.3 has been modified to use the built-in OXF version of
                        Xerces. If you update the provided Castor JAR file, you will need to
                        include a version of Xerces.
                    </p>
                </note>
            </section>

            <section>
                <title>New Processors</title>

                <p>This version includes new processors:</p>

                <ul>
                    <li>The
                        <link href="processors-image">Image Server</link>
                    </li>
                    <li>The
                        <link href="processors-other#resource-server">Resource Server</link>
                    </li>
                    <li>The
                        <link href="processors-generators#bean-generator">Bean Generator</link>
                    </li>
                    <li>The
                        <link href="processors-struts#StrutsActionErrorsGenerator">Struts ActionError Generator</link>
                    </li>
                </ul>

            </section>

            <section>
                <title>Xalan Upgrade</title>

                <p>This version ships with Apache Xalan 2.5_D1 as default XSLT transformer.</p>
            </section>

            <section>
                <title>XPL Language</title>

                <p>XPL identifiers, used to identify processor inputs or
                    outputs, support "." and "_". They conform to the following
                    regular expression:
                    <code>[_A-Za-z][_A-Za-z\\-0-9.]*</code>.
                </p>

            </section>

            <section>
                <title>SQL Processor Improvements</title>

                <p>The SQL Processor supports more column datatypes, including
                    reading XML fragments, and introduces a type notation which is compatible with
                    XML Schema datatypes. <code>sql:get-columns</code> supports the exclusion of
                    selected columns. A new <code>sql:value-of</code> element is implemented. See
                    the <link href="processors-sql">documentation</link> for details.
                </p>
            </section>

            <section>
                <title>XForms Support</title>

                <p>It is possible to specify non-standard attributes to any
                    XForms element using the <code>xxforms</code> prefix. A special element,
                    <code>xxforms:hidden</code>, implements the equivalent of HTML hidden fields.
                    See the <link
                        href="processors-xforms">documentation</link> for details.
                </p>
            </section>

        </section>
        <section>
            <title>New in Version 1.5.1</title>

            <section>
                <title>Multithreading Issues</title>

                <p>In rare situations, a race condition could cause NullPointerExceptions
                    or other error messages from the Pipeline processor when multiple HTTP requests
                    were handled concurrently. This condition is fixed.</p>
            </section>

            <section>
                <title>Performance and Memory Improvements</title>

                <p>This version features major performance improvements. In
                    particular the Pipeline processor is more efficient. The memory consumption has
                    also been reduced, enabling the cache to store more objects with the same VM
                    heap size.</p>
            </section>

            <section>
                <title>Sample Application: Error Handling</title>

                <p>When a problem occurred in the sample application, a grey page
                    was shown with a copyright notice. The page now displays more information about
                    the error (including a description of the problem, the location where it
                    occurred if available and the Java stack trace), as it was the case in version
                    1.0.</p>
            </section>

            <section>
                <title>Sample Application: Log Format</title>

                <p>The log entries include a date. This is an example of the format used:</p>
                <p>
                    <code>2003-03-06 10:48:59,939 INFO OXF OXFServlet -
                        /examples/ - Received request</code>
                </p>
                <p>The format can be customized in
                    <code>config/log4j.xml</code>.
                </p>
            </section>

            <section>
                <title>More Data Types Supported by SQL Processor</title>

                <p>The SQL processor correctly supports
                    <code>sql:get-double</code> and <code>sql:get-decimal</code>. In order to be
                    compatible with XPath 1.0, which does not support the scientific (exponential)
                    format, floating-point numbers are output without the scientific format.
                </p>
            </section>

            <section>
                <title>Struts Example</title>

                <p>The Struts example included in version 1.5 didn't work as
                    expected. This version fixes the issue.</p>
            </section>

            <section>
                <title>Web Application Controller</title>

                <p>Setting multiple
                    <code>&lt;param&gt;</code> elements
                    in a
                    <code>&lt;page&gt;</code> element works correctly.
                </p>
            </section>

            <section>
                <title>Pipeline Processor: Error Reporting</title>

                <p>Error reporting in the Pipeline processor is improved:</p>

                <ul>
                    <li>The Pipeline processor used to generate a NullPointerException
                        in certain cases when an input could not be found; it now correctly reports
                        the missing input.</li>

                    <li>When a processor cannot be loaded, for example because its
                        implementation class cannot be found, an error message is issued with the
                        name of the processor and the class name.</li>
                </ul>
            </section>

            <section>
                <title>XSLT Transformer Caching</title>

                <p>The XSLT transformer is fully aware of calls to the XPath
                    <code>document()</code> function in XSLT stylesheets. Assume that we have a
                    transformation including:
                </p>

                <ul>
                    <li>A stylesheet document (
                        <code>config</code> input)
                    </li>
                    <li>An input document (
                        <code>data</code> input)
                    </li>
                    <li>An included document (using the XPath
                        <code>document()</code> function in the stylesheet)
                    </li>
                </ul>

                <p>If none of those documents have changed, then the output of
                    the transformation can be cached. But the transformation is always reapplied if
                    the included document has changed.</p>
            </section>

            <section>
                <title>Java Processor and Tomcat</title>

                <p>There was an issue with the Java processor and Tomcat, due to
                    the handling of the temporary directory. This issue is fixed.</p>
            </section>

            <section>
                <title>XForms Support</title>

                <ul>
                    <li>
                        <p>The attribute
                            <code>encoding</code> of the <code>submission</code> element is
                            supported in the XForms model. When present, an attribute
                            <code>enctype</code> will be added to the generated <code>form</code>
                            element. The <code>enctype</code> attribute value is set to the value of
                            the <code>encoding</code> attribute in the XForms model.
                        </p>
                    </li>

                    <li>
                        <p>Attributes in the XForms model are now supported.
                            Attributes can be referenced with an XPath expression just
                            like elements.</p>
                    </li>
                </ul>
            </section>

            <section>
                <title>JavaServer Faces Integration</title>

                <p>The preliminary JavaServer Faces integration now works with
                    the Sun Reference implementation version 1.0 Early Access 3 (EA3) of JSF.
                    Version 1.0 Early Access 2 (EA2) is no longer supported.</p>
            </section>

            <section>
                <title>Changes to Redirect Processor</title>

                <p>The Redirect Processor now supports multiple
                    <code>value</code> elements in a
                    <code>parameter</code> element,
                    so as to be consistent with the Request Generator.
                </p>
            </section>

        </section>

        <section>
            <title>New in Version 1.5</title>

            <section>
                <title>Application Server Support</title>

                <p>OXF version 1.5 supports the following application servers:</p>

                <ul>
                    <li>Jakarta Tomcat 4.0 and 4.1</li>
                    <li>BEA WebLogic 6.1 and 7</li>
                    <li>IBM WebSphere 4 and 5</li>
                    <li>Sun SunOne 7</li>
                </ul>
            </section>

            <section>
                <title>Performance and Memory Consumption</title>

                <p>Performance improved considerably in this release.
                    OXF also requires much less memory to run efficiently. These are both
                    consequences of the new cache system (more on this <link
                    href="#cache">below</link>) as well as many other improvements in the product.
                </p>
            </section>

            <section>
                <title>Web Application Controller Enhancements</title>

                <p>
                    In the Web Application Controller configuration, the <code>xforms</code>,
                    <code>model</code> and <code>view</code> attributes had to point to an XPL
                    document. In this version, <link href="reference-page-flow#page-element">XPL,
                    XSLT and regular XML documents</link> are supported. In addition, a new
                    mechanism allows <link href="reference-page-flow#passing-parameters">passing
                    URL fragments to the model through the instance</link> using matchers.
                </p>

                <p>
                    The OXF documentation example is now using a matcher in the Web Application
                    Controller configuration file to extract information from the URL. The
                    documentation for this example explains how this new feature can be applied.
                </p>

                <p>
                    The <code>view</code> element in the Web Application Controller configuration
                    has a <link href="reference-page-flow#view-element">new optional
                    attribute</link>: <code>xforms-output-prologue</code>. This attribute points to
                    an XSL (or XPL) file which is applied to the view before the XForms elements are
                    transformed into HTML-like attributes.
                </p>
            </section>

            <section>
                <title>Session Handling</title>

                <p>There are two new processors used to store/retrieve XML documents
                    into/from the session: the
                    <link
                        href="processors-serializers#SessionSerializer">Session
                        Serializer</link> and
                    <link
                        href="processors-generators#SessionGenerator">Session
                        Generator</link>.
                </p>
            </section>

            <section>
                <title>Content-Length HTTP Header</title>

                <p>The HTML serializer is able to send a Content-Length header. The
                    content length is only sent when the complete result is cached.</p>
            </section>

            <a name="cache"/>
            <section>
                <title>Cache Size</title>

                <p>A new cache is provided with this version. The previous cache
                    used soft references, which was problematic for two reasons:</p>

                <ul>
                    <li>Interoperability: not all the
                        Java VMs correctly implement soft references.</li>

                    <li>Performance: depending on the value of the
                        <code>-XX:SoftRefLRUPolicyMSPerMB</code> VM parameter (Sun VMs), the soft
                        references were either:
                    </li>

                    <ul>
                        <li>collected too early, causing many cache fault</li>
                        <li>collected too late, drastically reducing the amount
                            of free memory at any time which in turn triggered
                            numerous full garbage collections</li>
                    </ul>
                </ul>

                <p>The new cache is more efficient and solves the two issues
                    above. You can tune the cache by
                    <link
                        href="reference-properties#cache-size">setting its
                        size</link>.
                </p>
            </section>

            <section>
                <title>XSLTC Dependency</title>

                <p>XSLTC is an XSLT transformer that compiles stylesheets into Java
                    bytecode. XSLTC is part of the Xalan distribution but is not
                    as stable as the standard Xalan XSLT transformer. We do not support
                    the use of XSLTC in this release. The
                    <code>oxf.xslt.transformer</code>
                    property must be set to
                    <code>interpreter</code>.
                </p>
            </section>

            <section>
                <title>Request Generator Configuration</title>

                <p>The Request Generator is now fully configurable. You can
                    define the the
                    <link
                        href="processors-generators-request">subset of the
                        request</link> you are interested in.
                </p>
            </section>

            <section>
                <title>HTML, XML and Text Serializers</title>

                <p>The HTML, XML and text serializers are now configurable. In
                    particular, you can set the
                    <link
                        href="processors-serializers#http-configuration">MIME type,
                        status code and error code</link> sent to the client.
                </p>

                <p>Also, all the HTTP serializers (XML, HTML, text and FOP)
                    will flush their output stream when they encounter the following
                    processing instructions:
                    <code>&lt;?oxf-serializer
                        flush?&gt;</code>. This enables the client's browser to
                    incrementally display a Web page. Incremental display is
                    typically useful when sending large tables or when the first
                    part of Web page can be sent right away, while the rest of the
                    page cannot be sent until a time consuming action is
                    performed.
                </p>
            </section>

            <section>
                <title>New Request Security Processor</title>
                <p>
                    A new <link href="reference-authentication#request-security-processor">Request
                    Security processor</link> is available, allowing access to security-related
                    information, such as the logged-in user, or the transport mechanism.
                </p>
            </section>

            <section>
                <title>New Namespace for Web Application Controller Configurations</title>

                <p>Elements in the
                    <link href="reference-page-flow">Web App
                        Controller</link> configuration file must use the namespace
                    <code>http://www.orbeon.com/oxf/controller</code>. With the previous
                    version, there was no namespace declaration.
                </p>
            </section>

            <section>
                <title>XForms Namespace Change</title>

                <p>The XForms namespace changed from
                    <code>http://www.w3.org/2002/xforms</code> to
                    <code>http://www.w3.org/2002/xforms</code> to be consistent with
                    the latest XForms specification. The namespace
                    <code>http://www.w3.org/2002/xforms</code> is considered
                    deprecated. It is still supported in this version for backward
                    compatibility, but might not be supported in future versions of
                    OXF.
                </p>
            </section>

            <section>
                <title>XSLT Stylesheet Caching</title>

                <p>Caching of XSLT stylesheet takes into account the included as well as the imported
                    stylesheets (with
                    <code>&lt;xsl:include&gt;</code> or
                    <code>&lt;xsl:import&gt;</code>).
                </p>

                <p>Let's consider a transformation using a stylesheet,
                    <code>style.xsl</code> that includes another stylesheet,
                    <code>utils.xsl</code>.
                </p>

                <p>Creating the internal
                    representation of an XSLT stylesheet, known as a transformer object,
                    is a time consuming process. The OXF cache stores transformers in
                    order to enhance performance. When stylesheet sources change, it is
                    necessary to update the transformer. With OXF 1.0, the transformer
                    was updated only if
                    <code>style.xsl</code> changed, but it was not updated when only
                    <code>utils.xsl</code> changed. This new version updates the
                    transformer if
                    <code>style.xsl</code> or
                    <code>utils.xsl</code>
                    changes, exactly as you would expect it to work.
                </p>
            </section>

            <section>
                <title>JavaServer Faces Integration</title>

                <p>Preliminary JavaServer Faces integration is implemented. For more
                    information, please read the
                    examples documentation.
                </p>
            </section>

            <section>
                <title>New Examples</title>

                <p>New examples are provided in the standard OXF application:</p>

                <ul>
                    <li>
                        Shopping Cart
                        demonstrates the new session handling processors
                    </li>

                    <li>
                        Authentication>
                        illustrates how access to a page can be restricted
                    </li>

                    <li>
                        Address Book
                        shows how to access a SQL database
                    </li>

                    <li>
                        JavaServer Faces>
                        shows how to integrate with JavaServer Faces
                    </li>

                    <li>
                        OXF Pet Store is an
                        implementation of Sun's Pet Store written 100% with OXF
                    </li>
                </ul>
            </section>

            <section>
                <title>JNDI and Processor Factories</title>

                <p>Version 1.0 used to register processor factories in the JNDI
                    tree. This was an issue with some application servers when
                    multiple OXF applications (e.g. WAR or EAR packages) where
                    deployed on the same application server instance. To solve this
                    problem, this new version uses an internal registry instead of
                    JNDI.</p>
            </section>

        </section>
    </body>
</document>
