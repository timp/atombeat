<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document>
    <header>
        <title>Orbeon Forms FAQ</title>
    </header>
    <body>
        <a name="general"/>
        <section>
            <title>General Orbeon Forms FAQ</title>
            <a name="what-is"/>
            <section added="2006-01-10" updated="2006-11-06">
                <title>What is Orbeon Forms?</title>
                <p>
                    Orbeon Forms is an open source forms solution that handles the complexity of forms typical of the
                    enterprise or government. It is delivered to standard web browsers (including Internet Explorer,
                    Firefox, Safari and Opera) thanks to XForms and Ajax technology, with no need for client-side
                    software or plugins. Orbeon Forms allows you to build fully interactive forms with features that
                    include as-you-type validation, optional and repeated sections, always up-to-date error summaries,
                    PDF output, full internationalization, and controls like auto-completion, tabs, dialogs, trees and
                    menus. Orbeon Forms already supports most of the XForms 1.1 specification.
                </p>
                <p>
                    Orbeon Forms is built around a user-friendly Ajax-based XForms engine, which brings W3C XForms to
                    standard browsers, and the <a href="reference-xpl-pipelines">XPL engine</a>, a mature,
                    high-performance XML pipeline engine for processing XML data.
                </p>
                <p>
                    On top of the XForms engine, Orbeon Forms includes Form Runner (a runtime environment for forms)
                    and Form Builder (a web-based form builder). For more information, visit:
                </p>
                <ul>
                    <li>
                        <p>
                            <a href="http://www.orbeon.com/forms/builder">Orbeon Form Builder</a> product page
                        </p>
                    </li>
                    <li>
                        <p>
                            <a href="#form-builder">Orbeon Form Builder FAQ</a>
                        </p>
                    </li>
                </ul>
                <p>
                    Unlike other web application platforms based on Java objects or scripting languages, Orbeon Forms is
                    based on XML documents and XForms. This leads to an architecture perfectly suited for the tasks of
                    capturing, processing, and presenting XML data (in particular form data), and does not require
                    writing any Java, JavaScript or other scripting code at all.
                </p>
            </section>
            <a name="is-xforms"/>
            <section added="2006-02-04">
                <title>Is Orbeon Forms an XForms Engine?</title>
                <p>
                    Orbeon Forms does contain an XForms engine (also known as an XForms processor), which we refer to
                    as the Orbeon Forms XForms engine. It also contains an XML pipeline engine running the XPL pipeline
                    language, an application controller (the Page Flow Controller or PFC), and built-in components to
                    perform XSLT transformations, database access, and more. Needless to say, Orbeon Forms ships with
                    examples and documentation.
                </p>
                <p>
                    You are free to use Orbeon Forms only for its XForms functionality, but you can also leverage more
                    of Orbeon Forms to build your forms-based application.
                </p>
            </section>
            <a name="costs"/>
            <section added="2007-12-05">
                <title>Is there any cost associated with using Orbeon Forms?</title>
                <p>
                    No, Orbeon Forms is truly open source and free or charge whether your use it to build open source
                    or commercial applications.
                </p>
                <p>
                    You are free to <i>extend</i> the platform, and you are free to <i>build applications</i> on top of
                    the platform as you please. Note however that if you make changes to the existing Orbeon Forms
                    code, you are bound by the terms of the LGPL license, which requires you to redistribute changes to
                    the open source community when you distribute your application.
                </p>
                <p>
                    Orbeon does offer commercial support for Orbeon Forms. See the information about our <a
                    href="#getting-support">support plans</a>. </p>
            </section>
            <a name="source-code"/>
        </section>
        <a name="support"/>
        <section>
            <title>Support FAQ</title>
            <a name="getting-support"/>
            <section>
                <title>How can I get support for Orbeon Forms?</title>
                <ul>
                    <li>
                        <p>
                            You can get support from the Orbeon Forms community on the ops-users mailing list. The
                            ops-users mailing list is the hub of the Orbeon Forms community, and this is the best place
                            to ask questions, share you experience, or post issues and requests for enhancements. Also
                            see:
                        </p>
                        <ul>
                            <li><p><a href="#mailing-list">How can I subscribe to the Orbeon Forms mailing list?</a></p></li>
                            <li><p><a href="#reporting-issues">How to report issue in the Orbeon Forms mailing list?</a></p></li>
                            <li><p><a href="#mailing-list-archives">Where are the Orbeon Forms mailing list have archives?</a></p></li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            Orbeon can provide professional support for your company. Orbeon has two types of plans: <a
                            href="http://www.orbeon.com/support-services/product">Product Support plans</a> are the most
                            appropriate when your application is in production, while <a
                            href="http://www.orbeon.com/support-services/proactive">Proactive Support plans</a> also
                            covers issues during development, feature enhancements, and training. For more information
                            contact Orbeon at <a href="mailto:info@orbeon.com">info@orbeon.com</a>.
                        </p>
                    </li>
                </ul>
            </section>
            <a name="mailing-list"/>
            <section>
                <title>How can I subscribe to the Orbeon Forms mailing list?</title>
                <ol>
                    <li>
                        <p>
                            To subscribe, send an email to: <a
                            href="mailto:ops-users-subscribe@ow2.org">ops-users-subscribe@ow2.org</a>. You
                            can leave the subject and body of your email empty.
                        </p>
                    </li>
                    <li>
                        <p>
                            You will receive a message asking you to confirm that you want to subscribe to the list.
                            Confirm by following the instructions in that message. If you don't receive this message in
                            an hour or so, you might want to check if it went to your spam folder.
                        </p>
                    </li>
                    <li>
                        <p>
                            You should then start receiving messages from the list in the next few hours. You might
                            receive 10 to 30 messages a day, so you might want to setup your mail client to
                            automatically move those messages in a particular folder, so they don't all show up in your
                            inbox.
                        </p>
                    </li>
                    <li>
                        <p>
                            To unsubscribe, send an email to: <a
                            href="mailto:ops-users-unsubscribe@ow2.org">ops-users-unsubscribe@ow2.org</a> from the email
                            address you used to subscribe. You can leave the subject and body of your email empty.
                        </p>
                    </li>
                </ol>
                <p>
                    If you are having any problem subscribing to the list, please contact at <a
                    href="mailto:info@orbeon.com">info@orbeon.com</a>.
                </p>
            </section>
            <a name="source-code"/>
            <section added="2007-01-06">
                <title>Where do I find the source code?</title>
                <p>
                    In the OW2 CVS repository. <a href="http://forge.objectweb.org/scm/?group_id=168">This
                    page</a> provides the instructions to retrieve it. You can also <a
                    href="http://cvs.forge.objectweb.org/cgi-bin/viewcvs.cgi/ops/">browse the repository</a> with your
                    web browser.
                </p>
                <p>
                    Use the <code>orbeon</code> CVS module for Orbeon Forms proper, and the <code>saxon</code> CVS
                    module for the Saxon source code (which sometimes contains fixes against the latest released
                    Saxon).
                </p>
            </section>
            <a name="source-code-version"/>
            <section added="2007-02-19">
                <title>Where do I find the source code for a particular release of Orbeon Forms?</title>
                <p>
                    It's easy: each Orbeon Forms release is tagged with a version number including a time stamp. Say
                    you downloaded the binary release <code>orbeon-3.6.0.200712061930.zip</code>. From there, you infer
                    the following CVS tag number: <code>TAG_OPS_3_6_0_200712061930</code>. You then get the source code
                    from CVS using:
                </p>
                <xml-source>
                    cvs -z3 -d:pserver:anonymous@cvs.forge.objectweb.org:/cvsroot/ops co -r TAG_OPS_3_6_0_200712061930 orbeon
                </xml-source>
            </section>
            <a name="issue-fixing"/>
            <section added="2007-06-22">
                <title>When are you going to fix/implement feature foobar?</title>
                <p>
                    Usually a feature gets implemented in Orbeon Forms when:
                </p>
                <ul>
                    <li>
                        <p>It is very easy to implement, so we just implement it along the way to make everybody happy.</p>
                    </li>
                    <li>
                        <p>We need it for a project we are currently working on.</p>
                    </li>
                    <li>
                        <p>We have put it on our roadmap and scheduled it because we think it is a crucial feature for Orbeon Forms.</p>
                    </li>
                    <li>
                        <p>Somebody sponsors it.</p>
                    </li>
                    <li>
                        <p>Somebody sends a patch for it.</p>
                    </li>
                </ul>
                <p>
                    We need help on Orbeon Forms by the way, and we definitely appreciate outside contributions. So
                    check out the <a href="#source-code">source code</a> and start hacking away. You can ask your
                    questions on the <a href="http://www.orbeon.com/forms/mailing-list">mailing-list</a>.
                </p>
            </section>
            <a name="reporting-issues"/>
            <section>
                <title>How do I report an issue in the Orbeon Forms mailing list?</title>
                <p>
                    The key to effectively reporting an issue is to post in the ops-users mailing list a message with:
                </p>
                <ul>
                    <li><p>A reproducible test case, attached to your message</p></li>
                    <li><p>How to run this test case</p></li>
                    <li><p>What is the behavior you observe when you run the test case</p></li>
                    <li><p>What is the behavior you expect</p></li>
                </ul>
                <p>
                    But why a reproducible test case? The alternative is to describe the issue in plain English with
                    maybe the help of code snippets. The problem with this approach is that it requires of people who
                    will be helping you on the mailing list to understand the context of your problem, which might be
                    trivial to you, but can be hard to grasp quickly for someone else.
                </p>
                <p>You can provide two types of test cases:</p>
                <ul>
                    <li>
                        <p>
                            <b>An XHTML+XForms file</b> that runs in the <a
                            href="/xforms-sandbox/">XForms sandbox</a> - This is by far the
                            preferred way of submitting a test case. Most problems with XForms can be shown in one
                            single XHTML+XForms file. If you need the XForms to call a service with an
                            <code>&lt;xforms:submission></code>, you can simulate this by placing an XML file that
                            contains the response from that service on a public web site, and changing the
                            <code>&lt;xforms:submission></code> to point to that file. If you don't have a server of
                            your own that you can use for this, a free hosting service like <a
                            href="http://geocities.yahoo.com/">GeoCities</a> will work.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>An application</b> - An Orbeon Forms application is stored under
                            <code>resources/apps</code>. Assuming you have your application under
                            <code>resources/apps/foo</code>, it can be accessed by going to
                            <code>http://localhost:8080/ops/foo/</code>. If you can't create a test case that runs in
                            the XForms sandbox, create a simple standalone application under directory foo, zip the
                            content of that directory, and attach it to your email in the mailing list as
                            <code>foo.zip</code>.
                        </p>
                    </li>
                </ul>
                <p>In both cases:</p>
                <ul>
                    <li>
                        <p>
                            Make your test case as simple as possible. Remember that people who will be helping you on
                            the list often don't have much time, and you are more likely to receive feedback that is
                            useful if your test case only contains the minimum amount of code required to reproduce the
                            issue.
                        </p>
                    </li>
                    <li>
                        <p>
                            Keep your post focused on a single issue. If there are more issues you would like to report,
                            post them in separate threads, or post the first one and wait to get that one resolved
                            before you post the next one in another thread.
                        </p>
                    </li>
                </ul>
            </section>
            <a name="mailing-list-archives"/>
            <section>
                <title>Where are the Orbeon Forms mailing list have archives?</title>
                <p>
                    At least in two places:
                </p>
                <ul>
                    <li>
                        <p>
                            At <a href="http://www.ow2.org/wws/arc/ops-users">OW2</a>.
                            This is the primary archive.
                        </p>
                    </li>
                    <li>
                        <p>
                            At <a href="http://www.nabble.com/ObjectWeb-OPS-f2535.html">Nabble</a>. This is an external
                            archive powered by excellent software.
                        </p>
                    </li>
                </ul>
            </section>
            <a name="support-orbeon-forms"/>
            <section>
                <title>How can I support Orbeon Forms?</title>
                <p>You can help by:</p>
                <ul>
                    <li>
                        <p>
                            Subscribing to the <a href="#mailing-list">ops-users mailing list</a>, and helping other
                            people in community.
                        </p>
                    </li>
                    <li>
                        <p>
                            Contributing to the open source effort. If you have a feature in mind and think it would
                            benefit Orbeon Forms, you can implement it and contribute it. The best place to get started
                            is to discuss your idea on the ops-users mailing list.
                        </p>
                    </li>
                    <li>
                        <p>
                            Get a Support Plan with Orbeon. If Orbeon Forms is what it is today, it is in great part
                            thanks to companies who have financially supported Orbeon, allowing Orbeon developers to be
                            paid to work on Orbeon Forms and make it a better product. For more information, see <a
                            href="http://www.orbeon.com/support-services/overview">Support and Service</a> or contact
                            Orbeon at <a href="mailto:info@orbeon.com">info@orbeon.com</a>.
                        </p>
                    </li>
                </ul>
                <p>Your support is greatly appreciated!</p>
            </section>
            <a name="issue-tracker"/>
            <section added="2007-06-06">
                <title>Is there a list of known issues?</title>
                <p>
                    Yes. You find it on the OW2 site:
                </p>
                <ul>
                    <li>
                        <p>
                            <a href="http://tinyurl.com/kycl3">Issues by highest priority</a> (9 is highest - we use levels 9, 7, 5, and 3)
                        </p>
                    </li>
                    <li>
                        <p>
                            <a href="http://tinyurl.com/3adybv">Recently open issues</a>
                        </p>
                    </li>
                    <li>
                        <p>
                            <a href="http://tinyurl.com/yr44jw">Recently closed issues</a>
                        </p>
                    </li>
                </ul>
                <p>
                    Note that we put bugs and requests for enhancement (RFEs) in the same tracker category, and just
                    prefix RFE descriptions with the string "RFE:".
                </p>
                <p>
                    In general, we recommend you do not add bugs or RFEs in the tracker yourself, as we may miss them,
                    and you may introduce duplicates. Please discuss bugs or issues on the Orbeon Forms <a
                    href="http://www.orbeon.com/forms/mailing-list">mailing-list</a> first.
                </p>
            </section>
            <a name="wiki"/>
            <section added="2008-01-30" updated="2008-08-03">
                <title>Is there a wiki?</title>
                <p>
                    Yes! In fact we have two:
                </p>
                <ul>
                    <li>
                        <p>
                            A legacy wiki <a href="https://wiki.objectweb.org/ops/Wiki.jsp?page=Main">on the OW2 site</a>.
                        </p>
                    </li>
                    <li>
                        <p>
                            New documents <a href="http://wiki.orbeon.com/forms/">on Google Sites</a>. We are migrating
                            documents from the OW2 site to Google Sites, as we prefer the WYSIWYG approach of Google
                            Sites.
                        </p>
                    </li>
                </ul>
                <p>
                    Feel free to add or make changes to the contents there. You can do so after creating a user
                    (anonymous changes are not allowed). But please be considerate. You may want to discuss changes on
                    the mailing-list first.
                </p>
            </section>
            <a name="development"/>
            <section added="2008-03-01">
                <title>What's going on with development?</title>
                <p>
                    Orbeon developers often talk about Orbeon Forms development in the <a
                    href="#mailing-list">mailing-list</a> and on the <a href="http://www.orbeon.com/blog/">XForms
                    Everywhere blog</a>.
                </p>
                <p>
                    There is also a mailing-list for CVS commits:
                </p>
                <ul>
                    <li>
                        <a href="http://www.ow2.org/wws/arc/ops-commits">Home of the ops-commits mailing-list</a>
                    </li>
                    <li>
                        <a href="http://mail-archive.ow2.org/ops-commits/index.html">ops-commits mailing-list archive</a>
                    </li>
                    <li>
                        <a href="http://mailbucket.org/ops-commits.xml">RSS feed of ops-commits</a> (at mailbucket)
                    </li>
                    <li>
                        <a href="http://mailbucket.org/simple/ops-commits">Last entries of ops-commits</a> (at mailbucket)
                    </li>
                </ul>
            </section>
        </section>
        <a name="form-builder"/>
        <section added="2008-05-30">
            <title>Orbeon Form Builder FAQ</title>
            <section added="2008-05-30">
                <title>What is Orbeon Form Builder?</title>
                <p>
                    Orbeon Form Builder is a visual form designer which allows you to build and deploy forms in minutes
                    right from your web browser. See the <a href="http://www.orbeon.com/forms/builder">Orbeon Form
                    Builder</a> product page for more details.
                </p>
            </section>
            <section added="2008-05-30">
                <title>What is Orbeon Form Runner?</title>
                <p>
                    Orbeon Form Runner is the Orbeon Forms runtime environment. Form Runner manages form types and form
                    data, handles search, validation, and takes care of the plumbing necessary to capture, save, import
                    and export form data. See the <a href="http://www.orbeon.com/forms/builder">Orbeon Form Builder</a>
                    product page for more details.
                </p>
            </section>
            <section added="2008-05-30">
                <title>What is the difference between Orbeon Forms, Form Runner and Form Builder?</title>
                <p>
                    Orbeon Forms is the name for the whole forms solution developped by Orbeon. Form Runner and Form
                    Builder are part of Orbeon Forms, and are built on top of the core Orbeon Forms components,
                    including the XForms engine and the pipeline engine.
                </p>
                <p>
                    You can use Orbeon Forms without using the Form Runner or Form Builder components.
                </p>
            </section>
            <section added="2008-05-30">
                <title>Where is the documentation?</title>
                <p>
                    As of August 2008, Form Builder and Form Runner are considered alpha code and there is no
                    documentation. The documentation will be added soon.
                </p>
            </section>
            <section added="2008-05-30" updated="2009-01-28">
                <title>I can't save my form, what's wrong?</title>
                <p>
                    Make sure you have entered a Form Title and that all your sections have titles.
                </p>
            </section>
            <section added="2008-06-05">
                <title>Can I import my existingt XForms documents into Form Builder?</title>
                <p>
                    Form Builder produces XHTML+XForms files as output, but it follows a number of convention when
                    creating forms. It is only able to read forms that follow those conventions, which means that in
                    general, you can't just import your existing forms into Form Builder.
                </p>
            </section>
        </section>    
        <a name="xforms"/>
        <section>
            <title>XForms FAQ</title>
            <a name="xforms"/>
            <section>
                <title>What is XForms?</title>
                <p>
                    W3C XForms is a standard, markup-based, declarative, XML- and HTML-friendly user interface
                    technology particularly adapted to building complex forms. XForms makes it easy to build dynamic
                    user interfaces able to talk to XML services.
                </p>
                <p>
                    XForms is a W3C Recommendation since October 2003, with a second edition of the 1.0 published in
                    March 2006 and a third edition published in October 2007. As of March 2009, the Forms Working Group
                    at W3C has published XForms 1.1 as a Candidate Recommendation. XForms 1.1 should therefore be an
                    actual recommendation in 2009. The Forms Working Group is already embarking on XForms 1.2 or XForms
                    2.0! Please visit <a href="http://www.w3.org/MarkUp/Forms/">The Forms Working Group</a> for more
                    information about XForms right from W3C.
                </p>
                <p>
                    XForms aims at replacing HTML forms, but it is not strictly tied to HTML. The main goal of XForms
                    is to make web forms design easier, allowing the developer to write less client-side scripting (or
                    none at all), and less server-side code thanks to a feature-rich declarative approach.
                </p>
                <p>
                    Benefits of XForms include:
                </p>
                <ul>
                    <li>Clear separation between data captured and presentation (separation of concerns)</li>
                    <li>Flexible, structured XML-based data model: define your data model as an XML document, then create forms accessing the data</li>
                    <li>Built-in facilities for validation and data integrity based on XML Schema and/or assertions</li>
                    <li>Declarative approach requiring less / no scripting at all, in particular thanks to declarative events and actions</li>
                    <li>Ease of internationalization</li>
                    <li>Support for a variety of devices</li>
                    <li>W3C standard</li>
                    <li>Not tied to a particular platform or language such as Java or .NET</li>
                </ul>
                <p>
                    See also the Orbeon Forms <a href="reference-xforms-guide#introduction">XForms Introduction</a>
                    section.
                </p>
            </section>
            <a name="xforms-compliance"/>
            <section>
                <title>How much of the XForms specification does Orbeon Forms support?</title>
                <p>
                    The Orbeon Forms implementation is based on the <a href="http://www.w3.org/TR/xforms/">W3C XForms
                    1.1 Candidate Recommendation</a>. The XForms NG engine in Orbeon Forms 3.7 is
                    close to supporting all of the XForms 1.1 specification. For more detailed information on what
                    features are supported in the latest version of Orbeon Forms, see the
                    <a href="http://wiki.orbeon.com/forms/doc/developer-guide/orbeon-forms-xforms-compliance-matrix">XForms Compliance</a>
                    section of the documentation.
                </p>
                <p>
                    Orbeon Forms also supports extensions such as new widgets (autocomplete, tree, menu, dialog,
                    etc.).
                </p>
            </section>
            <a name="xforms-browsers"/>
            <section added="2006-10-27">
                <title>I hear that XForms is not well supported in web browsers. This is a problem, right?</title>
                <p>
                    No, this is not a problem at all, because XForms runs great on the server, in the same way that
                    other web applications technologies like PHP, ASP, JavaServer Faces or Ruby run on the server.
                </p>
                <p>
                    You run XForms on the server by installing the Orbeon Forms XForms engine on your server. The XForms
                    engine translates your XForms pages to HTML, CSS and JavaScript that your browser understands.
                    Your web browser sees a regular Ajax application, but as a developer you write standard XForms
                    instead of JavaScript!
                </p>
                <p>
                    Running XForms on the server has even several benefits over running it in the client:
                </p>
                <ul>
                    <li>
                        <p>
                            Users don't have to upgrade their web browser or install plugins or extensions. You can use
                            and develop with XForms today and target over 90% of the users on the web.
                        </p>
                    </li>
                    <li>
                        <p>
                            The data used by your XForms application remains safely on the server. With client-side
                            implementations, on the other hand, you have to be very careful not to send confidential
                            information to the XForms engine, as that information may be seen by the user.
                        </p>
                    </li>
                    <li>
                        <p>
                            You can upgrade your XForms implementation at a single location on your server instead of
                            waiting for users to upgrade their browsers when bugs are fixed or new features are
                            implemented.
                        </p>
                    </li>
                </ul>
            </section>
            <a name="xforms-server-side"/>
            <section added="2006-01-10">
                <title>What is a server-side, Ajax-based XForms implementation?</title>
                <p>
                    Historically, the XForms specification assumed that XForms was implemented on the client-side,
                    natively within a web browser. But as discussed <a href="#xforms-browsers">here</a>, XForms-based
                    applications can use server-side Ajax-based implementations that share XForms processing between
                    server-side code and client-side code and rely on Ajax technology.
                </p>
                <p>
                    Orbeon Forms features such an Ajax-based implementation and implements the XForms specification
                    partly on the server (in Java), partly on the client (in JavaScript). Client and server communicate
                    through Ajax requests. The client is fairly "dumb" compared to the server, which implements most of
                    the XForms intelligence.
                </p>
                <p>
                    The Orbeon Forms XForms processor translates your forms described in terms of the XForms
                    specification into HTML, CSS and JavaScript code understood by your web browser. The following
                    diagram shows a high-level overview of the architecture of an Ajax-based XForms implementation:
                </p>
                <div class="image">
                    <img width="620" height="454" src="../apps/doc/images/xforms-hybrid.png"/>
                    <div class="legend">Ajax-Based XForms</div>
                </div>
                <p>
                    For more information, we refer you to these articles we presented at the XTech 2005 and XTech 2006
                    conferences:
                </p>
                <ul>
                    <li>
                        <p>
                            <a href="http://xtech06.usefulinc.com/schedule/detail/133">XForms: an alternative to
                            Ajax?</a> (XTech 2006)
                        </p>
                    </li>
                    <li>
                        <p>
                            <a href="http://www.orbeon.com/ops/xtech">Are Server-Side XForms Engines the Future of
                            XForms?</a> (XTech 2005) (see also the <a
                            href="http://www.idealliance.org/proceedings/xtech05/papers/03-08-03/">pre-conference
                            proceedings</a>, which contain an out of date version of the article)
                        </p>
                    </li>
                </ul>
            </section>
            <a name="xforms-classic-ng"/>
            <section added="2006-01-10">
                <title>What are the XForms Classic and XForms NG engines?</title>
                <p>
                    Up to version 2.8, Orbeon Forms featured a pure server-side XForms engine with limited XForms
                    functionality. With version 3.0, Orbeon Forms features a much enhanced XForms engine, with support
                    for almost the entire XForms 1.1 specification. The older XForms engine was informally dubbed
                    "XForms Classic", and the new XForms engine "XForms NG".
                </p>
                <p>
                    Support for the XForms Classic engine was entirely removed in Orbeon Forms 3.7, since XForms NG now
                    supports a "Noscript" mode allowing JavaScript-free support as well.
                </p>
            </section>
            <a name="xforms-classic-or-ng"/>
            <section added="2006-01-10">
                <title>How do I know which XForms engine I am using?</title>
                <p>
                    If you are using Orbeon Forms 2.8 or earlier, you are using XForms Classic. If you are using Orbeon
                    Forms 3.7 or later, you are using XForms NG.
                </p>
                <p>
                    If you are using Orbeon Forms 3.0 or later, then you may be using XForms Classic or XForms NG, but
                    there is an easy way to tell: if a <code>&lt;page></code> entry in your page flow features an
                    <code>xforms</code> attribute, then and only then that page is using XForms Classic. Otherwise, if
                    the page view contains at least one XForms model under its <code>xhtml:head</code> element, then it
                    is using XForms NG.
                </p>
            </section>
            <a name="xforms-classic-deprecation"/>
            <section added="2006-01-10">
                <title>Should I keep using the XForms Classic engine?</title>
                <p>
                    The XForms Classic engine is available only for backward compatibility. It is deprecated and may be
                    removed in the future. If you are starting an application from scratch with Orbeon Forms 3.6, we
                    strongly advise against using XForms Classic. If you are migrating to Orbeon Forms 3.6, we advise
                    starting migrating XForms NG. You can keep your existing pages working with XForms Classic, and
                    write new pages with XForms NG. Over time, you can migrate existing XForms Classic pages to XForms
                    NG, making for a smooth transition.
                </p>
                <p>
                    As of Orbeon Forms 3.6, only one feature of XForms Classic have not yet made it into XForms NG:
                    support for browsers with very limited JavaScript functionality (non-Ajax mode). In time, we hope to
                    bring these features to XForms NG as well, therefore completely deprecating XForms Classic.
                </p>
            </section>
            <a name="xforms-classic-migration"/>
            <section added="2006-09-18">
                <title>How do I migrate from XForms Classic to XForms NG?</title>
                <p>
                    Please visit <a href="reference-xforms-extensions#xforms-classic-migration">Migrating from XForms Classic
                    to XForms NG</a>.
                </p>
            </section>
            <a name="xforms-html"/>
            <section>
                <title>Do I need to use XForms to build forms?</title>
                <p>
                    It is not a requirement to use XForms with Orbeon Forms. It is possible to generate HTML form
                    elements and to examine request parameters manually. We recommend however using XForms whenever
                    possible, because it provides an elegant abstraction that greatly simplifies form handling, which is
                    the point of Orbeon Forms.
                </p>
            </section>
            <a name="file-upload"/>
            <a name="xforms-upload"/>
            <section>
                <title>How can I perform a file upload?</title>
                <p>
                    Check the <a href="reference-xforms-guide#xforms-upload">XForms upload control</a> and the <a
                    href="/xforms-upload/">XForms upload example</a>
                </p>
            </section>
            <a name="xforms-xpath20"/>
            <section added="2007-03-29">
                <title>I get errors when I use the XPath <code>if()</code> function in Orbeon Forms. What's wrong?</title>
                <p>
                    This happens because Orbeon Forms uses XPath 2.0 expressions instead of XPath 1.0 expressions as
                    mandated by XForms 1.0 and XForms 1.1. This allows much greater flexibility in the expressions you
                    can use in Orbeon Forms (and once you have tasted XPath 2.0, you can't go back to XPath 1.0!). For
                    more information, see <a href="reference-xforms-guide#xforms-xpath-20">Note About XPath 2.0
                    Expressions</a>.
                </p>
            </section>
            <a name="xforms-jsp-mix"/>
            <section added="2006-01-11">
                <title>Can I mix and match XForms and JSP?</title>
                <p>
                    Yes, you can use JSP alongside XForms, in the same web application or in a separate web
                    application.
                </p>
                <p>
                    You can use JSP to produce pages containing XForms or other content to be processed by Orbeon
                    Forms. See <a href="reference-xforms-java">Using the Orbeon Forms XForms Engine with Java
                    Applications</a>.
                </p>
                <p>
                    If you feel more advanced, you can also "call" JSP pages with HTML links, or by redirecting or
                    forwarding using the <a href="processors-other#redirect-processor">Redirect processor</a>. You can
                    also use the Servlet Include generator to include the content produced by a JSP.
                </p>
            </section>
            <a name="xforms-jsf-mix"/>
            <section added="2006-12-05">
                <title>Can I mix and match XForms and JavaServer Faces?</title>
                <p>
                    It all depends on what you are trying to achieve with this integration. Technically, you can write a
                    page in JSP + JSF that produces XForms, which can then be processed by the Orbeon Forms XForms
                    engine using a Servlet filter approach. But mixing JSF components with XForms components can cause
                    difficulties related to the way each component set handles form submissions and state. In
                    particular:
                </p>
                <ul>
                    <li><p>
                        If you use non-AJAX JSF components, the standard JSF components (buttons, etc.) will perform
                        HTML form submissions to the server, which then reevaluates the JSF component tree to produce an
                        updated page that is then sent back to the client. If you do this and your page contains XForms
                        components as well, you will lose the state of your XForms controls when the page reloads.
                    </p></li>
                    <li><p>
                        If you use AJAX JSF components (we have no experience whatsoever with those), there could be
                        conflicts due to the JavaScript libraries those components use vs. the ones we use in Orbeon
                        Forms.
                    </p></li>
                </ul>
                <p>
                    Feel free to experiment with JSF and XForms together, but at the moment we recommend using either
                    JSF or XForms exclusively in a given page. However you can very well use JSF for some pages, and
                    XForms for other pages within the same application.
                </p>
                <note>
                    Orbeon wrote an <a
                    href="http://www.theserverside.com/tt/articles/article.tss?l=BestBothWorlds">article on
                    TheServerSide</a> in 2003 on using XSLT to style JSF. This approach can still be pursued, but the
                    XML renderkit has not been maintained and we no longer support it in Orbeon Forms.
                </note>
            </section>
            <a name="jsr-168"/>
            <section>
                <title>Can I run XForms within JSR-168 portlets?</title>
                <p>
                    As of Orbeon Forms 3.6, it is possible to use the Orbeon Forms XForms engine within the Java Portlet
                    (JSR-168) compliant Liferay portal, thanks to kind sponsoring by Atkins Transport Systems.
                </p>
                <p>
                    It is expected that Orbeon Forms will work within other JSR-168 portals, or that only minor
                    adjustments will be needed in such cases. Please report your experience to the <a
                    href="http://www.orbeon.com/forms/mailing-list">ops-users</a> mailing-list!
                </p>
                <p>
                    The great thing about Orbeon Forms and portlets is that there is very little difference if any
                    between writing an application working in a portlet vs. a servlet. In fact, most of the Orbeon
                    Forms XForms examples work unmodified as portlets. You can use some particularities of portlets,
                    like preferences, and you have to be careful about paths to serve resources, but otherwise portlets
                    are transparent to the developer. This contrasts with many other web platforms.
                </p>
                <p>
                    In other words, Orbeon Forms gives you the flexibility to write an application that works in
                    standalone mode, and allows you to migrate to a portlet environment at minimal cost. This contrasts
                    with many other web application technologies, which sometimes require you to rewrite your
                    application entirely to fit within a portlet.
                </p>
                <p>
                    <i>HISTORICAL NOTE: There has been a lot of code in Orbeon Forms to support JSR-168 since late
                    2003 already. When this code was written, the JSR-168 specification was not final and no JSR-168
                    container was available. So Orbeon developped a container based on draft specifications for testing.
                    This code was used until recently to run the Orbeon Forms examples portal: examples were actually
                    using the portlet code and running as portlets, and the examples portal is an early JSR-168 portal.
                    Note that this is no longer the case with Orbeon Forms 3.6, where the example applications portal
                    does not use JSR-168 for performance and simplicity reasons.</i>
                </p>
            </section>
            <a name="browser-support"/>
            <section>
                <title>What web browsers does the Ajax-based XForms engine support?</title>
                <p>
                    Orbeon Forms 3.6's XForms engine supports Firefox (1.0.7 and later), IE 6, Safari (1.3 and later),
                    and Opera (8.5 and later).
                </p>
                <p>
                    In the future we hope to also add support in XForms NG for non-JavaScript (and non-Ajax) browsers.
                </p>
            </section>
            <a name="designing-forms"/>
            <section added="2006-12-06">
                <title>How do I design forms in Orbeon Forms?</title>
                <p>
                    Orbeon <a href="#form-builder">Form Builder</a> (in alpha as of August 2008) is Orbeon Forms's
                    visual form designer. You can also create forms by writing XHTML pages that contain embedded XForms
                    markup.
                </p>
                <p>
                    Orbeon Forms 3.6 comes with a <a href="intro-tutorial">tutorial</a> which explains step by step how
                    to create your first forms. We recommend you also look at the other sample Orbeon Forms applications
                    that you find under your WAR file's <code>WEB-INF/resources/apps</code> directory.
                </p>
                <p>
                    Also note that Orbeon provides services around Orbeon Forms, including training. Please visit our
                    <a href="http://www.orbeon.com/support">support page</a> for more information.
                </p>
            </section>
            <a name="graphical-designer"/>
            <section>
                <title>What visual tool / graphical designer do you recommend for XForms?</title>
                <p>
                    Orbeon <a href="#form-builder">Form Builder</a>.
                </p>
            </section>
            <a name="javascript-dom"/>
            <section>
                <title>Can I use JavaScript to modify the page DOM and add or remove XForms controls?</title>
                <p>
                    No, because your JavaScript code will run within the web browser, which doesn't know anything about
                    XForms controls. All the web browser sees is an HTML DOM (Document Object Model), which represents
                    the HTML document produced by Orbeon Forms when it transforms XForms+XHTML into plain HTML. That DOM
                    does not include in XForms elements.
                </p>
                <p>
                    Remember, the Orbeon XForms implementation works server-side in order to support currently deployed
                    browsers. It achieves this by sending to web browsers not XForms (which they wouldn't understand),
                    but HTML, JavaScript, and CSS (which they do understand).
                </p>
                <p>
                    If you just want to conditionally include XForms controls when the page is loaded, you can use an
                    XSLT page view. If you want to control the showing or hiding of XForms controls after the page is
                    loaded, you can use XForms relevance or switch/case. Currently, the only thing you can't do is
                    dynamically add and remove trees of controls in a running XForms page.
                </p>
            </section>
            <a name="just-xforms"/>
            <section added="2006-12-05">
                <title>I just want to use Orbeon Forms's XForms engine. Can I do that?</title>
                <p>
                    In addition to the XForms engine, Orbeon Forms comes with an <a
                    href="/doc/reference-xpl-pipelines">XML pipeline</a> engine and a <a
                    href="/doc/reference-page-flow">Page Flow</a> Controller (PFC). While these additional building
                    blocks are often useful to put together your form-based applications, you may not have a need for
                    them.
                </p>
                <p>
                    The good news is that Orbeon Forms is very configurable and you are not forced to use XML pipelines
                    or the PFC. Users have been successfuylly using the Orbeon Forms XForms engine with JSP/Struts or
                    PHP. Please visit <a href="reference-xforms-java">Using the Orbeon Forms XForms Engine with Java
                    Applications for more details</a>. Post additional questions to the <a
                    href="http://www.orbeon.com/forms/mailing-list">ops-users</a> mailing-list.
                </p>
            </section>
            <a name="xforms-server-submit"/>
            <section added="2007-03-09">
                <title>What is the matter about this <code>/xforms-server-submit</code> I am seeing?</title>
                <note>
                    <p>
                        As of Orbeon Forms 3.7, this is partially addressed as the submissions are now done to the URL
                        of the current page (<a href="http://tinyurl.com/6mva5o">see the RFE</a>). This does not solve
                        the issue entirely, but it makes the URLs look nicer to the user. In the future, we hope to
                        improve on this (<a href="http://tinyurl.com/692f7r">see the RFE</a>).
                    </p>
                </note>
                <p>
                    Remember that the Orbeon Forms XForms engine runs for the most part on the server. This means that
                    when you perform an XForms submission that uses HTTP, that submission usually originates from the
                    server, not from the client. Consider the following submission:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:submission xmlns:xforms="http://www.w3.org/2002/xforms" ref="instance('my-instance')"
                                       method="post" action="http://my.example.com/service" replace="all"/>
                </xml-source>
                <p>
                    This is how this submission is processed.
                </p>
                <ul>
                    <li>
                        <p>
                            The server part of Orbeon Forms tells the Orbeon Forms client (in your web browser) to
                            perform a <code>POST</code> submission at the special Orbeon Forms URL
                            <code>/xforms-server-submit</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                            Orbeon Forms responds to that URL and issues an HTTP POST to
                            <code>http://my.example.com/service</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                            Orbeon Forms forwards the result of the HTTP request to your web browser.
                        </p>
                    </li>
                </ul>
                <p>
                    This is why you see <code>/xforms-server-submit</code> in URL bar.
                </p>
                <p>
                    Ideally, you would like to see <code>http://my.example.com/service</code> appear in your URL bar,
                    but technically this is hard to achieve for the following reasons:
                </p>
                <ul>
                    <li>
                        <p>
                            The only way to POST XML documents from a browser is to use the XmlHttpRequest object, and
                            if you do that, you cannot easily, if at all, implement the <code>replace="all"</code>
                            functionality.
                        </p>
                    </li>
                    <li>
                        <p>
                            There are limitations as to what URLs your browser can talk to from a given page, for
                            security reasons (this is known as cross-domain requests).
                        </p>
                    </li>
                </ul>
                <p>
                    In short we don't believe we will solve this problem perfectly in the short-term, unless we get
                    clever suggestions as to how this can be done.
                </p>
                <p>
                    Note that "nice" client-side URLs are already used in the following cases:
                </p>
                <ul>
                    <li>
                        <p>
                            When using the <code>method="get"</code> method with <code>replace="all"</code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:submission xmlns:xforms="http://www.w3.org/2002/xforms" ref="instance('my-instance')"
                                               method="get" action="http://my.example.com/service" replace="all"/>
                        </xml-source>
                        <p>
                            Note that this assumes the following property is set in <code>properties.xml</code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <property as="xs:boolean" name="oxf.xforms.optimize-get-all" value="true"/>
                        </xml-source>
                    </li>
                    <li>
                        <p>
                            When using <code>xforms:load</code> instead of <code>xforms:submission</code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:load xmlns:xforms="http://www.w3.org/2002/xforms" resource="http://my.example.com/service"/>
                        </xml-source>
                    </li>
                </ul>
                <p>
                    Finally, note that performing submission from the server offers certain advantages, including solving
                    cross-domain access.
                </p>
            </section>
            <a name="xforms-webforms-20"/>
            <section added="2007-06-18">
                <title>How does Web Forms 2.0 compare with XForms? Does Orbeon plan to implement it?</title>
                <p>
                    Web Forms 2.0 is a specification of <a href="http://www.whatwg.org/">WHATWG</a> which describes a
                    series of improvements over HTML forms. Since some key WHATWG members have joined the recently
                    revamped <a href="http://www.w3.org/html/wg/">HTML Working Group at W3C</a>, there is a strong
                    possibility that Web Forms 2.0 will be integrated (as is or with modifications) into the W3C's
                    upcoming HTML 5 specification.
                </p>
                <p>
                    One of the main goals of Web Forms 2.0 is to be backward compatible with HTML forms. XForms on the
                    other hand is a more radical departure from HTML forms due to its use of XML to store form data, a
                    model-view architecture, and XML events and actions. Web Forms 2.0 does not support an XML data
                    model, XPath, or XML schema validation. The closest Web Forms 2.0 comes to supporting XML is that it
                    allows serializing form data into XML in a submission.
                </p>
                <p>
                    At Orbeon, we do not think that Web Forms 2.0 directly competes with XForms because it does not
                    cover as much ground. We believe that for relatively large forms, an XML data model is absolutely
                    necessary. We also believe that the declarative event and action model used by XForms is a huge
                    benefit to form authors.
                </p>
                <p>
                    But Web Forms 2.0, or an evolution of it as part of HTML 5, could be leveraged by Orbeon Forms as
                    it become supported by browsers.
                </p>
            </section>
            <a name="xforms-accessibility"/>
            <section added="2007-10-05" updated="2008-08-03">
                <title>Does Orbeon Forms support the Disability Discrimination Act (DDA) and/or W3C WCAG?</title>
                <p>
                    We do not guarantee that Orbeon Forms supports DDA, but it seems that the first step of DDA is to
                    comply with <a href="http://www.w3.org/TR/WAI-WEBCONTENT/">WCAG 1.0</a> priority 1 and 2 (or
                    AA). As of August 2008, we are working on such compliance within Form Runner.
                </p>
                <p>
                    With Orbeon Forms, many points in WCAG 1.0 relate to HTML written by the page author. For those,
                    Orbeon Forms is of course in theory compliant since this depends on how the page authors creates the
                    HTML. Regarding the markup that Orbeon Forms generate automatically (for with Form Runner), we are
                    doing everything we can to produce clean HTML, which helps a lot with making pages accessible. For
                    example we generate HTML labels for all form controls.
                </p>
                <p>
                    It seems that the most problematic point is point 6.3 of WCAG 1.0, which states that pages should
                    be functional even if script is disabled. Please note the following:
                </p>
                <ul>
                    <li>
                        <p>
                            As of Orbeon Forms 3.7, the <a
                            href="http://wiki.orbeon.com/forms/developer-documentation/noscript-mode">Noscript Mode</a>
                            provides support in Orbeon Forms for JavaScript-free operation.
                        </p>
                    </li>
                    <li>
                        <p>
                            Based on feedback from people in the accessibility field, it seems that the requirement is
                            being relaxed as JavaScript and Ajax take more importance, and as assistive technologies
                            improve. For example, <a href="http://www.w3.org/TR/WCAG20/">WCAG 2.0</a> (still a working
                            draft at W3C), is quite reasonably going in the direction of not preventing script. For
                            example it states:
                        </p>
                        <blockquote>
                            In choosing Web technologies (HTML, scripting, etc.) that will be used when creating
                            content that will meet the WCAG 2.0 success criteria, authors must use technologies that
                            are supported by users' assistive technologies as well as the accessibility features in
                            browsers and other user agents. Such technologies are referred to as "accessibility
                            supported."
                        </blockquote>
                    </li>
                </ul>
                <p>
                    Orbeon is interested in getting your input on accessibility issues. Please contact us or post to the
                    mailing-list if you have any feedback on this topic.
                </p>
            </section>
            <a name="xforms-widgets"/>
            <section added="2007-10-11" updated="2008-08-03">
                <title>How do I add my own rich controls to Orbeon Forms?</title>
                <p>
                    As of Orbeon Forms 3.7, a component system for Orbeon Forms, based on XBL 2, is almost in place.
                    For more information, see the developer documentation:
                </p>
                <ul>
                    <li>
                        <p>
                            <a href="http://wiki.orbeon.com/forms/projects/xforms-component-system">XForms Component System</a>
                        </p>
                    </li>
                    <li>
                        <p>
                            <a href="http://wiki.orbeon.com/forms/projects/form-builder-components">Form Builder - Components</a>
                        </p>
                    </li>
                </ul>
                <p>
                    Note that Orbeon Forms already features some rich components such as menus, trees, dialogs, and
                    autocompletion fields, and we plan to add more. All these features were sponsored by customers, so
                    if you have particular needs you may want to consider sponsoring as that may be the quickest way to
                    get your widget in the Orbeon Forms code base.
                </p>
            </section>
            <a name="xforms-javascript"/>
            <section added="2007-10-30" updated="2008-08-03">
                <title>I am not allowed to run JavaScript in the browser. Is Orbeon Forms a solution for me?</title>
                <p>
                    The short answer: yes. As of Orbeon Forms 3.7, the Orbeon Forms XForms engine has two modes:
                </p>
                <ul>
                    <li>
                        <p>
                            In <i>full</i> mode, the Orbeon Forms XForms engine uses JavaScript on the client. Namely,
                            it uses <a href="http://developer.yahoo.com/yui/">The Yahoo! User Interface Library
                            (YUI)</a> as a foundation to Orbeon-specific JavaScript code. This mode allows you to
                            leverage the Orbeon Forms XForms engine to the maximum.
                        </p>
                    </li>
                    <li>
                        <p>
                            In <i>noscript</i> mode, the Orbeon Forms XForms engine works without any JavaScript. This
                            allows running simple forms, in particular most forms created with Form Builder.
                        </p>
                        <p>
                            This mode has some limitations: dynamic behavior in the user interface is reduced, and the
                            user has to press a "refresh" buttons to perform udates, like with older-style web
                            applications. Also, advanced widgets like dialogs, trees, and menus, are not yet
                            implemented.
                        </p>
                    </li>
                </ul>
                <p>
                    For more technical information, visit the <a
                    href="http://wiki.orbeon.com/forms/developer-documentation/noscript-mode">Noscript Mode</a>
                    developer documentation.
                </p>
            </section>
            <a name="xforms-native"/>
            <section added="2008-08-03">
                <title>Can I easily migrate from Orbeon Forms to a native XForms implementation?</title>
                <p>
                    We don't believe it is realistic in the short term to migrate entire applications from Orbeon Forms
                    to client-side implementations. There are multiple reasons for this:
                </p>
                <ul>
                    <li>
                        <p>
                            In our opinion, there is only little chance that all mainstream browsers will implement
                            XForms natively in the short term. Certainly, we doubt that Microsoft will implement
                            XForms. Other browsers require extensions (Firefox) or plugins (Internet Explorer).
                        </p>
                        <p>
                            In our opinion, a more promising approach for pure client-side solutions are
                            JavaScript-based implementations, like Ubiquity (which is not quite yet beta as of August
                            2008, and for now concentrates on IE and Firefox with no Safari or Opera support).
                        </p>
                    </li>
                    <li>
                        <p>
                            Once JavaScript implementations become mature enough, it remains to be seen how many
                            interoperability issues will arise, in particular related to the level of XForms support
                            (XML Schema validation, for example, is hard to do in JavaScript), extensions available (for
                            example: dialogs, variables, etc.), and styling (CSS).
                        </p>
                    </li>
                    <li>
                        <p>
                            There are big benefits to running XForms on the server. In Orbeon Forms, and in particular
                            in Form Runner, we use XForms as a server-side technology. Applications written with XForms
                            are able to manipulate data on the server that the client must never see, much like you
                            would do in Java, Ruby, or any server-side language. Also, running XForms on the server
                            allows you to produce applications that work with or without script (for accessibility
                            purposes, or for supporting legacy browsers) based on a single definition written in XForms
                            (more information about the <a href="#xforms-javascript"><i>noscript</i> mode</a>).
                        </p>
                        <p>
                            XForms is only one of the technologie that enable Form Runner and Form Builder. Form Runner
                            provides a full environment to manage forms, including persistence, PDF generation, etc.
                        </p>
                    </li>
                </ul>
                <p>
                    This said, for simple XForms-based applications, you can certainly write interoperable XForms that
                    will work both on Orbeon Forms and native or client-side JavaScript implementations. We are very
                    interested in getting your feedback on your experience in this area.
                </p>
            </section>
        </section>
        <a name="xpl"/>
        <section>
            <title>XML pipelines (XPL) FAQ</title>
            <a name="xml-pipeline"/>
            <section>
                <title>What is an XML pipeline and why do I care?</title>
                <p>
                    XML pipelining is an approach to processing XML where the inputs and outputs of
                    multiple processing steps (e.g., XSLT transformations) are connected together
                    using a pipeline metaphor. Orbeon has implemented an XML pipeline engine in Java
                    that executes a declarative XML pipelining language called <a
                    href="http://www.w3.org/Submission/2005/SUBM-xpl-20050411/">XPL</a>.
                </p>
                <p>
                    "Programming" pipelines using declarative XML instead of writing procedural
                    code results in a significant increase in productivity for tasks that require
                    high volume or complex XML processing. XML documents enter a pipeline, are
                    efficiently processed by one or more processors as specified by XPL
                    instructions, and are then output for further processing, display, or storage.
                    XPL features advanced capabilities such as document aggregation, conditionals
                    ("if" conditions), loops, schema validation, caching, and sub-pipelines.
                </p>
                <p>
                    XML pipelines are built up from smaller components called XML processors. An
                    XML processor is a software component which consumes and produces XML documents.
                    New XML processors are most often written in Java, but most often developers do
                    not need to write their own processors because the engine provides a
                    comprehensive library. Example processors include an XSLT processor, database
                    processors that interface with both SQL and native XML databases, and a
                    serializer processor that writes XML documents to disk. XPL orchestrates these
                    to create business logic, similar to the way Java code "orchestrates" Java
                    object method calls.
                </p>
            </section>
            <a name="what-is-xpl"/>
            <section>
                <title>What is XPL?</title>
                <p>
                    At the core of Orbeon Forms lies a powerful XML processing engine that
                    natively speaks the <a
                    href="http://www.w3.org/Submission/2005/SUBM-xpl-20050411/">XML Pipeline
                    Language (XPL)</a>. XPL is a declarative language for processing XML using a
                    pipeline metaphor. XML documents enter a pipeline, are efficiently processed by
                    one or more processors as specified by XPL instructions, and are then output for
                    further processing, display, or storage. XPL features advanced capabilities such
                    as document aggregation, conditionals ("if" conditions), loops, schema
                    validation, and sub-pipelines.
                </p>
                <p>
                    The Orbeon XPL pipeline engine used in Orbeon Forms is designed for
                    low-memory consumption and supports transparent caching.
                </p>
            </section>
            <a name="xml-processor"/>
            <section>
                <title>What is an XML processor?</title>
                <p>
                    The term XML processor is commonly used to refer to XML parsers. In the context
                    of Orbeon Forms, the term
                    <i>XML processor</i> is used to refer to
                    any software component consuming and/or producing XML documents. An XML
                    processor can also simply be called an
                    <i>XML component</i>.
                </p>
            </section>
            <a name="xml-pipeline-looks"/>
            <section>
                <title>What does an XML pipeline look like?</title>
                <p>
                    This particular example illustrates a simple 2-stage XPL pipeline that performs an XSLT
                    transformation on an XML document that is located on disk, and then writes the result back to a
                    another file on disk. For more details about XPL, please see the <a
                    href="reference-xpl-pipelines">XPL and Pipelines reference documentation</a>.
                </p>
                <div class="image">
                    <img width="482" height="310" src="../apps/doc/images/2-stage-pipeline.png"/>
                    <div class="legend">2-Stage XPL Pipeline Diagram</div>
                </div>
                <br/>
                <div class="image">
                    <img src="../apps/doc/images/2-stage-pipeline-code.png"/>
                    <div class="legend">2-Stage Pipeline XPL Code</div>
                </div>
            </section>
            <a name="xpl-spec"/>
            <section>
                <title>Is there a specification for XPL?</title>
                <p>
                    As of February 2005, a <a
                    href="http://www.w3.org/Submission/2005/SUBM-xpl-20050411/">draft
                    specification</a> has been completed amd submitted to W3C. It serves as a basis
                    of discussion for an XPL 1.0 specification.
                </p>
                <p>
                    As of December 2005, XML Processing Model Working Group meetings have started at W3C. This working
                    group, of which Orbeon is a member, is in charge of working on a standard XML processing language.
                    While the deliverable of the working group will certainly not be exactly XPL, we do hope that in its
                    first version it will cover a significant number of use cases currently covered by the XPL
                    implementation found in Orbeon Forms.
                </p>
                <p>
                    As of August 2008, the XML Processing Model Working Group has released several working drafts of
                    the <a href="http://www.w3.org/TR/xproc/">XProc XML Pipeline Language</a>. A Last Call should be
                    coming very soon.
                </p>
            </section>
            <a name="xpl-impl"/>
            <section>
                <title>Is anybody free to implement XPL?</title>
                <p>Yes.</p>
            </section>
            <a name="xpointer-support"/>
            <section>
                <title>How much of the XPointer specification does XPL support?</title>
                <p>
                    Orbeon Forms supports a subset of <a
                    href="http://www.w3.org/TR/xptr-xpointer/">XPointer</a>. You can use the
                    XPointer <code>document#xpointer(/xpath/expression)</code> syntax to extract a
                    nodeset from a document.
                </p>
            </section>
            <a name="xslt-params"/>
            <section>
                <title>How can I pass parameters to an XSLT stylesheet?</title>
                <p>
                    It is possible by importing the stylesheet within another
                    stylesheet, as follows:
                </p>
                <xml-source show-namespaces="true">
                    <p:processor name="oxf:xslt" xmlns:p="http://www.orbeon.com/oxf/pipeline">
                        <p:input name="data" href="..."/>
                        <p:input name="config">
                            <xsl:stylesheet version="2.0"
                                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                                <comment>This is the stylesheet to pass parameters to</comment>
                                <xsl:import href="tour.xsl"/>
                                <comment>Here we assign a value to the "start" parameter</comment>
                                <xsl:param name="start" select="'a1'"/>
                            </xsl:stylesheet>
                        </p:input>
                        <p:output name="data" id="..."/>
                    </p:processor>
                </xml-source>
            </section>
            <a name="caching"/>
            <section>
                <title>How does caching work in Orbeon Forms?</title>
                <p>
                    Caching mechanisms should have no impact on the behavior of a system, except
                    for a gain in performance. This is also the principle followed by the
                    Orbeon Forms cache: when you develop an application with
                    Orbeon Forms, you should be able to ignore that caching takes place. This
                    may be all you want to know about caching in Orbeon Forms!
                </p>
                <p>
                    To get a better understanding of the underlying mechanism,
                    consider the example below:
                </p>
                <div class="image">
                    <img src="../apps/doc/images/faq-caching.png" width="461" height="154"/>
                </div>
                <p>
                    Let's assume the following:
                </p>
                <ul>
                    <li>The XSLT processor's
                        <code>config</code> input is an XSLT stylesheet on disk
                    </li>
                    <li>The XSLT processor's
                        <code>data</code> input is an XML file on disk
                    </li>
                    <li>
                        The XSLT stylesheet does not contain imports, includes,
                        the document() function, or calls to Java code.
                    </li>
                </ul>
                <p>
                    Under those assumptions, the XSLT transformation does not have side effects, which means that if
                    neither the XSLT stylesheet ( <code>config</code> input) nor the input XML document (
                    <code>data</code> input) change, the output of the transformation will be the same.
                </p>
                <p>
                    If you were to keep the result of the transformation, knowing that both inputs have not changed
                    since the last time you generated that output, you wouldn't have to actually run the transformation
                    again: you could just reuse the result you already have. This is the basic of caching in Orbeon
                    Forms.
                </p>
                <p>
                    In this example, the result of the XSLT transformation is used to create an XUpdate processor
                    configuration, which is an XUpdate program that will be interpreted or compiled by the XUpdate
                    processor. Instead of keeping the result of the XSLT transformation as an XML document, the XUpdate
                    processor can cache the compiled XUpdate program. Compared to a solution where the XML document is
                    cached, this technique saves memory by not keeping the XML document in cache, and saves processing
                    power by preventing the XUpdate processor to recompile its program.
                </p>
                <p>
                    Therefore, if neither the XSLT transformer's <code>config</code> nor <code>data</code> input has
                    changed, the XUpdate processor can keep the same program in the Orbeon Forms object cache, saving
                    an XSLT stylesheet compilation, an XSLT transformation, and an XUpdate program compilation.
                </p>
                <p>
                    The same mechanism applies to the XSLT transformer configuration: the compiled XSLT stylesheet can
                    be kept in the Orbeon Forms object cache. And if the output of the XUpdate transformation is sent
                    to an HTML serializer, the HTML output could be cached as well.
                </p>
                <p>
                    In general, Orbeon Forms does not unnecessarily cache the XML documents passed between processors.
                    Instead, it caches the result of time-consuming operations, as illustrated above.
                </p>
                <p>
                    Some cases are more complex than the example shown here. For example in the case of XSLT 1.0, Orbeon
                    Forms handles caching and dependencies related to imports, includes as well as the XPath
                    <code>document()</code> function when the URL passed to the function is static. Some processors,
                    like the SQL processors, never allow their output to be cached.
                </p>
            </section>
            <a name="debug-attr-perf"/>
            <section>
                <title>
                    Do debug attributes make my application slower?
                </title>
                <p>
                    The Orbeon Forms cache avoids executing the parts of a pipeline that do
                    not need to be re-evaluated. However when the a debug attribute is set, the
                    point where the attribute is set needs to be evaluated so that meaningful data
                    can be displayed. This can cause the performance to degrade. Debug attributes
                    should be removed in production.
                </p>
            </section>
            <a name="debug-disable"/>
            <section>
                <title>Can I disable debug attributes globally?</title>
                <p>
                    Not at this time.
                </p>
            </section>
            <a name="xpl-name-id"/>
            <section>
                <title>When invoking a processor in XPL, what is the difference between a name and an id?</title>
                <p>
                    Processors can be compared to functions in traditional programming languages.
                    Processors (just like functions) have inputs (arguments) and outputs (return
                    values). Each input and output has a <i>name</i>. The name is part of the
                    processor's interface. For instance, using an informal function-like notation,
                    the XSLT processor interface is:
                </p>
                <blockquote>
                    <code>(data) = xslt(data, config)</code>
                </blockquote>
                <p>
                    since the XSLT processor has 2 inputs named <code>data</code> and
                    <code>config</code>, and one output named <code>data</code>.
                </p>
                <p>
                    The interface to a processor is the contract that defines what inputs and
                    outputs do. If you are using an existing processor, for example the XSLT
                    transformer, you have to use the names declared by that processor. To know what
                    names you must use, you have to consult the documentation for each processor. We
                    have tried to be consistent and to use "config" and "data" as often as possible.
                    You can for example call the XSLT transformer like this:
                </p>
                <xml-source show-namespaces="false">
                    <p:processor name="oxf:xslt" xmlns:p="http://www.orbeon.com/oxf/pipeline">
                        <p:input name="config" href="stylesheet.xsl"/>
                        <p:input name="data" href="input.xml"/>
                        <p:output name="data" id="my-output"/>
                    </p:processor>
                </xml-source>
                <p>
                    A pipeline can also be viewed as a processor. If that pipeline decides to
                    export inputs and outputs, it must do so using the <code>&lt;p:param
                    name="..."/></code> syntax. This defines its interface. You can compare this to
                    writing your own method in Java, as opposed to using an existing method. The
                    difference is that in Java, you address method parameters by position when you
                    call a method. In XPL, you always address them by name. Therefore it is
                    important to use the right name when you call a processor (or a pipeline).
                </p>
                <p>
                    This also applies to the cases where the Web Application Controller calls your
                    own pipelines: the PFC has to know the names of the inputs and outputs to
                    connect to. Therefore, you have to use the names ( <code>data</code> and
                    <code>instance</code>) <a
                    href="/doc/processors-controller">documented</a>.
                </p>
                <p>
                    If you implement a pipeline or write a new processor in Java, and you don't
                    have any external naming constraints (such as the ones defined by the PFC, or
                    if somebody expects to call your pipeline using names defined in advance), you
                    are free to use any name.
                </p>
                <p>
                    In XPL an <i>id</i> can be assigned to an output when invoking a processor. This
                    id can then be used latter on in the same pipeline to refer to that specific
                    output, and for instance connect it to the input of another processor. Ids are
                    similar to variable names in most programming languages.
                </p>
            </section>
            <a name="xpl-oxf-prefix"/>
            <section added="2007-01-15">
                <title>I am confused by all those <code>oxf:</code> prefixes. What do they mean?</title>
                <p>
                    By default Orbeon Forms makes two uses of the string <code>oxf:</code>:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>As an XML namespace prefix in XPL.</b> The XML namespace prefix <code>oxf</code> is
                            typically mapped to the XML namespace URI <code>http://www.orbeon.com/oxf/processors</code>.
                            This namespace is used to resolve XML qualified names (also referred to as "QNames") that
                            identify the built-in XML processors in XPL, such as <code>oxf:xslt</code>. These are
                            constructs specific to XML.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>As a URL scheme.</b> The <code>oxf</code> URL scheme is used to address Orbeon Forms
                            resources through the Orbeon Forms <a href="reference-resource-managers">Resource
                            Manager</a>. They are part of URLs such as <code>oxf:/config/properties.xml</code>. Such
                            URLs are supported throughout the Orbeon XForms XPL engine and XForms engine.
                        </p>
                    </li>
                </ul>
                <p>
                    Having both uses in the same file may be confusing. But while you <i>have</i> to use the
                    <code>oxf</code> scheme to access Orbeon Forms resources, you <i>don't have</i> to use the
                    <code>oxf</code> prefix in XPL: you can use any prefix you like, for example:
                </p>
                <xml-source>
                    <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                           xmlns:processor="http://www.orbeon.com/oxf/processors">
                        <p:processor name="processor:xslt">
                           ...
                        </p:processor>
                        ...
                    </p:config>
                </xml-source>
            </section>
        </section>
        <a name="other"/>
        <section>
            <title>Other Orbeon Forms FAQ</title>
            <a name="remove-sidebar"/>
            <section added="2007-03-23">
                <title>How can I get rid of the left navigation bar in my own application?</title>
                <p>
                    You created your own application based on the Orbeon Forms examples, and now you would like to get
                    rid of the left navigation bar with that list of examples, as well as any other examples-specific look
                    and feel.
                </p>
                <p>
                    The left navigation bar and other "decorations" are added to all the examples in what is called a
                    <i>theme</i>. The theme is implemented in an XSLT stylesheet, and that stylesheet is applied to all
                    the pages generated by your application. You define the theme stylesheet in
                    <code>properties.xml</code>. By default, it is set to use
                    <code>oxf:/config/theme-examples.xsl</code>:
                </p>
                <xml-source>
                    <property as="xs:anyURI"  name="oxf.epilogue.theme" value="oxf:/config/theme-examples.xsl"/>
                </xml-source>
                <p>
                    Instead of <code>oxf:/config/theme-examples.xsl</code> you can use
                    <code>oxf:/config/theme-plain.xsl</code> if you don't want any theme to be applied to your page. Or
                    you can create you own stylesheet which, say, adds the appropriate header and footer to your pages,
                    and change <code>oxf.epilogue.theme</code> to point to that stylesheet.
                </p>
            </section>
            <a name="ie-cannot-find-server"/>
            <section added="2006-10-24">
                <title>Why am I getting an error page "Cannot find server or DNS server error" on IE only?</title>
                <p>
                    If you get the white IE error page with the message "Cannot find server or DNS server error" when
                    navigating to another page, it most likely means that the length of the URL for that page exceeds
                    the limit imposed by IE. This can happen if you are passing an XForms instance from one page to
                    another with a redirect. The solution often involves changing in your <code>properties.xml</code>
                    the value of the <code>instance-passing</code> property for the processor
                    <code>oxf:page-flow</code> from <code>redirect</code> to <code>forward</code>.
                </p>
                <p>
                    The <code>instance-passing</code> can be defined at application level in
                    <code>properties.xml</code>, the page flow level, or the <code>&lt;result></code> element level. See
                    the changes in version 2.5 for <a href="home-changes-25#instance-passing">more information about
                    <code>instance-passing</code></a>.
                </p>
            </section>
            <a name="illgal-html-character"/>
            <section added="2006-06-16">
                <title>Why am I getting an "Illegal HTML character" exception?</title>
                <p>
                    The exception typically looks like:
                </p>
                <blockquote>
                    <code>
                        org.orbeon.saxon.trans.DynamicError: Illegal HTML character: decimal 150<br/>
                        at org.orbeon.saxon.event.HTMLEmitter.writeEscape(HTMLEmitter.java:321)
                    </code>
                </blockquote>
                <p>
                    In general, you get this error when the encoding on your XML file missing or is
                    incorrect. In the example above, we had specified the encoding to be ISO-8859-1,
                    while editing the file on a Windows machine. The file contained a dash encoded
                    as the character 150 in decimal, 96 in hexadecimal, which is not a valid
                    character for the ISO-8859-1 encoding. In this case changing the encoding to
                    windows-1252 solves the problem.
                </p>
                <p>
                    Specifying ISO-8859-1 instead of windows-1252 on files that contain characters
                    invalid in ISO-8859-1 does sometimes work, but not always. In particular, more
                    recent versions of Saxon became stricter checking for invalid characters. So
                    we recommend you use windows-1252 instead of ISO-8859-1 when appropriate. You
                    specify the windows-1252 encoding by starting your XML file with the following
                    XML declaration:
                </p>
                <code>
                    &lt;?xml version="1.0" encoding="windows-1252"?>
                </code>
                <p>
                    For more information, see this discussion on the <a
                    href="http://www.orbeon.com/blog/2006/06/14/how-browser-have-been-saving-us-from-incorrect-encodings/">difference
                    between ISO-8859-1 and Windows-1252</a>.
                </p>
            </section>
            <a name="performance-numbers"/>
            <section added="2006-01-11">
                <title>I am concerned about the performance of Orbeon Forms. Can you provide performance numbers please?</title>
                <p>
                    We provide recommendations on how to tune Orbeon Forms applications in the <a
                    href="integration-tuning">Performance and Tuning</a> section. Orbeon does not
                    provide performance figures at this point, due to the number of different
                    possible scenarios, the differences between hardware platforms, and the
                    different expectations of users. We believe that the best way to tackle
                    performance questions is to go beyond theory and work on a small but
                    representative prototype. Orbeon can help you build that prototype, a task often
                    done in just a few days. Upon completion of the prototype, you can evaluate
                    whether the performance of the prototype is satisfying or not, and if not, Orbeon
                    can help you determine whether and how performance can be improved. The final
                    appreciation belongs to you.
                </p>
            </section>
            <a name="xslt-perf"/>
            <a name="xslt-processor"/>
            <section>
                <title>What is the recommended XSLT transformer for Orbeon Forms?</title>
                <p>
                    <a href="http://www.saxonica.com/">Saxon 8</a> is used by default within Orbeon Forms. It has proven
                    reliable, and supports the latest <a href="http://www.w3.org/TR/xslt20/">XSLT 2.0</a> and <a
                    href="http://www.w3.org/TR/xpath20/">XPath 2.0</a> drafts from the W3C.
                </p>
                <p>
                    Orbeon Forms also ships with Saxon 6, Xalan 2.5 and XSLTC 2.5.
                </p>
            </section>
            <!--
            <a name="xslt-perf"/>
            <section>
                <title>Isn't XSLT processing slow?</title>
                <p>
                    XSLT performance can vary greatly depending on the XSLT processor used. In
                    general, XSLT performance has shown perfectly adequate for all but the most
                    performance-intensive applications. This being said, Orbeon Forms
                    minimizes the performance hit with its advanced cache, which for example caches
                    objects such as XSLT templates, therefore avoiding reparsing and revalidating
                    stylesheets unless absolutely necessary.
                </p>
                <p>
                    Orbeon Forms also ships with XSLTC, an XSLT compiler now part of Apache
                    Jakarta. XSLTC has shown significant performance improvements over the regular
                    Xalan implementation, at the cost of a lack of maturity.
                </p>
            </section>
            <a name="xsltc"/>
            <section>
                <title>Is XSLTC a mature product?</title>
                <p>
                    XSLTC is not quite mature yet and caution must be exercised when using it. If
                    you plan to use XSLTC, we recommend extensive testing as well as switching back
                    and forth between XSLTC and the regular Xalan implementation during development
                    to ensure proper behavior. We also recommend <a
                    href="http://nagoya.apache.org/bugzilla/">submitting bugs</a> to the Jakarta
                    project if necessary.
                </p>
            </section>
            -->
            <a name="dom4j-illegal-add"/>
            <section>
                <title>
                    Why am I getting an "org.dom4j.IllegalAddException" error?
                </title>

                    <p>The full message looks like:</p>
                    <p>
                        <tt>
                            org.dom4j.IllegalAddException: The node
                            "org.dom4j.util.UserDataElement@c11567 [Element: &lt;gaga attributes:
                            []/>] userData: null, line 0, column 0" could not be added to the branch
                            "null" because: Cannot add another element to this Document as it already
                            has a root element of: gaga
                        </tt>
                    </p>
                    <p>
                        You get this error when you have a stylesheet that generate two or more root
                        elements. This tends to happen if your stylesheet does not match on "/". For
                        instance, say you have this stylesheet:
                    </p>
                    <xml-source>
                        <xsl:stylesheet version="2.0"
                            xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                            <xsl:template match="a">
                                <x/>
                            </xsl:template>
                        </xsl:stylesheet>
                    </xml-source>
                    <p>And this input document:</p>
                    <xml-source>
                        <root>
                            <a/>
                            <a/>
                        </root>
                    </xml-source>
                    <p>
                        The XSLT output will be <tt>&lt;x/>&lt;x/></tt>, which is a not legal XML
                        document (of course, you can only have one root element in an XML document).
                    </p>
            </section>
            <a name="parse-xml-string"/>
            <section>
                <title>
                    How can I parse a string containing XML into a document that Orbeon Forms can process?
                </title>

                    <p>
                        Use the XSLT transformer and the
                        <a href="http://www.saxonica.com/documentation/extensions/functions.html">
                            <code>saxon:parse</code>
                        </a>
                        function. This function parses an XML document supplied as a string and returns
                        a document node. To copy the resulting document to the output of your XSLT
                        transformation, use
                        <code>xsl:copy</code>. For example, assuming your input
                        document is as follows:
                    </p>
                    <xml-source>
                        <document>
                            <xml-string>
                                &lt;name&gt;
                                &lt;first&gt;John&lt;/first&gt;
                                &lt;last&gt;Smith&lt;/last&gt;
                                &lt;/name&gt;
                            </xml-string>
                        </document>
                    </xml-source>
                    <p>
                        Consider also the following XSLT transformation:
                    </p>
                    <xml-source>
                        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:saxon="http://saxon.sf.net/" version="2.0">
                            <xsl:template match="/">
                                <xsl:copy-of select="saxon:parse(/document/xml-string)"/>
                            </xsl:template>
                        </xsl:stylesheet>
                    </xml-source>
                    <p>
                        Running this transformation on the input document above generates the following
                        output:
                    </p>
                    <xml-source>
                        <name>
                            <first>John</first>
                            <last>Smith</last>
                        </name>
                    </xml-source>
                    <p>
                        This tip is particularly useful for parsing XML strings returned by EJBs, Web
                        Services, or entered by a user in XForms textarea controls.
                    </p>

            </section>
            <a name="app-server-hangs"/>
            <section>
                <title>
                    What can I do if the application server hangs?
                </title>
                <p>
                    <ul>
                        <li>
                            <p>
                                If your JVM is running but is not responding to HTTP requests, you
                                might first want to see where in the Java code threads are blocked. To do so, on
                                Windows hit ctrl-break in the command prompt window where your application
                                server is running; on Linux identify the process id of the JVM running
                                your application server and issue a <code>kill -3 pid</code>.
                            </p>
                            <p>
                                If you are using Tomcat and the threads are blocked in database code
                                (e.g. SQLProcessor, PoolingDataSource) open your <code>server.xml</code>,
                                locate the element configuring the Coyote HTTP 1.1 Connector. Make sure
                                that the <code>maxProcessors</code> attribute on Tomcat 4.1 or the <code>maxThreads</code>
                                attribute on Tomcat 5 is set to a value that is much lower than the value of
                                the <code>acceptCount</code> attribute. Typically values for <code>maxProcessor</code>
                                or <code>maxThreads</code> are 3 for a single-CPU server or 4 for a dual-CPU server,
                                while the value of <code>acceptCount</code> can be much higher, typically between
                                50 and 100.
                            </p>
                            <p>
                                For more information on those and other attributes configuring the Coyote HTTP
                                1.1 Connector in general, see the
                                <a href="http://jakarta.apache.org/tomcat/tomcat-4.1-doc/config/coyote.html">Tomcat 4.1</a>
                                or <a href="http://jakarta.apache.org/tomcat/tomcat-5.0-doc/config/http.html">Tomcat 5</a>
                                documentation.
                            </p>
                        </li>
                        <li>
                            <p>
                                Some versions of Chainsaw have a bug where Chainsaw stops responding
                                in certain situations, which blocks the application server. If you are
                                using Chainsaw, this might be the problem: use the FileAppender
                                instead, or use <a href="http://www.orbeon.com/software/studio">Orbeon
                                Studio</a> instead of Chainsaw to view log messages.
                            </p>
                        </li>
                        <li>
                            <p>
                                If you are running RedHat 9, set the environment variable
                                LD_ASSUME_KERNEL=2.4.1 and restart the application server.
                            </p>
                        </li>
                    </ul>
                </p>
            </section>
            <a name="saxon-namespace-node"/>
            <section>
                <title>
                    What can I do about the error "Cannot output a namespace node for the default
                    namespace when the element is in no namespace"?
                </title>
                <p>
                    This is a Saxon issue. It might happen when in the input document of a
                    stylesheet or in the output of the stylesheet you have an element declared with
                    no prefix as the child of an element with a prefix. One way to get around this
                    is to add a prefix to all the element having a parent declared with a prefix.
                </p>
            </section>
            <a name="xupdate"/>
            <section>
                <title>
                    Where can I find more information about XUpdate?
                </title>
                <p>
                    Efforts around the XUpdate language appear to be stalled. XML databases now tend to bid on
                    proprietary extensions to the standard XQuery language (e.g. see what Tamino does, and there are
                    talks about implementing something similar in the open source eXist database). In the future, XQuery
                    will support standard update features.
                </p>
                <p>
                    We do recognize that XUpdate has definite advantages over XSLT in certain use cases (which is why we
                    implemented it in the first place), but it seems that the market is currently not supporting what
                    is considered "yet another XML transformation language".
                </p>
                <p>
                    For use as a general-purpose XML update language with Orbeon Presentation Server, we now recommend
                    using XSLT. Use either XSLT 1.0 or XSLT 2.0 instead of using the XUpdate processor. The only place
                    where XUpdate is not deprecated is within Page Flow, but only a subset of XUpdate is required and
                    you can simply consider that it is part of the Page Flow syntax.
                </p>
                <p>
                    This being said, our XUpdate implementation is functional and of course anybody is free to use it or
                    contribute to it. Like the rest of Orbeon Forms, it is available under the LGPL license.
                </p>
            </section>
            <a name="xupdate-debug"/>
            <section>
                <title>How can I debug the XUpdate code in my page flow?</title>
                <p>
                    Insert at the very beginning of the in the XUpdate code those 3 lines to log the
                    instance being modified (instance of target page), the current instance, and
                    the output of the action pipeline:
                </p>
                <xml-source show-namespaces="false" xmlns:xu="http://www.xmldb.org/xupdate">
                    <xu:message>Instance of target page before XUpdate: <xu:copy-of select="/*"/></xu:message>
                    <xu:message>Instance of this page: <xu:copy-of select="doc('oxf:instance')/*"/></xu:message>
                    <xu:message>Action output: <xu:copy-of select="doc('oxf:action')/*"/></xu:message>
                </xml-source>
                <p>
                    Then as the very last instruction in the XUpdate code, add:
                </p>
                <xml-source show-namespaces="false" xmlns:xu="http://www.xmldb.org/xupdate">
                    <xu:message>Instance of target page after XUpdate: <xu:copy-of select="/*"/></xu:message>
                </xml-source>
            </section>
            <a name="empty-local-name"/>
            <section>
                <title>
                    Why am I getting a "Empty local name in SAX event" exception?
                </title>
                <p>
                    If this exception is thrown from the class TransformerImpl class in a Xalan
                    package (<code>orbeon.apache.xalan.transformer</code>), a bug in Xalan is at
                    the source of the problem. Xalan calls the SAX <code>startElement()</code>
                    method with an attribute that has an empty local name.
                </p>
                <p>
                    Switching to Saxon solves the problem. Saxon is now the default XSLT 1.0 and XSLT 2.0 processor in
                    Orbeon Forms, and will get used when using <code>oxf:xslt</code>. See the <a
                    href="processors-xslt">XSLT documentation</a> for more information.
                </p>
            </section>
            <a name="xml-base"/>
            <section>
                <title>
                    Why am I getting extra <code>xml:base</code> attributes on my documents?
                </title>
                <p>
                    This usually happens when you use XInclude. As per the <a
                    href="http://www.w3.org/TR/xinclude/">XInclude specification</a>, such attributes are added upon
                    inclusion. You can get rid of them by using XSLT:
                </p>
                <xml-source>
                    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:import href="oxf:/oxf/xslt/utils/copy.xsl"/>
                        <xsl:template match="@xml:base"/>
                    </xsl:stylesheet>
                </xml-source>
                <p>
                    When using the <a href="processors-xinclude">XInclude processor</a>, you can
                    also use the <code>xxi:omit-xml-base</code> extension attribute:
                </p>
                <xml-source show-namespaces="false" xmlns:xi="dummy">
                    <xi:include xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
                                href="included-file.xml" xxi:omit-xml-base="true"/>
                </xml-source>
                <p>
                    This works also from XForms page views.
                </p>
            </section>
            <a name="jboss-log4j"/>
            <section>
                <title>
                    What should I do about the error message
                    <code>ERROR: invalid console appender config detected, console stream looping when deploying to JBOSS:</code>
                </title>
                <p>
                    This used to happen with JBoss 3.2.1 and OXF 2.2. The work around a the time
                    was to add <code>-Dorg.jboss.logging.Log4jService.catchSystemOut=false</code> to
                    the end of the JAVA_OPTS line in JBOSS_HOME/bin/run.bat. (run.sh on UNIX)
                </p>
            </section>
            <a name="out-of-memory"/>
            <section added="2005-05-21">
                <title>
                    I am getting frequent Out of Memory errors with Orbeon Forms. What can I do?
                </title>
                <p>
                    Often, this is due to too many threads doing processing within Orbeon Forms at the same time. There
                    is just a lot going on in Orbeon Forms when a request is processed, including typically several XSLT
                    transformations. Please see <a href="integration-tuning#application-server-threads">Reduce the
                    number of concurrent processing threads</a>.
                </p>
            </section>
            <a name="stack-traces"/>
            <section>
                <title>Orbeon Forms Java stack traces are very long. Does that mean that performance is necessarily bad?</title>
                <p>
                    Java stack traces are indeed very long in Orbeon Forms. This is due mainly to the nature
                    of XPL pipelines, which are implemented on top of the event-based SAX API.
                </p>
                <p>
                    In reality you cannot make any reasonable conclusion about performance just by
                    looking at the length of a typical stack trace: you would have in addition to
                    that to look at the pattern of execution of those methods. For example, if every
                    top-level method call was going through, say, 300 levels of method calls, this
                    would likely be an issue, but it is not the case in Orbeon Forms. The bottom line is that
                    no, the length of a stack trace does not directly correlate with poor
                    performance.
                </p>
                <p>
                    To reach valid conclusions about performance, run a tool like <a
                    href="http://jakarta.apache.org/jmeter/">Apache JMeter</a> on your application.
                </p>
            </section>
            <a name="session-sharing"/>
            <section added="2006-01-11">
                <title>Can JSP or other servlets share a session with Orbeon Forms?</title>
                <p>
                    Yes, the <a href="processors-serializers#scope-serializer">Scope serializer</a>
                    and <a href="processors-generators#scope-generator">Scope generator</a> simply
                    use the Servlet (or Portlet) session to store and retrieve information.
                </p>
            </section>
            <a name="orbeon-version"/>
            <section added="2008-01-31">
                <title>How can I know which version of Orbeon Forms I am running?</title>
                <p>
                    If you have downloaded a war of Orbeon Forms, and you would like to know exactly which version it
                    is, you can either:
                </p>
                <ul>
                    <li>
                        If you have deployed Orbeon Forms, go to the example home page; the version number will be
                        displayed at the bottom of the page. In addition, there is a <code>generator</code> meta tag in
                        the source of each page.
                    </li>
                    <li>
                        From the command line, uncompress <code>orbeon.war</code>, go to the <code>WEB-INF</code>
                        directory and run <code>java -jar orbeon-cli.jar -v</code>.
                    </li>
                </ul>
                <p>
                    The version number looks like 3.6.0.200801230314. The last part tells you exactly at what time this
                    version of Orbeon Forms was built, in UTC time. You can check if the version you have a nightly
                    build or a release by comparing that time stamp to the time stamp on the <a
                    href="http://forge.objectweb.org/project/showfiles.php?group_id=168">Orbeon Forms releases</a>.
                </p>
            </section>
        </section>
        <a name="general"/>
        <section>
            <title>Historical FAQ</title>
            <a name="name-change"/>
            <section>
                <title>Why did we rename Orbeon PresentationServer to Orbeon Forms?</title>
                <p>
                    Renaming a product is not something to be taken lightly. However we felt that:
                </p>
                <ul>
                    <li>
                        <p>
                            <i>Orbeon Forms</i> better reflects the fact that forms have been the main focus of our
                            development efforts since 2004.
                        </p>
                    </li>
                    <li>
                        <p>
                            This new face will help potential users understand more easily what the platform can do for
                            them.
                        </p>
                    </li>
                    <li>
                        <p><i>Orbeon Forms</i> is just an easier name to remember!</p>
                    </li>
                </ul>
                <p>
                    We were encouraged in this decision by the fact that almost all current users build complex web forms
                    using our Ajax-based XForms engine. The name change also conveys that we plan to keep focusing on
                    form-related capabilities in the future.
                </p>
                <p>
                    It is important to precise the following:
                </p>
                <ul>
                    <li>
                        <p>
                            <i>Orbeon Forms</i> is simply the new name of Orbeon PresentationServer, not a different
                            product.
                        </p>
                    </li>
                    <li>
                        <p>
                            Other XML technologies like XSLT and XML pipelines remain an important part of the
                            platform.
                        </p>
                    </li>
                    <li>
                        <p>And of course, <i>Orbeon Forms</i> remains an open source solution!</p>
                    </li>
                </ul>
            </section>
            <a name="oxf"/>
            <section added="2007-01-15">
                <title>What is OXF?</title>
                <p>
                    OXF was the name of Orbeon Forms before it was open sourced in 2004. For backward compatibility, the
                    string "oxf" still persists in a few places, including:
                </p>
                <ul>
                    <li>
                        <p>As XML namespace prefix for built-in XPL processors.</p>
                    </li>
                    <li>
                        <p>As part of built-in XML namespace URIs.</p>
                    </li>
                    <li>
                        <p>As a URL scheme for accessing Orbeon Forms resources.</p>
                    </li>
                    <li>
                        <p>As a prefix for property names in <code>properties.xml</code>.</p>
                    </li>
                    <li>
                        <p>As a prefix for parameter names in <code>web.xml</code>.</p>
                    </li>
                    <li>
                        <p>As a package name in the Java source code.</p>
                    </li>
                </ul>
                <p>
                    See also <a href="#xpl-oxf-prefix">I am confused by all those oxf: prefixes. What do they mean?</a>.
                </p>
            </section>
            <a name="ops"/>
            <section added="2007-01-15">
                <title>What is OPS?</title>
                <p>
                    OPS stands for Orbeon PresentationServer and was the name of the platform before it was renamed to
                    Orbeon Forms in November 2006. The string "ops" still persists in a few places, including some
                    resource paths, and the name of the Orbeon Forms <a
                    href="http://www.orbeon.com/forms/mailing-list">mailing-list</a>.
                </p>
            </section>
        </section>
    </body>
</document>
