<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>URL Generator</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Generators are a special category of processors that have no XML data inputs, only
                outputs. They are generally used at the top of an XML pipeline to generate XML data
                from a Java object or other non-XML source.
            </p>
            <p>
                The URL generator fetches a document from a URL and produces an XML output document.
                Common protocols such as <code>http:</code>, <code>ftp:</code>, and
                <code>file:</code> are supported as well as the Orbeon Forms resource
                protocol (<code>oxf:</code>). See <link href="reference-resource-managers">Resource
                Managers</link> for more information about the <code>oxf:</code> protocol.
            </p>
        </section>
        <a name="content-type"/>
        <section>
            <title>Content Type</title>
            <p>
                The URL generator operates in several modes depending on the content type of
                the source document. The content type is determined according to the following
                priorities:
            </p>
            <ol>
                <li>
                    Use the content type in the <code>content-type</code> element of the
                    configuration if <code>force-content-type</code> is set to
                    <code>true</code>.
                </li>
                <li>
                    Use the content type set by the connection (for example, the content type
                    sent with the document by an HTTP server), if any. Note that when using the
                    <code>oxf:</code> or <code>file:</code> protocol, the connection content
                    type is never available. When using the <code>http:</code> protocol, the
                    connection content type may or may not be available depending on the
                    configuration of the HTTP server.
                </li>
                <li>
                    Use the content type in the <code>content-type</code> element of the
                    configuration, if specified.
                </li>
                <li>
                    Use <code>application/xml</code>.
                </li>
            </ol>
            <p>
                In addition, it is possible to force the mode using the <code>&lt;mode></code> configuration element:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>http://example.org/resource</url>
                            <mode>binary</mode>
                        </config>
                    </p:input>
                    <p:output name="data" id="binary-document"/>
                </p:processor>
            </xml-source>
        </section>
        <a name="xml-mode"/>
        <section>
            <title>XML Mode</title>
            <p>
                The XML mode is selected when:
            </p>
            <ul>
                <li>
                    <p>
                        the content type is <code>text/xml</code>, <code>application/xml</code>, or ends with
                        <code>+xml</code> according to the selection algorithm above
                    </p>
                </li>
                <li>
                    <p>
                        the <code>xml</code> mode is forced using the <code>&lt;mode></code> configuration element
                    </p>
                </li>
            </ul>
            <p>
                The generator fetches the specified URL and parses the XML document. If the <code>validating</code>
                option is set to <code>true</code>, a validating parser is used, otherwise a non-validating parser is
                used. Using a validating parser allows to validate a document with a DTD. In addition, the URL generator
                is able to handle XInclude inclusions during parsing. By default, it does so. This can be disabled by
                seeting the <code>handle-xinclude</code> option to <code>false</code>.
            </p>
            <p>
                Example:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>oxf:/urlgen/note.xml</url>
                            <content-type>application/xml</content-type>
                            <validating>true</validating>
                            <handle-xinclude>false</handle-xinclude>
                        </config>
                    </p:input>
                    <p:output name="data" id="xml"/>
                </p:processor>
            </xml-source>
            <note>
                <p>
                    The URL must point to a well-formed XML document. If it doesn't, an exception
                    will be raised.
                </p>
            </note>
        </section>
        <a name="html-mode"/>
        <section>
            <title>HTML Mode</title>
            <p>
                The HTML mode is selected when:
            </p>
            <ul>
                <li>
                    <p>
                        the content type is <code>text/html</code> according to the selection algorithm above
                    </p>
                </li>
                <li>
                    <p>
                        the <code>html</code> mode is forced using the <code>&lt;mode></code> configuration element
                    </p>
                </li>
            </ul>
            <p>
                In this mode, the URL generator uses <link href="http://tidy.sourceforge.net/">HTML Tidy</link> to
                transform HTML into XML. This feature is useful to later extract information from HTML using XPath.
            </p>
            <p>
                Examples:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>http://www.cnn.com</url>
                            <content-type>text/html</content-type>
                            <tidy-options>
                                <show-warnings>false</show-warnings>
                                <quiet>true</quiet>
                            </tidy-options>
                        </config>
                    </p:input>
                    <p:output name="data" id="html"/>
                </p:processor>
            </xml-source>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>oxf:/html/example.html</url>
                            <content-type>text/html</content-type>
                            <force-content-type>true</force-content-type>
                            <tidy-options>
                                <show-warnings>false</show-warnings>
                                <quiet>true</quiet>
                            </tidy-options>
                        </config>
                    </p:input>
                    <p:output name="data" id="html"/>
                </p:processor>
            </xml-source>
            <p>
                The <code>&lt;tidy-options></code> part of the configuration in the two examples above is optional.
                However, by default <code>quiet</code> is set to false, which causes HTML Tidy to output messages to
                the console when it finds invalid HTML. To prevent this, add a <code>&lt;tidy-options></code> section
                to the configuration with <code>quiet</code> set to true.
            </p>
            <p>
                Even if HTML Tidy has some tolerance for malformed HTML, you should use well-formed HTML whenever
                possible.
            </p>
        </section>
        <a name="text-mode"/>
        <section>
            <title>Text Mode</title>
            <p>
                The text mode is selected when:
            </p>
            <ul>
                <li>
                    <p>
                        the content type according to the selection algorithm above starts with <code>text/</code> and
                        is different from <code>text/html</code> or <code>text/xml</code>, for example
                        <code>text/plain</code>
                    </p>
                </li>
                <li>
                    <p>
                        the <code>text</code> mode is forced using the <code>&lt;mode></code> configuration element
                    </p>
                </li>
            </ul>
            <p>
                In this mode, the URL generator reads the input as a text file and produces an XML document containing
                the text read.
            </p>
            <p>
                Example:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>oxf:/list.txt</url>
                            <content-type>text/plain</content-type>
                        </config>
                    </p:input>
                    <p:output name="data" id="text"/>
                </p:processor>
            </xml-source>
            <p>
                Assume the input document contains the following text:
            </p>
            <code>
                This is line one of the input document!<br/>
                This is line two of the input document!<br/>
                This is line three of the input document!
            </code>
            <p>
                The resulting document consists of a <code>document</code> root element
                containing the text according to the <a
                href="reference-formats#text-documents">text document format</a>. An
                <code>xsi:type</code> attribute is also present, as well as a
                <code>content-type</code> attribute:
            </p>
            <xml-source>
<document xsi:type="xs:string" content-type="text/plain">
This is line one of the input document!
This is line two of the input document!
This is line three of the input document!
</document>
            </xml-source>
            <note>
                <p>
                    The URL generator performs streaming. It generates a stream of short character
                    SAX events. It is therefore possible to generate an "infinitely" long document
                    with a constant amount of memory, assuming the generator is connected to other
                    processors that do not require storing the entire stream of data in memory, for
                    example the <a href="processors-sql#binary-data">SQL processor</a> (with an
                    appropriate configuration to stream BLOBs), or the <a
                    href="processors-serializers-http">HTTP serializer</a>.
                </p>
            </note>
        </section>
        <a name="binary-mode"/>
        <section>
            <title>Binary Mode</title>
            <p>
                The binary mode is selected when:
            </p>
            <ul>
                <li>
                    <p>
                        the content type is neither one of the XML content types nor one of the <code>text/*</code>
                        content types
                    </p>
                </li>
                <li>
                    <p>
                        the <code>binary</code> mode is forced using the <code>&lt;mode></code> configuration element
                    </p>
                </li>
            </ul>
            <p>
                In this mode, the URL generator uses a Base64 encoding to transform binary content into XML according
                to the <a href="reference-formats#binary-documents">binary document format</a>. For example:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>oxf:/my-image.jpg</url>
                            <content-type>image/jpeg</content-type>
                        </config>
                    </p:input>
                    <p:output name="data" id="image-data"/>
                </p:processor>
            </xml-source>
            <p>
                The resulting document consists of a <code>document</code> root node containing
                character data encoded with Base64. An <code>xsi:type</code> attribute is also
                present, as well as a <code>content-type</code> attribute, if found:
            </p>
            <xml-source>
<document xsi:type="xs:base64Binary" content-type="image/jpeg">
/9j/4AAQSkZJRgABAQEBygHKAAD/2wBDAAQDAwQDAwQEBAQFBQQFBwsHBwYGBw4KCggLEA4R
...
KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//2Q==
</document>
            </xml-source>
            <note>
                <p>
                    The URL generator performs streaming. It generates a stream of short character
                    SAX events. It is therefore possible to generate an "infinitely" long document
                    with a constant amount of memory, assuming the generator is connected to other
                    processors that do not require storing the entire stream of data in memory, for
                    example the <a href="processors-sql#binary-data">SQL processor</a> (with an
                    appropriate configuration to stream BLOBs), or the <a
                    href="processors-serializers-http">HTTP serializer</a>.
                </p>
            </note>
        </section>
        <a name="character-encoding"/>
        <section>
            <title>Character Encoding</title>
            <p>
                For text and XML, the character encoding is determined as follows:
            </p>
            <ol>
                <li>
                    Use the encoding in the <code>encoding</code> element of the configuration
                    if <code>force-encoding</code> is set to <code>true</code>.
                </li>
                <li>
                    Use the encoding set by the connection (for example, the encoding sent with
                    the document by an HTTP server), if any, unless
                    <code>ignore-connection-encoding</code> is set to <code>true</code> (for XML
                    documents, precedence is given to the connection encoding as per RFC
                    3023). Note that when using the <code>oxf:</code> or <code>file:</code>
                    protocol, the connection encoding is never available. When using the
                    <code>http:</code> protocol, the connection encoding may or may not be
                    available depending on the configuration of the HTTP server. The encoding is
                    specified along with the content type in the <code>content-type</code>
                    header, for example: <code>content-type: text/html;
                    charset=iso-8859-1</code>.
                </li>
                <li>
                    Use the encoding in the <code>encoding</code> element of the configuration,
                    if specified.
                </li>
                <li>
                    For XML, the character encoding is determined automatically by the XML
                    parser.
                </li>
                <li>For text, including HTML: use the default of iso-8859</li>
            </ol>
            <p>
                When reading XML documents, the preferred method of determining the character
                encoding is to let either the connection or the XML parser auto detect the
                encoding. In some instances, it may be necessary to override the encoding. For
                this purpose, the <code>force-encoding</code> and <code>encoding</code> elements
                can be used to override this default behavior, for example:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>oxf:/urlgen/note.xml</url>
                            <content-type>application/xml</content-type>
                            <encoding>iso-8859-1</encoding>
                            <force-encoding>true</force-encoding>
                        </config>
                    </p:input>
                    <p:output name="data" id="xml"/>
                </p:processor>
            </xml-source>
            <p>
                This use should be reserved for cases where it is known that a document
                specifies an incorrect encoding and it is not possible to modify the document.
            </p>
            <p>
                HTML example:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>http://www.cnn.com</url>
                            <content-type>text/html</content-type>
                            <encoding>iso-8859-1</encoding>
                        </config>
                    </p:input>
                    <p:output name="data" id="html"/>
                </p:processor>
            </xml-source>
            <p>
                Note that only the following encodings are supported for HTML documents:
            </p>
            <ul>
                <li>iso-8859-1</li>
                <li>utf-8</li>
            </ul>
            <p>
                Also note that use of the HTML <code>&lt;meta></code> tag to specify the
                encoding from within an HTML document is not supported.
            </p>
        </section>
        <a name="http-headers"/>
        <section>
            <title>HTTP Headers</title>
            <p>
                When retrieving a document from an HTTP server, you can optionally specify the
                headers sent to the server by adding one or more <code>header</code> elements,
                as illustrated in the example below:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>http://www.cnn.com</url>
                            <content-type>text/html</content-type>
                            <header>
                                <name>User-Agent</name>
                                <value>Mozilla/5.0</value>
                            </header>
                            <header>
                                <name>Accept-Language</name>
                                <value>en-us,fr-fr</value>
                            </header>
                        </config>
                    </p:input>
                    <p:output name="data" id="html"/>
                </p:processor>
            </xml-source>
            <p>
                In addition, you can provide a list of space-separated header names with the
                <code>forward-headers</code> element. Any header listed is automatically forwarded if it exists in the
                incoming request:
            </p>
            <xml-source>
                <forward-headers>Authorization SM_USER</forward-headers>
            </xml-source>
            <p>
                Headers specified with the <code>header</code> element have precedence over
                <code>forward-headers</code>.
            </p>
        </section>
        <a name="cache-control"/>
        <section>
            <title>Cache Control</title>
            <p>
                It is possible to configure whether the URL generator caches documents locally
                in the Orbeon Forms cache. By default, it does. To disable caching, use
                the <code>cache-control/use-local-cache</code> element, for example:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>http://www.cnn.com</url>
                            <content-type>text/html</content-type>
                            <cache-control>
                                <use-local-cache>false</use-local-cache>
                            </cache-control>
                        </config>
                    </p:input>
                    <p:output name="data" id="html"/>
                </p:processor>
            </xml-source>
            <p>
                Using the local cache causes the URL generator to check if the document is in
                the Orbeon Forms cache first. If it is, its validity is checked with the
                protocol handler (looking at the last modified date for files, the
                <code>last-modified</code> header for http, etc.). If the cached document is
                valid, it is used. Otherwise, it is fetched and put in the cache.
            </p>
            <p>
                When the local cache is disabled, the document is never revalidated and always
                fetched.
            </p>
        </section>
        <a name="relative-urls"/>
        <section>
            <title>Relative URLs</title>
            <p>
                URLs passed to the URL generator can be relative. For example, consider the
                following pipeline fragment declared in a file called
                <code>oxf:/my-pipelines/backend/import.xpl</code>:
            </p>
            <xml-source>
                <p:processor name="oxf:url-generator">
                    <p:input name="config">
                        <config>
                            <url>../../documents/claim.xml</url>
                        </config>
                    </p:input>
                    <p:output name="data" id="file"/>
                </p:processor>
            </xml-source>
            <p>
                In this case, the URL resolves to:
                <code>oxf:/documents/claim.xml</code>.
            </p>
        </section>
    </body>
</document>
