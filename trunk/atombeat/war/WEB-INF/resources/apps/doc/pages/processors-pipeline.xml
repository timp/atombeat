<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Pipeline Processor</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                The Pipeline processor provides support for sub-pipelines in XPL. It allows XPL
                programs to be used and manipulated like XML processors. It allows building the
                equivalent of functions and procedures in other programming languages.
            </p>
        </section>
        <section>
            <title>Inputs and Outputs</title>
            <table>
                <tr>
                    <th>Type</th>
                    <th>Name</th>
                    <th>Purpose</th>
                    <th>Mandatory</th>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td>
                        <code>config</code>
                    </td>
                    <td>Configuration following the <a href="reference-xpl-pipelines">XPL syntax</a></td>
                    <td align="center">Yes</td>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td>User-defined inputs</td>
                    <td>
                        User-defined inputs accessible from the called XPL pipeline with
                        <code>p:param</code>.
                    </td>
                    <td align="center">No</td>
                </tr>
                <tr>
                    <td align="center">Output</td>
                    <td>User-defined outputs</td>
                    <td>
                        User-defined outputs accessible from the called XPL pipeline with
                        <code>p:param</code>.
                    </td>
                    <td align="center">No</td>
                </tr>
            </table>
        </section>
        <section>
            <title>Example of Use</title>
            <p>
                Like any XML processor, the Pipeline processor is used from within an XPL pipeline.
                It is important to make a distinction between the <i>calling XPL pipeline</i>, which
                is the pipeline making use of the Pipeline processor, and the <i>called XPL
                pipeline</i>, which is the sub-pipeline called by the calling pipeline. This is
                similar to other programming language where, for example, a function calls another
                function.
            </p>
            <p>
                This is an example of using the Pipeline processor in a calling XPL pipeline to
                call a sub-pipeline:
            </p>
            <xml-source>
                <p:processor name="oxf:pipeline">
                    <comment> The config input provides the declaration of the sub-pipeline </comment>
                    <p:input name="config" href="get-categories.xpl"/>
                    <comment> The query input is an optional input that allows passing an XML document to the query input of the sub-pipeline </comment>
                    <p:input name="query">
                        <query>
                            <username>jdoe</username>
                            <blog-id>123456</blog-id>
                        </query>
                    </p:input>
                    <comment> The categories output is an optional output that allows reading the categories output of the sub-pipeline </comment>
                    <p:output name="categories" id="resulting-categories"/>
                </p:processor>
            </xml-source>
            <note>
                In this example the <code>config</code> input is contained in a separate resource
                file called <code>get-categories.xpl</code>. Because XPL configurations are usually
                fairly long, this is often the preferred way of referring to a pipeline. But as
                usual with XPL, it is also possible to inline the content of inputs (as the
                <code>query</code> input above shows), or to refer to a dynamically-generated XML
                document.
            </note>
        </section>
        <section>
            <title>Configuration</title>
            <p>
                The <code>config</code> input must follow the <a href="reference-xpl-pipelines">XPL
                syntax</a>. For example the <code>get-categories.xpl</code> sub-pipeline in the
                example above can contain:
            </p>
            <xml-source>
                <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                          xmlns:oxf="http://www.orbeon.com/oxf/processors"
                          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          xmlns:xs="http://www.w3.org/2001/XMLSchema"
                          xmlns:xdb="http://orbeon.org/oxf/xml/xmldb"
                          xmlns:xu="http://www.xmldb.org/xupdate">

                    <p:param type="input" name="query" schema-href="get-categories-query.rng"/>
                    <p:param type="output" name="categories"  schema-href="get-categories-result.rng"/>

                    <p:processor name="oxf:xslt">
                        <p:input name="data" href="#query"/>
                        <p:input name="config">
                            <xdb:query collection="/db/orbeon/blog-example/blogs" create-collection="true" xsl:version="2.0">
                                xquery version "1.0";
                                <categories>
                                    {
                                    for $i in (/blog[username = '<xsl:value-of select="/query/username"/>'
                                               and blog-id = '<xsl:value-of select="/query/blog-id"/>'])[1]/categories/category
                                    return
                                        <category>
                                            <name>{xs:string($i/name)}</name>
                                            <id>{count($i/preceding-sibling::category) + 1}</id>
                                        </category>
                                    }
                                </categories>
                            </xdb:query>
                        </p:input>
                        <p:output name="data" id="xmldb-query"/>
                    </p:processor>

                    <p:processor name="oxf:xmldb-query">
                        <p:input name="datasource" href="../datasource.xml"/>
                        <p:input name="query" href="#xmldb-query"/>
                        <p:output name="data" ref="categories"/>
                    </p:processor>

                </p:config>
            </xml-source>
        </section>
        <section>
            <title>Optional Inputs</title>
            <p>
                Optional inputs allow passing XML documents to sub-pipeline. The example
                sub-pipeline above requires a <code>query</code> input:
            </p>
            <xml-source>
                <p:param type="input" name="query" schema-href="get-categories-query.rng"/>
            </xml-source>
            <p>
                The caller must therefore pass an XML document that will be received by the
                sub-pipeline. This is done by setting, on the Pipeline processor, an input with name
                <code>query</code>:
            </p>
            <xml-source>
                <p:processor name="oxf:pipeline">
                    <p:input name="query">
                        ...
                    </p:input>
                </p:processor>
            </xml-source>
            <note>
                Because the <code>config</code> input of the Pipeline processor is used to provide
                the XPL pipeline, a sub-pipeline should not expose a <code>config</code> input, as
                it won't be possible to connect that input.
            </note>
            <p>
                Other inputs can similarly be passed to the sub-pipeline, simply by connecting
                inputs on the Pipeline processor that match the names of the inputs declared by the
                sub-processor.
            </p>
        </section>
        <section>
            <title>Optional Outputs</title>
            <p>
                Optional outputs allow retrieving XML documents produced by a sub-pipeline. The
                example sub-pipeline above requires a <code>categories</code> output:
            </p>
            <xml-source>
                <p:param type="output" name="categories"  schema-href="get-categories-result.rng"/>
            </xml-source>
            <p>
                The caller, in order to read the <code>categories</code> output of the sub-pipeline,
                must set, on the Pipeline processor, an output with name <code>categories</code>:
            </p>
            <xml-source>
                <p:processor name="oxf:pipeline">
                    <p:output name="categories" id="resulting-categories"/>
                </p:processor>
            </xml-source>
            <p>
                As usual with XPL, the <code>id</code> attribute provided on the output is chosen by
                the user. Here, we use a <code>resulting-categories</code> identifier.
            </p>
            <p>
                Other outputs of the sub-pipeline can similarly be read, simply by connecting
                outputs on the Pipeline processor that match the names of the outputs declared by
                the sub-processor.
            </p>
        </section>
    </body>
</document>
