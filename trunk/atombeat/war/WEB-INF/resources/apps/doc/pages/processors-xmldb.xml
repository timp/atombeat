<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
        xmlns:xforms="http://www.w3.org/2002/xforms"
        xmlns:xu="http://www.xmldb.org/xupdate"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:xdb="http://orbeon.org/oxf/xml/xmldb">
    <header>
        <title>XML Databases</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                XML databases allow you to easily store, index and query XML documents. They are especially useful when
                dealing with <i>document-centric</i> applications, where the structure cannot be mapped naturally to a
                relational database.
            </p>
            <p>
                Orbeon Forms provides processors to integrate with Tamino XML Server databases as well as databases that support
                the XML:DB API, such as <a href="http://exist.sourceforge.net/">eXist</a>.
            </p>
            <note>
                <p>
                    You are encouraged to use REST APIs instead of these processors whenever possible, either directly
                    from <a href="reference-xforms-guide">XForms</a> (typically using XForms'
                    <code>&lt;xforms:submission></code>, which supports REST since XForms 1.1) or with the <a
                    href="processors-submission">XForms Submission processor</a>, which exposes
                    <code>&lt;xforms:submission></code> to XML pipelines. The eXist XML database, for example, exposes a
                    REST API.
                </p>
            </note>
        </section>
        <a name="exist"/>
        <section>
            <title>eXist</title>
            <a name="api"/>
            <section>
                <title>API</title>
                <p>
                    The eXist database can be accessed through the XML:DB API or through a REST Web API:
                </p>
                <ul>
                    <li>
                        The REST API is a web API to access the database through HTTP with the methods GET, POST, PUT,
                        and DELETE. You can call the eXist REST API directly from XForms. You can also call the
                        eXist REST API from XPL using the <a href="processors-submission">XForms Submission
                        processor</a>.
                    </li>
                    <li>
                        The XML:DB API is a Java API, which you can call from XPL using the XML:DB processors provided
                        by Orbeon Forms.
                    </li>
                </ul>
                <a name="rest"/>
                <section>
                    <title>The REST API from XPL</title>
                    <p>
                        The example below uses <a href="processors-submission">XForms Submission processor</a> to  call
                        to the eXist REST API from XPL:
                    </p>
                    <xml-source show-namespaces="false">
                        <p:processor name="oxf:xforms-submission">
                            <p:input name="submission">
                                <xforms:submission method="post"
                                    action="http://localhost:8080/ops/direct/xforms-translate/post"/>
                            </p:input>
                            <p:input name="request">
                                <translation>
                                    <source>This is a table.</source>
                                    <language-pair>en|fr</language-pair>
                                </translation>
                            </p:input>
                            <p:output name="response" ref="data"/>
                        </p:processor>
                    </xml-source>
                </section>
                <a name="xmldb"/>
                <section>
                    <title>The XML:DB API</title>
                    <p>
                        XML:DB is a Java API for XML databases, just like JDBC is a Java API for relational databases.
                        The XML:DB processor interface with the XML:DB API and so may be used with any XML databases
                        that implements XML:DB, including eXist.
                    </p>
                    <p>
                        There are 4 different XML:DB processors, for querying, updating, deleting, and inserting data in
                        the database. All 4 processors take 2 inputs: <code>datasource</code> and <code>query</code>.
                        The <code>datasource</code> input points to a description of the database. For instance, to
                        connect to an embedded eXist, use:
                    </p>
                    <xml-source show-namespaces="false">
                        <datasource>
                            <driver-class-name>org.exist.xmldb.DatabaseImpl</driver-class-name>
                            <uri>xmldb:exist:///</uri>
                            <username>admin</username>
                            <password>admin</password>
                        </datasource>
                    </xml-source>
                    <p>
                        To connect to eXist deployed as a servlet, use:
                    </p>
                    <xml-source show-namespaces="false">
                        <datasource>
                            <driver-class-name>org.exist.xmldb.DatabaseImpl</driver-class-name>
                            <uri>xmldb:exist://localhost:9999/exist/xmlrpc</uri>
                            <username>admin</username>
                            <password>admin</password>
                        </datasource>
                    </xml-source>
                    <p>
                        The 4 examples below show how to use the XML:DB query, update, delete, and insert processors.
                    </p>
                    <xml-source show-namespaces="false">
                        <p:processor name="oxf:xmldb-query">
                            <p:input name="datasource" href="datasource.xml"/>
                            <p:input name="query">
                                <xdb:query collection="/db/orbeon/blog-example/blogs" create-collection="true"
                                        xmlns:xdb="http://orbeon.org/oxf/xml/xmldb">
                                    xquery version "1.0";
                                    <company>
                                        {
                                        for $d in /company/department return
                                        <department employee-count="{count($d/employee)}"/>
                                        }
                                    </company>
                                </xdb:query>
                            </p:input>
                            <p:output name="data" ref="categories"/>
                        </p:processor>
                    </xml-source>
                    <xml-source show-namespaces="false">
                        <p:processor name="oxf:xmldb-update">
                            <p:input name="datasource" href="datasource.xml"/>
                            <p:input name="query">
                                <xdb:update collection="/db/orbeon/bizdoc-example"
                                        xmlns:xdb="http://orbeon.org/oxf/xml/xmldb">
                                    <xu:modifications version="1.0">
                                        <xu:update select="/document-info[document-id = '123']/document">
                                            <something/>
                                        </xu:update>
                                    </xu:modifications>
                                </xdb:update>
                            </p:input>
                        </p:processor>
                    </xml-source>
                    <xml-source show-namespaces="false">
                        <p:processor name="oxf:xmldb-delete">
                            <p:input name="datasource" href="datasource.xml"/>
                            <p:input name="query">
                                <xdb:delete collection="/db/ops/dmv-example"
                                        xmlns:xdb="http://orbeon.org/oxf/xml/xmldb">
                                    /document-info[document-id = '123']
                                </xdb:delete>
                            </p:input>
                        </p:processor>
                    </xml-source>
                    <xml-source show-namespaces="false">
                        <p:processor name="oxf:xmldb-insert">
                            <p:input name="datasource" href="datasource.xml"/>
                            <p:input name="query">
                                <xdb:insert collection="/db/ops/dmv-example"/>
                            </p:input>
                            <p:input name="data" href="#document-info"/>
                        </p:processor>
                    </xml-source>
                </section>
            </section>
            <a name="how-to"/>
            <section>
                <title>How-To</title>
                <a name="named-file-xmldb"/>
                <section>
                    <title>Create a Named File with the XML:DB Processor</title>
                    <p>
                        When using the insert processor, you cannot specify the name of the "file" that gets created in
                        eXist. The XML:DB API does not provide a facility to specify the name of the resource that gets
                        created in the database. So when using XML:DB, you need to call the
                        <code>oxf:xmldb-query</code> processor and the <code>xmldb:store()</code> extension function in
                        your query. If the collection where you want to add the document does not exist yet, you will
                        also need to use the <code>xmldb-create-collection()</code> function.
                    </p>
                    <p>
                        Calling the <code>oxf:xmldb-query</code> processor as in the code below will create a
                        collection <code>myCollection</code> and a file in that collection called
                        <code>myFile.xml</code>. The file will just have a root element <code>&lt;root/></code>.
                    </p>
                    <xml-source show-namespaces="false">
                        <p:processor name="oxf:xmldb-query">
                            <p:input name="datasource" href="datasource.xml"/>
                            <p:input name="query">
                                <xdb:query xmlns:xdb="http://orbeon.org/oxf/xml/xmldb">
                                    xmldb:create-collection('/db', 'myCollection'),
                                    xmldb:store('/db/myCollection', 'myFile.xml', <gaga/>)
                                </xdb:query>
                            </p:input>
                            <p:output name="data" ref="categories"/>
                        </p:processor>
                    </xml-source>
                </section>
                <a name="named-file-rest"/>
                <section>
                    <title>Create a Named File with the REST API</title>
                    <p>
                        With the REST API, to create a "file" <code>/db/myCollection/myFile.xml</code>, you PUT the
                        XML data for you file to the URL <code>/db/myCollection/myFile.xml</code>. You can do this
                        with an XForms submission, directly from XForms, or by calling the <a
                        href="processors-submission">XForms submission processor</a>, as in the example below:
                    </p>
                    <xml-source show-namespaces="false">
                        <p:config>
                            <p:processor name="oxf:xforms-submission">
                                <p:input name="submission">
                                    <xforms:submission method="put"
                                        action="/exist/rest/db/myCollection/myFile.xml"/>
                                </p:input>
                                <p:input name="request">
                                    <gaga/>
                                </p:input>
                                <p:output name="response" id="dummy"/>
                            </p:processor>
                            <p:processor name="oxf:null-serializer">
                                <p:input name="data" href="#dummy"/>
                            </p:processor>
                        </p:config>
                    </xml-source>
                </section>
                <a name="exist-command-line"/>
                <section>
                    <title>Execute Queries from The Command Line</title>
                    <p>
                        It is sometimes convenient to run queries from the command line. The method below uses the
                        eXist REST API, the same that is used if you access eXist directly from XForms.
                    </p>
                    <ul>
                        <li>
                            You first need to install curl. If you are running UNIX, curl might already be installed,
                            and if it isn't, look for the curl package for your UNIX distribution. On Windows, you can
                            <a href="http://curl.haxx.se/">download</a> an executable with no dependencies of any
                            library (no need for cygwin).
                        </li>
                        <li>
                            Create an XML file that contains your query, for instance:
                            <xml-source>
                                <exist:query xmlns:exist="http://exist.sourceforge.net/NS/exist" max="0">
                                    <exist:text>
                                        <![CDATA[
                                            declare namespace SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/";
                                            count(/*)
                                        ]]>
                                    </exist:text>
                                </exist:query>
                            </xml-source>
                        </li>
                        <li>
                            Assuming the context for your application is <code>/ops</code>, the file that contains your
                            query is <code>query.xml</code>, the web server is running on port 8080, and you want
                            to run the query on the collection <code>yourCollection</code>, execute the command line:
                            <p>
                                <code>curl http://localhost:8080/ops/exist/rest/db/yourCollection
                                -H "Content-Type: application/xml" --data-binary @query.xml</code>
                            </p>
                        </li>
                    </ul>
                    <p>
                        For more on curl, see the <a href="http://www.hmug.org/man/1/curl.php">curl man page</a>.
                    </p>
                </section>
            </section>
        </section>
        <a name="tamino"/>
        <section>
            <title>Tamino XML Server 4.1</title>
            <p>
                Software AG's <a href="http://www.softwareag.com/tamino/">Tamino</a> provides a
                complete XML storage solution. Orbeon Forms allows you to easily store, query, update, and
                delete documents in Tamino. The following sections describe the four Orbeon Forms processors
                for Tamino.
            </p>
            <section>
                <title>Configuration</title>
                <p>
                    All Tamino processors have a common <code>config</code> input, describing the
                    database connection, collection and how it is handled.
                </p>
                <p>
                    The configuration of the Tamino processors can be done in two ways: either system-wide via the <link
                    href="reference-properties">Properties</link>, or locally for a specific instance of the processor
                    through the <code>config</code> input. The local configuration takes precedence if available.
                </p>
                <note>
                    <p>
                        The <code>collection</code> configuration elements cannot be specified
                        system-wide.
                    </p>
                </note>
                <section>
                    <title>
                        <code>config</code> Input
                    </title>
                    <p>
                        The <code>config</code> input document specifies the URL of the Tamino
                        server, the credentials to use when connecting, the collection to
                           access, isolation degree and locking modes. The following table describes the configuration elements.
                 </p>
                    <p>
                        <table ca="|l|p{0.6\textwidth}|">
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                            </tr>
                            <tr>
                                <td>
                                    <code>url</code>
                                </td>
                                <td>Tamino database URL.</td>
                            </tr>
                            <tr>
                                <td>
                                    <code>username</code>
                                </td>
                                <td>Username to authenticate with the server</td>
                            </tr>
                            <tr>
                                <td>
                                    <code>password</code>
                                </td>
                                <td>Password to authenticate with the server</td>
                            </tr>
                            <tr>
                                <td>
                                    <code>collection</code>
                                </td>
                                <td>XML Collection to use</td>
                            </tr>
                            <tr>
                                <td>
                                    <code>isolation-degree</code>
                                </td>
                                <td>Type of isolation degree used (optional). One of<br/><code>
                                    uncommittedDocument<br/>
                                    committedCommand<br/>
                                    serializable<br/>
                                    stableDocument<br/>
                                    stableCursor</code>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <code>lock-mode</code>
                                </td>
                                <td>Type of locking mode used (optional). One of<br/><code>
                                    protected<br/>
                                    shared<br/>
                                    unprotected</code>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <code>lock-wait</code>
                                </td>
                                <td>'yes' if the query should wait for locked records to become free. (optional)</td>
                            </tr>
                        </table>
                    </p>
                    <p>
                        This RelaxNG schema describes the expected
                        document.
                    </p>
                    <xml-source>
                        <element name="config" xmlns="http://relaxng.org/ns/structure/1.0"
                            datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
                            <interleave>
                                <optional>
                                    <element name="url">
                                        <data type="anyURI"/>
                                    </element>
                                </optional>
                                <optional>
                                    <element name="username">
                                        <data type="string"/>
                                    </element>
                                </optional>
                                <optional>
                                    <element name="password">
                                        <data type="string"/>
                                    </element>
                                </optional>
                                <element name="collection">
                                    <data type="string"/>
                                </element>
                                <optional>
                                    <element name="isolation-degree">
                                        <choice>
                                            <value>uncommittedDocument</value>
                                            <value>committedCommand</value>
                                            <value>stableCursor</value>
                                            <value>stableDocument</value>
                                            <value>serializable</value>
                                        </choice>
                                    </element>
                                </optional>
                                <optional>
                                    <element name="lock-mode">
                                        <choice>
                                            <value>unprotected</value>
                                            <value>shared</value>
                                            <value>protected</value>
                                        </choice>
                                    </element>
                                </optional>
                                <optional>
                                    <element name="lock-wait">
                                        <choice>
                                            <value>yes</value>
                                            <value>no</value>
                                        </choice>
                                    </element>
                                </optional>
                            </interleave>
                        </element>
                    </xml-source>
                </section>
                <a name="tamino-properties"/>
                <section>
                    <title>System-Wide Configuration</title>
                    <p>
                        The Tamino processors can be configured in the <link href="reference-properties">properties
                        file</link>, allowing all instances to share the same configuration. The following processor
                        properties are allowed:
                    </p>
                    <table>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                <code>url</code>
                            </td>
                            <td>
                                <code>anyURI</code>
                            </td>
                            <td>Tamino Server URL.</td>
                        </tr>
                        <tr>
                            <td>
                                <code>username</code>
                            </td>
                            <td>
                                <code>string</code>
                            </td>
                            <td>Username to authenticate with the server.</td>
                        </tr>
                        <tr>
                            <td>
                                <code>password</code>
                            </td>
                            <td>
                                <code>string</code>
                            </td>
                            <td>Password to authenticate with the server.</td>
                        </tr>
                    </table>
                    <p>
                        These properties are set as follows:
                    </p>
                    <xml-source>
                        <property as="xs:anyURI" processor-name="oxf:tamino-query" name="url" value="http://localhost/tamino/welcome_4_1_4"/>
                        <property as="xs:string" processor-name="oxf:tamino-query" name="username" value="..."/>
                        <property as="xs:string" processor-name="oxf:tamino-query" name="password" value="..."/>
                    </xml-source>
                    <p>
                        The following global properties are allowed:
                    </p>
                    <table>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td><code>oxf.tamino.isolation-degree</code></td>
                            <td><code>string</code></td>
                            <td>
                                Isolation degree. Possible values are:
                                <code>uncommittedDocument</code>, <code>committedCommand</code>,
                                <code>stableCursor</code>, <code>stableDocument</code>,
                                <code>serializable</code>. See the Tamino documentation for more
                                details on the isolation degree.
                            </td>
                        </tr>
                        <tr>
                            <td><code>oxf.tamino.lock-mode</code></td>
                            <td><code>string</code></td>
                            <td>
                                Lock mode. Possible values are <code>unprotected</code>,
                                <code>shared</code>, <code>protected</code>. See the Tamino
                                documentation for more details on the lock mode.
                            </td>
                        </tr>
                        <tr>
                            <td><code>oxf.tamino.lock-wait</code></td>
                            <td><code>string</code></td>
                            <td>
                                Lock Wait Mode. If 'yes' then the query will wait for locked
                                records to become free before returning the results.
                            </td>
                        </tr>
                    </table>
                    <p>
                        These properties as set as follows:
                    </p>
                    <xml-source>
                        <property as="xs:string" name="oxf.tamino.isolation-degree" value="..."/>
                        <property as="xs:string" name="oxf.tamino.lock-mode" value="..."/>
                        <property as="xs:string" name="oxf.tamino.lock-wait" value="..."/>
                    </xml-source>
                </section>
            </section>
            <section>
                <title>Queries</title>
                <p>
                    The <code>oxf:tamino-query</code> processor processes queries either using
                    Tamino's X-Query or W3C XQuery.
                </p>
                <section>
                    <title>
                        <code>data</code> Input
                    </title>
                    <p>
                        The <code>data</code> input contains only the root element and the query.
                        The root element is either <code>query</code> for an X-Query query, or
                        <code>xquery</code> for an XQuery query.
                    </p>
                </section>
                <section>
                    <title>
                        <code>data</code> Output
                    </title>
                    <p>
                        The processor sends the result of the query in the <code>data</code> output.
                        The root element is always <code>result</code>.
                    </p>
                </section>
                <section>
                    <title>X-Query Example</title>
                    <p>
                        <xml-source>
                            <p:processor name="oxf:tamino-query">
                                <p:input name="config">
                                    <config>
                                        <url>http://localhost/tamino/welcome_4_1_4</url>
                                        <username>tamino</username>
                                        <password>password</password>
                                        <collection>encyclopedia</collection>
                                    </config>
                                </p:input>
                                <p:input name="data">
                                    <query>
                                        /jazzMusician[@ID="ParkerCharlie"]
                                    </query>
                                </p:input>
                                <p:output name="data" id="result"/>
                            </p:processor>
                        </xml-source>
                    </p>
                </section>
                <section>
                    <title>XQuery Example</title>
                    <p>
                        <xml-source>
                            <p:processor name="oxf:tamino-query">
                                <p:input name="config">
                                    <config>
                                        <url>http://localhost/tamino/welcome_4_1_4</url>
                                        <username>tamino</username>
                                        <password>password</password>
                                        <collection>encyclopedia</collection>
                                    </config>
                                </p:input>
                                <p:input name="data">
                                    <xquery>
                                        for $m in input()/jazzMusician,
                                        $c in input()/collaboration,
                                        $a in input()/album
                                        where $m/@ID= $c/jazzMusician  and $c/result = $a/productNo
                                        return
                                        <musician>
                                            {$m/name}
                                            <album>{$a/title}</album>
                                        </musician>

                                    </xquery>
                                </p:input>
                                <p:output name="data" id="result"/>
                            </p:processor>
                        </xml-source>
                    </p>
                </section>
            </section>
            <section>
                <title>Insertions</title>
                <p>
                    The <code>oxf:tamino-insert</code> processor allows you to insert a document in
                    Tamino.
                </p>
                <note>
                    You need to make sure that the document conforms to one of the registered
                    schemas in the current collection. If Tamino can't validate the document, an
                    exception is thrown.
                </note>
                <section>
                    <title>
                        <code>data</code> Input
                    </title>
                    <p>
                        The
                        <code>data</code> input contains the document to insert.
                    </p>
                </section>
                <section>
                    <title>Example</title>
                    <xml-source>
                        <p:processor name="oxf:tamino-insert">
                            <p:input name="config">
                                <config>
                                    <url>http://localhost/tamino/welcome_4_1_4</url>
                                    <username>tamino</username>
                                    <password>password</password>
                                    <collection>encyclopedia</collection>
                                </config>
                            </p:input>
                            <p:input name="data">
                                <jazzMusician ID="DavisMiles" type="instrumentalist">
                                    <name>
                                        <first>Miles</first>
                                        <last>Davis</last>
                                    </name>
                                    <birthDate>1926-05-26</birthDate>
                                    <instrument>trumpet</instrument>
                                </jazzMusician>
                            </p:input>
                        </p:processor>
                    </xml-source>
                </section>
            </section>
            <section>
                <title>Deletions</title>
                <p>
                    The <code>oxf:tamino-delete</code> processor allows you to remove documents
                    from Tamino.
                </p>
                <section>
                    <title>
                        <code>data</code> Input
                    </title>
                    <p>
                        The <code>data</code> input contains the X-Query to select the document(s)
                        to be removed.
                    </p>
                </section>
                <section>
                    <title>Example</title>
                    <xml-source>
                        <p:processor name="oxf:tamino-delete">
                            <p:input name="config">
                                <config>
                                    <url>http://localhost/tamino/welcome_4_1_4</url>
                                    <username>tamino</username>
                                    <password>password</password>
                                    <collection>encyclopedia</collection>
                                </config>
                            </p:input>
                            <p:input name="data">
                               <query>
                                   /jazzMusician[@ID="DavisMiles"]
                               </query>
                            </p:input>
                        </p:processor>
                    </xml-source>
                </section>
            </section>
            <section>
                <title>Updates</title>
                <p>
                    The <code>oxf:tamino-update</code> processor allows you to update parts of
                    documents directly inside Tamino. An extension of XQuery is used for that
                    purpose. Refer to the Tamino documentation for more information.
                </p>
                <section>
                    <title>
                        <code>data</code> Input
                    </title>
                    <p>
                        The <code>data</code> input contains the XQuery expression to update one or
                        multiple nodes.
                    </p>
                </section>
                <section>
                    <title>Example</title>
                    <xml-source>
                        <p:processor name="oxf:tamino-update">
                            <p:input name="config">
                                <config>
                                    <url>http://localhost/tamino/welcome_4_1_4</url>
                                    <username>tamino</username>
                                    <password>password</password>
                                    <collection>encyclopedia</collection>
                                </config>
                            </p:input>
                            <p:input name="data">
                               <query>
                                   update replace input()/jazzMusician[@ID="ParkerCharlie"]/instrument
                                   with <instrument>piano</instrument>
                               </query>
                            </p:input>
                        </p:processor>
                    </xml-source>
                </section>
            </section>

            <section>
                <title>Transactions</title>
                <p>
                    Orbeon Forms initiates a transaction for every HTTP request, and commits
                    the transaction when the pipeline is executed normally. If an exception occurs
                    in the pipeline, the transaction in rolled back.
                </p>
            </section>
        </section>
    </body>
</document>
