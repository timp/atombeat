<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <header>
        <title>XSLT and JAXP (TrAX) Processors</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                <link href="http://www.w3.org/TR/xslt">XSLT 1.0</link> and <a
                href="http://www.w3.org/TR/2005/WD-xslt20-20050404/">XSLT 2.0</a> are languages for
                transforming XML documents into other XML documents. Orbeon Forms uses XSLT
                extensively to process XML documents.
            </p>
            <p>Orbeon Forms ships with multiple implementations of XSLT:</p>
            <ul>
                <li>Saxon 8.8 (supports XSLT 2.0 and XPath 2.0 in addition to XSLT 1.0 and XPath 1.0)</li>
                <li>Saxon 6.5.2 (supports XSLT 1.0)</li>
                <li>Xalan 2.5.1 Interpreter (supports XSLT 1.0)</li>
                <li>Xalan 2.5.1 Compiler (XSLTC) (supports XSLT 1.0)</li>
            </ul>
            <p>
                Additionally, Orbeon Forms can use any Java API for XML Processing (JAXP)
                compliant transformer.
            </p>
        </section>
        <section>
            <title>Inputs and Outputs</title>
            <table>
                <tr>
                    <th>Type</th>
                    <th>Name</th>
                    <th>Purpose</th>
                    <th>Mandatory</th>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td><code>transformer</code></td>
                    <td>
                        Specifies a concrete <link
                        href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/TransformerFactory.html">
                        <code>TransformerFactory</code></link> class name.
                    </td>
                    <td align="center">
                        Yes<br/>
                        Implicit with concrete processors.
                    </td>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td><code>attributes</code></td>
                    <td>
                        Allows setting JAXP TransformerFactory attributes.
                    </td>
                    <td align="center">
                        No<br/>
                        Implicit with <code>oxf:saxon8</code>, <code>oxf:unsafe-saxon8</code>,
                        <code>oxf:xslt</code>, <code>oxf:unsafe-xslt</code>
                    </td>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td><code>config</code></td>
                    <td>
                        The description of the transformation, typically an XSLT stylesheet.
                    </td>
                    <td align="center">Yes</td>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td><code>data</code></td>
                    <td>
                        The document to which the stylesheet is applied.
                    </td>
                    <td align="center">Yes</td>
                </tr>
                <tr>
                    <td align="center">Input</td>
                    <td>User-defined inputs</td>
                    <td>
                        User-defined inputs accessible with the XPath <code>document()</code> or
                        <code>doc()</code> functions.
                    </td>
                    <td align="center">No</td>
                </tr>
                <tr>
                    <td align="center">Output</td>
                    <td><code>data</code></td>
                    <td>
                        The result of the transformation.
                    </td>
                    <td align="center">Yes</td>
                </tr>
            </table>
        </section>
        <section>
            <title>Processor Names</title>
            <p>
                There are three generic processors: a generic JAXP (TrAX) processor, and two
                specialized XSLT processors (one for XSLT 1.0 and one for XSLT 2.0), which provides
                additional functionality related to XSLT:
            </p>
            <table>
                <tr>
                    <th>Processor Name</th>
                    <th>Language</th>
                    <th>Implementation</th>
                </tr>
                <tr>
                    <td>oxf:generic-xslt-1.0</td>
                    <td>XSLT 1.0</td>
                    <td>Generic JAXP (TrAX) XSLT 1.0 transformer (configure with <code>transformer</code> input)</td>
                </tr>
                <tr>
                    <td>oxf:generic-xslt-2.0</td>
                    <td>XSLT 2.0</td>
                    <td>Generic JAXP (TrAX) XSLT 2.0 transformer (configure with <code>transformer</code> input)</td>
                </tr>
                <tr>
                    <td>oxf:trax</td>
                    <td>Any</td>
                    <td>Generic JAXP (TrAX) transformer (configure with <code>transformer</code> input)</td>
                </tr>
            </table>
            <p>
                You usually don't use directly the generic processors. Instead, you use concrete
                processors that leverage the generic processors:
            </p>

            <table>
                <tr>
                    <th>Processor Name</th>
                    <th>Language</th>
                    <th>Implementation</th>
                </tr>
                <tr>
                    <td>oxf:xslt</td>
                    <td>XSLT 1.0 and 2.0</td>
                    <td>Saxon 8.8 with external functions disabled</td>
                </tr>
                <tr>
                    <td>oxf:unsafe-xslt</td>
                    <td>XSLT 1.0 and 2.0</td>
                    <td>Saxon 8.8 with external functions enabled</td>
                </tr>
                <tr>
                    <td>oxf:xalan</td>
                    <td>XSLT 1.0</td>
                    <td>Xalan 2.5.1 Interpreter</td>
                </tr>
                <tr>
                    <td>oxf:xsltc</td>
                    <td>XSLT 1.0</td>
                    <td>Xalan 2.5.1 Compiler</td>
                </tr>
                <tr>
                    <td>oxf:saxon</td>
                    <td>XSLT 1.0</td>
                    <td>Saxon 6.5.2</td>
                </tr>
                <tr>
                    <td>oxf:saxon8</td>
                    <td>XSLT 1.0 and 2.0</td>
                    <td>Saxon 8.8 with external functions disabled</td>
                </tr>
                <tr>
                    <td>oxf:unsafe-saxon8</td>
                    <td>XSLT 1.0 and 2.0</td>
                    <td>Saxon 8.8 with external functions enabled</td>
                </tr>
                <tr>
                    <td>oxf:xslt-1.0</td>
                    <td>XSLT 1.0</td>
                    <td>Default JAXP (TrAX) XSLT 1.0 transformer (currently Saxon 8)</td>
                </tr>
                <tr>
                    <td>oxf:xslt-2.0</td>
                    <td>XSLT 2.0</td>
                    <td>Default JAXP (TrAX) XSLT 2.0 transformer (currently Saxon 8)</td>
                </tr>
                <tr>
                    <td>oxf:pfc-xslt-1.0</td>
                    <td>XSLT 1.0</td>
                    <td>Default JAXP (TrAX) XSLT 1.0 transformer used by the <a href="reference-page-flow">Page Flow Controller</a> (currently Saxon 8)</td>
                </tr>
                <tr>
                    <td>oxf:pfc-xslt-2.0</td>
                    <td>XSLT 2.0</td>
                    <td>Default JAXP (TrAX) XSLT 2.0 transformer used by the <a href="reference-page-flow">Page Flow Controller</a> (currently Saxon 8)</td>
                </tr>
            </table>
            <p>
                The most commonly used processor is <code>oxf:xslt</code>, which provides excellent
                support for XSLT 1.0 and XSLT 2.0.
            </p>
        </section>
        <section>
            <title>Usage</title>

            <section>
                <title>Transformer Input</title>
                <p>
                    The <code>transformer</code> input is mandatory only when using the generic
                    processor: <code>oxf:generic-xslt-1.0</code>, <code>oxf:generic-xslt-2.0</code>
                    or <code>oxf:trax</code>. It is implied otherwise.
                </p>
                <p>
                    This input specifies a specific concrete subclass of <link
                    href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/TransformerFactory.html">
                    <code>TransformerFactory</code></link>. For example, you can use the TrAX
                    transformer to interface Orbeon Forms with a new hypothetical transformer
                    (MyTrans):
                    <xml-source>
                        <p:processor name="oxf:trax">
                            <p:input name="transformer">
                                <config>
                                    <class>com.mytrans.TransformerFactoryImpl</class>
                                </config>
                            </p:input>
                            <p:input name="config">
                                <mytrans>
                                    ...
                                </mytrans>
                            </p:input>
                            <p:input name="data">
                                <document>
                                    ...
                                </document>
                            </p:input>
                            <p:output name="data" id="mytrans"/>
                        </p:processor>
                    </xml-source>
                </p>
            </section>

            <section>
                <title>Attributes Input</title>
                <p>
                    The <code>attributes</code> input is optional and is used to specify JAXP
                    <code>TransformerFactory</code> attributes. It starts with a
                    <code>attributes</code> element containing a number of <code>attribute</code>
                    elements. Each element specifies a name, a type, and a value, all dependent on
                    the actual transformer implementation. Saxon does not support the same
                    attributes as Xalan, for example. The following types are supported:
                </p>
                <ul>
                    <li><code>xs:string</code>: passed as a Java String</li>
                    <li><code>xs:integer</code>: passed as a Java Integer</li>
                    <li><code>xs:boolean</code>: passed as a Java Boolean</li>
                    <li><code>xs:date</code>: passed as a Java Date</li>
                    <li><code>xs:dateTime</code>: passed as a Java Date</li>
                    <li><code>xs:anyURI</code>: passed as a Java URL</li>
                </ul>
                <p>
                    This is an example of configuration supported by Saxon:
                </p>
                <xml-source>
                    <attributes xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <attribute as="xs:boolean" name="http://saxon.sf.net/feature/allow-external-functions" value="false"/>
                        <attribute as="xs:boolean" name="http://saxon.sf.net/feature/linenumbering" value="false"/>
                        <attribute as="xs:integer" name="http://saxon.sf.net/feature/recoveryPolicy" value="2"/>
                    </attributes>
                </xml-source>
                <p>
                    The <code>attributes</code> input is implicit with <code>oxf:saxon8</code>,
                    <code>oxf:unsafe-saxon8</code>, <code>oxf:xslt</code>,
                    <code>oxf:unsafe-xslt</code>.
                </p>
            </section>
            <section>
                <title>Config Input</title>
                <p>
                    The <code>config</code> input contains a transformation, typically an XSLT
                    stylesheet. The following example shows a simple XSLT stylesheet:
                </p>
                <xml-source>
                    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:template match="/">
                            <new-root>
                                <xsl:value-of select="/root/a"/>
                                <xsl:value-of select="/root/b"/>
                            </new-root>
                        </xsl:template>
                    </xsl:stylesheet>
                </xml-source>
            </section>
            <section>
                <title>Data Input</title>
                <p>
                    The <code>data</code> input contains the source XML document. The example below
                    works with the stylesheet shown above:
                </p>
                <xml-source>
                    <root>
                        <a>a</a>
                        <b>b</b>
                    </root>
                </xml-source>
            </section>
            <section>
                <title>Data Output</title>
                <p>
                    The <code>data</code> output produces the result of the transformation. The
                    following XML is the result of the above transformation:
                </p>
                <xml-source>
                    <new-root>ab</new-root>
                </xml-source>
            </section>
            <a name="user-defined"/>
            <section>
                <title>User-Defined Inputs</title>
                <p>
                    XSLT transformers support reading <a
                    href="reference-xpl-pipelines#optional">optional user-defined inputs</a> through
                    the XSLT and XPath <code>document()</code> and <code>doc()</code> functions. For
                    example:
                </p>
                <xml-source>
                    <p:processor name="oxf:xslt">
                        <p:input name="config">
                            <address-book xsl:version="2.0">
                                <comment> Access external XML document </comment>
                                <xsl:variable name="document-1" select="doc('file:/document-1.xml')"/>
                                <comment> Access oxf:xslt processor user-defined input </comment>
                                <xsl:variable name="document-2" select="doc('input:my-input')"/>
                                <comment> ... </comment>
                            </address-book>
                        </p:input>
                        <comment> Standard oxf:xslt processor input </comment>
                        <p:input name="data" href="#some-id"/>
                        <comment> Declare oxf:xslt processor user-defined input </comment>
                        <p:input name="my-input" href="#some-other-id"/>
                        <comment> Standard oxf:xslt processor output </comment>
                        <p:output name="data" id="address-book"/>
                    </p:processor>
                </xml-source>
                <p>
                    In this example, the XPath expression <code>doc('file:/document-1.xml')</code>
                    instructs the XSLT transformer to read the document stored at
                    <code>oxf:/document-1.xml</code> and make it accessible through the variable
                    named <code>document-1</code>. This is standard XSLT and XPath 2.0.
                </p>
                <p>
                    The second variable, <code>document-2</code>, is assigned using a similar XPath
                    expression, but it uses a URI with a particular syntax: it starts with the
                    scheme <code>input:</code>. This instructs the XSLT transformer to read the
                    processor input called <code>my-input</code>. This input is connected to the
                    XSLT processor with <code>&lt;p:input name="my-input"
                    href="#some-other-id"/></code>. In this case, it is up to the user of the XSLT
                    processor to connect additional inputs as she sees fit, as long as their names
                    don't conflit with mandatory input and output names.
                </p>
                <note>
                    <p>
                        The user-defined input referenced from <code>doc('input:my-input')</code> <b>must</b> be
                        declared as an input on the <code>oxf:xslt</code> processor, as shown above. If you wish to
                        access a pipeline input using the <code>doc()</code> function, then you must first connect the
                        pipeline input to the <code>oxf:xslt</code> processor input. For example:
                    </p>
                    <xml-source>
                        <p:pipeline>
                            <comment> Pipeline input </comment>
                            <p:input name="my-pipeline-input" type="input"/>
                            <comment> XSLT transformation </comment>
                            <p:processor name="oxf:xslt">
                                <p:input name="config">
                                    <address-book xsl:version="2.0">
                                        <comment> Access oxf:xslt processor user-defined input </comment>
                                        <xsl:variable name="document-2" select="doc('input:my-input')"/>
                                        <comment> ... </comment>
                                    </address-book>
                                </p:input>
                                <comment> Standard oxf:xslt processor input </comment>
                                <p:input name="data" href="#some-id"/>
                                <comment> Connect the oxf:xslt processor input to the pipeline input </comment>
                                <p:input name="my-input" href="#my-pipeline-input"/>
                                <comment> Standard oxf:xslt processor output </comment>
                                <p:output name="data" id="address-book"/>
                            </p:processor>
                            <comment> ... </comment>
                        </p:pipeline>
                    </xml-source>
                </note>
            </section>
        </section>
        <section>
            <title>Passing Parameters to XSLT Stylesheets</title>
            <p>
                XSLT supports <code>xsl:param</code> elements at the top level of a stylesheet. They allow passing
                parameters to the stylesheet, without modifying the stylesheet itself. With API such as JAXP, a
                programmer can associate values to those parameters, making them available to the stylesheet during
                execution.
            </p>
            <p>
                XPL does not have a particular mechanism to set such stylesheet parameters, but a simple workaround
                allows setting them. Assume you have a stylesheet with a <code>start</code> parameter, in a file called
                <code>my-stylesheet.xsl</code>:
            </p>
            <xml-source>
                <xsl:transform>
                    <xsl:param name="start" select="'a1'"/>
                    <comment>...</comment>
                </xsl:transform>
            </xml-source>
            <p>
                To set the <code>start</code> parameter with XPL, simply encapsulate the
                <code>my-stylesheet.xsl</code> stylesheet as follows:
            </p>
            <xml-source>
                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#stylesheet-input"/>
                    <p:input name="config">
                        <xsl:stylesheet version="2.0">
                            <xsl:import href="my-stylesheet.xsl"/>
                            <xsl:param name="start" select="'a2'"/>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="stylesheet-output"/>
                </p:processor>
            </xml-source>
            <p>
                The rules of XSLT's <code>import</code> statement will make sure that the imported stylesheet,
                <code>my-stylesheet.xsl</code>, receives the <code>start</code> parameter with the value "a2", as
                overridden in the importing stylesheet. Of course, the value does not have to be static, it can be
                computed dynamically as well.
            </p>
            <p>
                Also note that while XPL does not have a native mechanism to pass XSLT parameters, it has a mechanism to
                pass extra documents available through the <code>doc()</code> function and the <code>input:</code>
                protocol. See <a href="#user-defined">User-Defined Inputs</a> for more information.
            </p>
        </section>
        <section>
            <title>Streaming Transformations for XML (STX)</title>

            <p>
                <link href="http://stx.sourceforge.net/">Streaming
                    Transformations for XML (STX)</link> is a one-pass transformation
                language for XML documents that builds on the Simple API for XML (SAX). STX is
                intended as a high-speed, low memory consumption alternative to XSLT. Since it does
                not require the construction of an in-memory tree, it is suitable for use in
                resource constrained scenarios.
            </p>

            <p>
                Orbeon Forms uses <link href="http://joost.sourceforge.net/">Joost</link> to
                implement a STX transformer. Its usage is similar to an XSLT transformer, using the
                processor URI <code>oxf:stx</code>. This <link href="../examples/stx">example</link>
                demonstrates a simple STX transformation.
            </p>

            <xml-source>
                <p:processor name="oxf:stx">
                    <!-- This example comes straight from the Joost distribution -->
                    <p:input name="data" href="#source"/>
                    <p:input name="config">
                        <stx:transform xmlns:stx="http://stx.sourceforge.net/2002/ns" version="1.0"
                            pass-through="all" strip-space="yes">
                        </stx:transform>
                    </p:input>
                    <p:input name="data" href="#document"/>
                    <p:output name="data" id="result"/>
                </p:processor>
            </xml-source>

        </section>
    </body>
</document>
