<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>URL Rewriting</title>
    </header>
    <body>
        <section>
            <title>Rationale</title>
            <p>
                As a Web applications developer, you often have to write URLs in your Web pages. For example, an HTML
                <code>&lt;a></code> element contains an <code>href</code> attribute specifying the destination of a
                link. The URLs you write usually end up directly unmodified in the Web browser. This causes a number of
                problems, detailed below.
            </p>
            <section>
                <title>Problems with Servlets</title>
                <p>
                    Absolute URLs (starting with a scheme such as <code>http:</code> or <code>https:</code>) are usually
                    reserved to refer to external sites or applications. But when referring to the current application,
                    relative URLs, in the form of relative paths or absolute paths, are commonly used instead. In these
                    cases, you must make sure that the URL interpreted by the Web browser and the application server
                    refers to the correct page or resource:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Relative paths:</b> such paths are interpreted by the Web browser as
                            relative to a URL base, usually the URL of the page being requested,
                            unless specified differently. For example, if a browser requests
                            <code>/orbeon/example1/page1</code>:
                        </p>
                        <p>
                            <table>
                                <tr>
                                    <th>Relative Path</th>
                                    <th>Resulting Absolute Path</th>
                                </tr>
                                <tr>
                                    <td><code>page2</code></td>
                                    <td><code>/orbeon/example1/page2</code></td>
                                </tr>
                                <tr>
                                    <td><code>../page3</code></td>
                                    <td><code>/orbeon/page3</code></td>
                                </tr>
                                <tr>
                                    <td><code>../example2/page4</code></td>
                                    <td><code>/orbeon/example2/page4</code></td>
                                </tr>
                            </table>
                        </p>
                        <p>
                            The problem: if a page is moved, all the relative paths within that page have to be
                            changed.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Absolute paths:</b> such paths start with a "/". The issue with this solution is that you
                            have to write the exact absolute path, including a servlet context path such as
                            <code>/orbeon</code>.
                        </p>
                        <p>
                            The problem: hardcoding the servlet context path in every URL makes it impossible to change
                            the servlet context without changing all the URLs in the application. To alleviate this
                            issue, you might use relative URLs, with the other problems mentioned above.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>Problems with Portlets</title>
                <p>
                    The issue is even more important with Java Portlets (JSR-168), as URLs must be generated by calling
                    a specific Java API. With page template languages such as JSP, this is done using tag libraries.
                    All the pages in an application must be modified when moved from a deployment as a Servlet to a
                    deployment as a Portlet.
                </p>
            </section>
            <section>
                <title>Solution</title>
                <p>
                    With Orbeon Forms, the solution to these issues is called <i>URL rewriting</i>. It consists in
                    transparently post-processing the URLs you write to make your life easier. This is possible thanks
                    to the Orbeon Forms Page Flow Controller epilogue, which contains a URL rewriting mechanism for
                    HTML and XHTML documents.
                </p>
            </section>
        </section>
        <a name="strategy"/>
        <section>
            <title>URL Rewriting Strategy</title>
            <p>
                This section describes the default URL rewriting implementation in Orbeon Forms. It is implemented in
                the processors <code>oxf:xhtml-rewrite</code> and <code>oxf:html-rewrite</code>.
            </p>
            <section>
                <title>What is Rewritten?</title>
                <p>
                    The <code>form</code>, <code>a</code>, <code>link</code>, <code>img</code>, <code>input</code> and
                    <code>script</code> elements are rewritten in HTML documents. Their XHTML counterparts in the
                    <code>http://www.w3.org/1999/xhtml</code> namespace are rewritten in XHTML documents. Note that:
                </p>
                <ul>
                    <li>
                        <p>
                            Absolute URLs (i.e. with a scheme) are left unmodified.
                        </p>
                    </li>
                    <li>
                        <p>
                            The special case of URLs starting with a query string (e.g. <code>?name=value</code>) is
                            handled. This last syntax is supported by most Web browsers and because of its convenience,
                            it is supported by the default rewriting algorithm as well.
                        </p>
                    </li>
                </ul>
                <note>
                    URLs are parsed by the rewriting algorithm, so you must make sure that URLs are well-formed.
                </note>
                <note>
                    Rewriting also occurs on some XForms elements. In that case, rewriting is handled by the XForms
                    engine. For details, refer to <a href="reference-xforms-guide#xforms-urls">URLs in XForms</a> in the
                    XForms documentation.
                </note>
            </section>
            <section>
                <title>Servlets</title>
                <table>
                    <tr>
                        <th>Element / Attribute</th>
                        <th>Action</th>
                    </tr>
                    <tr>
                        <td><code>form/@action</code></td>
                        <td rowspan="6">
                            <p>
                                URLs are rewritten as follows:
                            </p>
                            <ul>
                                <li>
                                    If the URL is a relative path, it is left unchanged.
                                </li>
                                <li>
                                    If the URL is an absolute path, the servlet context path is pre-pended.
                                </li>
                                <li>
                                    Absolute URLs are left unchanged.
                                </li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td><code>a/@href</code></td>
                    </tr>
                    <tr>
                        <td><code>link/@href</code></td>
                    </tr>
                    <tr>
                        <td><code>img/@src</code></td>
                    </tr>
                    <tr>
                        <td><code>input[@type='image']/@src</code></td>
                    </tr>
                    <tr>
                        <td><code>script/@src</code></td>
                    </tr>
                </table>
            </section>
            <section>
                <title>Portlets</title>
                <p>
                    With Portlets, you write your URLs as you would in a regular Servlet-based application, and the
                    rewriting processors take care of calling the Portlet API to encode the URLs. As you may know,
                    portlets make a distinction between several URL types:
                </p>
                <ul>
                    <li>
                        <p>Render URLs</p>
                    </li>
                    <li>
                        <p>Action URLs</p>
                    </li>
                    <li>
                        <p>Resource URLs</p>
                    </li>
                </ul>
                <p>
                    Orbeon Forms rewrites URLs to these different types based on the HTML or XHTML attribute names as
                    follows:
                </p>
                <table>
                    <tr>
                        <th>Element / Attribute</th>
                        <th>Action</th>
                    </tr>
                    <tr>
                        <td><code>form/@action</code></td>
                        <td>
                            Rewritten to an action URL using the Portlet API method
                            <code>RenderResponse.createActionURL()</code>. The resulting URL results in an action URL
                            targeting the current portlet. Absolute URLs are left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>form/@method</code></td>
                        <td>
                            If no <code>form/@method</code> is supplied, an HTTP <code>POST</code> is forced, because
                            the Portlet specification recommends submitting forms with <code>POST</code>. If a method is
                            supplied, the method is left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>a/@href</code></td>
                        <td>
                            Rewritten to a render URL using the Portlet API method
                            <code>RenderResponse.createRenderURL()</code>. The resulting URL results in a render URL
                            targeting the current portlet. Absolute URLs are left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>img/@src</code></td>
                        <td rowspan="4">
                            Rewritten to a resource URL encoding. The resulting URL points to a resource within your
                            Web application. Absolute URLs are left unchanged.
                        </td>
                    </tr>
                    <tr>
                        <td><code>input[@type='image']/@src</code></td>
                    </tr>
                    <tr>
                        <td><code>script/@src</code></td>
                    </tr>
                    <tr>
                        <td><code>link/@href</code></td>
                    </tr>
                    <tr>
                        <td><code>script</code> and <code>SCRIPT</code></td>
                        <td>
                            In text within those elements or their XHTML counterparts in the
                            <code>http://www.w3.org/1999/xhtml</code> namespace, occurrences of the string
                            <code>wsrp_rewrite_</code> are replaced with the Portlet namespace as obtained by the
                            Portlet API method <code>RenderResponse.encodeNamespace(null)</code>.
                        </td>
                    </tr>
                </table>
                <p>
                    Note that since portlets do not have the concept of path, URL paths are encoded as a special
                    portlet parameter named <code>orbeon.path</code>. Relative paths are resolved against the current path
                    stored in <code>orbeon.path</code>. The following table illustrates action URL and render URL
                    rewriting:
                </p>
                <table>
                    <tr>
                        <th>Initial Path</th>
                        <th>Resulting Portlet Parameters</th>
                    </tr>
                    <tr>
                        <td><code>/example1/page1?name1=value1&amp;name2=value2</code></td>
                        <td>
                            <ul>
                                <li><code>orbeon.path=/example1/page1</code></li>
                                <li><code>name1=value1</code></li>
                                <li><code>name2=value2</code></li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td><code>?name1=value1&amp;name2=value2</code></td>
                        <td>
                            <ul>
                                <li><code>name1=value1</code></li>
                                <li><code>name2=value2</code></li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Assuming the current value of <code>orbeon.path</code> is <code>/example1/page1</code>:
                            <br/><br/>
                            <code>../example2/page2?name1=value1&amp;name2=value2</code>
                        </td>
                        <td>
                            <ul>
                                <li><code>orbeon.path=/example2/page2</code></li>
                                <li><code>name1=value1</code></li>
                                <li><code>name2=value2</code></li>
                            </ul>
                        </td>
                    </tr>
                </table>
                <p>
                    The following table illustrates resource URL rewriting:
                </p>
                <table>
                    <tr>
                        <th>Initial Path</th>
                        <th>Resulting Path</th>
                    </tr>
                    <tr>
                        <td>
                            <code>/path/to/my/image.gif?scale=100</code>
                        </td>
                        <td>
                            <code>/orbeon/path/to/my/image.gif?scale=100</code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Assuming the current value of <code>orbeon.path</code> is <code>/example1/page1</code>:
                            <br/><br/>
                            <code>my/image.gif?scale=100</code>
                        </td>
                        <td>
                            <code>/orbeon/example1/my/image.gif?scale=100</code>
                            <p>
                                Note that using resource URLs relative to <code>orbeon.path</code> does not necessarily
                                make sense unless you define your hierarchy of resources carefully.
                            </p>
                        </td>
                    </tr>
                </table>
            </section>
        </section>
        <a name="working"/>
        <section>
            <title>Working with URL Rewriting</title>
            <a name="suggested-formats"/>
            <section>
                <title>Suggested URL Formats</title>
                <p>
                    With Orbeon Forms, it is recommended you write URLs as:
                </p>
                <ul>
                    <li>
                        <p>
                            Absolute URLs, when referring to external resources:
                        </p>
                        <xml-source>
                            <a href="http://www.google.com/">Go to Google</a>
                        </xml-source>
                    </li>
                    <li>
                        <p>
                            Relative paths, for resources that are likely to remain fixed relatively to the page containing
                            the URL:
                        </p>
                        <xml-source>
                            <img src="../images/back.png"/>
                            <a href="edit-page">Go to the Edit Page</a>
                        </xml-source>
                    </li>
                    <li>
                        <p>
                            Absolute paths (without the servlet context path) in all other cases:
                        </p>
                        <xml-source>
                            <img src="/images/back.png"/>
                            <a href="/apps/my-app/edit-page">Go to the Edit Page</a>
                        </xml-source>
                    </li>
                </ul>
            </section>
            <a name="controlling"/>
            <section>
                <title>Controlling URL Rewriting</title>
                <p>
                    In certain cases, you may want to disable URL rewriting. This is done through an extension
                    attribute:
                </p>
                <xml-source show-namespaces="false">
                    <a href="/my/path" f:url-norewrite="true" xmlns:f="http://orbeon.org/oxf/xml/formatting">Follow Me</a>
                </xml-source>
                <p>
                    With portlets, you may want to control the type of URL instead of using the default URL type. You
                    control this with an extension attribute:
                </p>
                <xml-source show-namespaces="false">
                    <a href="/my/path" f:url-type="action" xmlns:f="http://orbeon.org/oxf/xml/formatting">Follow Me</a>
                </xml-source>
                <p>
                    Without <code>f:url-type="action"</code>, the URL would be handled by Orbeon Forms as a "render"
                    URL as described in the table of the previous section.
                </p>
                <p>
                    For both attributes, you have to make sure that the namespace
                    <code>xmlns:f="http://orbeon.org/oxf/xml/formatting"</code> is declared. You can declare it once and
                    for all on the root element of your document.
                </p>
            </section>
        </section>
        <a name="limitations"/>
        <section>
            <title>Known Limitations</title>
            <section>
                <title>Portlets</title>
                <ul>
                    <li>
                        <p>
                            The input document should not contain:
                        </p>
                        <ul>
                            <li>Elements and attribute containing the string <code>wsrp_rewrite</code></li>
                            <li>Namespace URIs containing the string <code>wsrp_rewrite</code></li>
                            <li>Processing instructions containing the string <code>wsrp_rewrite</code></li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            It is not possible to specify:
                        </p>
                        <ul>
                            <li>A destination portlet mode</li>
                            <li>A destination window state</li>
                            <li>A secure URL</li>
                        </ul>
                    </li>
                </ul>
            </section>
        </section>
    </body>
</document>
