<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2004-2008 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:ev="http://www.w3.org/2001/xml-events"
          xmlns:xi="http://www.w3.org/2001/XInclude" >
    <header>
        <title>XForms Reference: XPath Functions</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                This part of the XForms reference documentation focuses on extension XPath functions supported by the
                XForms engine.
            </p>
        </section>
        <a name="xforms-functions"/>
        <section>
            <title>Standard XForms Functions</title>
            <p>
                Orbeon Forms supports the following standard XForms functions:
            </p>
            <ul>
                <li>
                    [TODO: most other functions are supported, provide exact list]
                </li>
                <li>
                    <a name="xforms-property"/>
                    <p>
                        <code><a href="http://www.w3.org/TR/xforms11/#fn-property">property($property-name as xs:string) as xs:anyAtomicType?</a></code>
                    </p>
                    <p>
                        This function supports extension property names in the
                        <code>http://orbeon.org/oxf/xml/xforms</code> namespace (usually mapped to the
                        <code>xxforms</code> prefix). Any such property name will return the value of an XForms engine
                        property. Example:
                    </p>
                   <xml-source>
                        <xforms:output value="property('xxforms:noscript')"/>
                    </xml-source>
                    <note>
                        <p>
                            The standard XForms function returns an XPath 1.0 <code>string</code>. The Orbeon Forms
                            implementation returns the following types: empty sequence (if the property is not found),
                            <code>xs:string</code>, <code>xs:integer</code>, <code>xs:boolean</code> or
                            <code>xs:anyURI</code> depending on the type of the property.
                        </p>
                    </note>
                </li>
            </ul>
        </section>
        <a name="xpath-extensions"/>
        <section>
            <title>XPath Extension Functions</title>
            <p>
                Orbeon Forms implements some extension functions which can be used from XPath expressions
                in XForms documents.
            </p>
            <section>
                <title>XSLT 2.0 Functions</title>
                <p>
                    When using XPath 2.0, the following functions from XSLT 2.0 are also available:
                </p>
                <ul>
                    <li><p><code>format-date()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-date">external documentation</a>)</p></li>
                    <li><p><code>format-dateTime()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-dateTime">external documentation</a>)</p></li>
                    <li><p><code>format-time()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-time">external documentation</a>)</p></li>
                    <li><p><code>format-number()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-number">external documentation</a>)</p></li>
                </ul>
            </section>
            <a name="ops-extensions"/>
            <a name="orbeon-extensions"/>
            <section>
                <title>Orbeon Forms Functions</title>
                <p>
                    The following functions are implemented:
                </p>
                <ul>
                    <li>
                        <a name="xxforms-if"/>
                        <p>
                            <code>xxforms:if()</code>
                        </p>
                        <p>
                            This function implements the semantic of the XForms 1.0 <code>if()</code> function.
                            See <a href="#xforms-xpath-20">Note About XPath 2.0 Expressions</a> for more details.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-call-xpl"/>
                        <p>
                            <code>xxforms:call-xpl($xplURL as xs:string, $inputNames as xs:string*, $inputElements
                            as element()*, $outputNames as xs:string+) as document-node()*</code>
                        </p>
                        <p>
                            This function lets you call an XPL pipeline.
                        </p>
                        <ol>
                            <li>
                                The first argument, <code>$XPLurl</code>, is the URL of the pipeline. It must be an
                                absolute URL.
                            </li>
                            <li>
                                The second argument, <code>$inputNames</code>, is a sequence of strings, each one
                                representing the name of an input of the pipeline that you want to connect.
                            </li>
                            <li>
                                The third argument, <code>$inputElements</code>, is a sequence of elements to be
                                used as input for the pipeline. The <code>$inputNames</code> and
                                <code>$inputElements</code> sequences must have the same length. For each element
                                in <code>$inputElements</code>, a document is created and connected to an input of
                                the pipeline. Elements are matched to input name by position, for instance the
                                element at position 3 of <code>$inputElements</code> is connected to the input with
                                the name specified at position 3 in <code>$inputNames</code>.
                            </li>
                            <li>
                                The fourth argument, <code>$outputNames</code>, is a sequence of output names to
                                read.
                            </li>
                            <li>
                                The function returns a sequence of document nodes corresponding the output of the
                                pipeline. The returned sequence will have the same length as
                                <code>$outputNames</code> and will correspond to the pipeline output with the name
                                specified on <code>$outputNames</code> based on position.
                            </li>
                        </ol>
                        <p>
                            The example below shows a call to the <code>xxforms:call-xpl</code> function:
                        </p>
                        <xml-source>
                            xxforms:call-xpl ('oxf:/examples/sandbox/xpath/run-xpath.xpl', ('input', 'xpath'),
                            (instance('instance')/input, instance('instance')/xpath), 'formatted-output')/*, 'html')
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-evaluate"/>
                        <p>
                            <code>xxforms:evaluate($xpath as xs:string) as item()*</code>
                        </p>
                        <p>
                            The <code>xxforms:evaluate()</code> function allows you to evaluate XPath expressions
                            dynamically. For example:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:input ref="xxforms:evaluate(concat('instance(''my-instance'')/document', my-xpath))">
                                <xforms:label>...</xforms:label>
                            </xforms:input>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-serialize"/>
                        <p>
                            <code>xxforms:serialize($item as node(), $format as xs:string?) as xs:string</code>
                        </p>
                        <p>
                            The <code>xxforms:serialize()</code> function allows you to serialize an XML node to
                            XML, HTML, XHTML or text. For example:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:bind nodeset="my-html" calculate="xxforms:serialize(instance('my-instance'), 'html')"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-context"/>
                        <p>
                            <code>xxforms:context($element-id as xs:string) as node()</code>
                        </p>
                        <p>
                            The <code>xxforms:context()</code> function allows you to obtain the single-node binding
                            for an enclosing <code>xforms:group</code>, <code>xforms:repeat</code>, or
                            <code>xforms:switch</code>. It takes one mandatory string parameter containing the id of
                            an enclosing grouping XForms control. For xforms:repeat, the context returned is the
                            context of the current iteration.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:group ref="employee" id="employee-group">
                                <comment> The context is being set to another instance that controls the visibility of the group. </comment>
                                <xforms:group ref="instance('control-instance')/input">
                                    <comment> Using xxforms:context() allows reclaiming the context of the enclosing group. </comment>
                                    <xforms:input ref="xxforms:context('employee-group')/name">
                                        <xforms:label>Employee Name</xforms:label>
                                    </xforms:input>
                                </xforms:group>
                            </xforms:group>
                        </xml-source>
                        <note>
                            <p>
                                See also the XForms 1.1 <code>context()</code> function, which returns the current
                                evaluation context:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:group ref="employee">
                                    <xforms:setvalue ref="instance('foo')/name" value="context()/name"/>
                                </xforms:group>
                            </xml-source>
                        </note>
                    </li>
                    <li>
                        <a name="xxforms-bind"/>
                        <p>
                            <code>xxforms:bind(bind-id as xs:string) as node()*</code>
                        </p>
                        <p>
                            The <code>xxforms:bind()</code> function returns the node-set of a given
                            <code>&lt;xforms:bind></code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> The following... </comment>
                            <xforms:input bind="my-bind">
                                ...
                            </xforms:input>
                            <comment> ...is equivalent to this: </comment>
                            <xforms:input ref="xxforms:bind('my-bind')">
                                ...
                            </xforms:input>
                        </xml-source>
                        <p>
                            <code>xxforms:bind()</code> is particularly useful when referring to a bind is subject
                            to a condition:
                        </p>
                        <xml-source>
                            <xforms:hint ref="for $bind in xxforms:bind('my-hint') return if (normalize-space($bind) = '') then instance('default-hint') else $bind"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-repeat-nodeset"/>
                        <p>
                            <code>xxforms:repeat-nodeset($repeat-id as xs:string) as node()*</code>
                        </p>
                        <p>
                            The <code>xxforms:repeat-nodeset()</code> function returns the node-set of an enclosing
                            <code>xforms:repeat</code>. It takes one mandatory string parameter containing the id of
                            an enclosing repeat XForms control.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:repeat id="employee-repeat" nodeset="employee">
                                <xhtml:div>
                                    <xforms:output value="count(xxforms:repeat-nodeset('book-repeat'))"/>
                                </xhtml:div>
                            </xforms:repeat>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-instance"/>
                        <p>
                            <code>xxforms:instance($instance-id as xs:string) as element()?</code>
                        </p>
                        <p>
                            The <code>xxforms:instance()</code> function works like the standard
                            <code>instance()</code> function except that it searches for instances in all the models
                            of the XForms document (the standard <code>instance()</code> function only searches
                            within the current XForms model).
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:model id="main-model">
                                <xforms:instance id="main-instance">
                                    ...
                                </xforms:instance>
                            </xforms:model>
                            <xforms:model id="resources-model">
                                <xforms:instance id="resources-instance">
                                    ...
                                </xforms:instance>
                            </xforms:model>
                            ...
                            <xforms:group model="main-model">
                                <xforms:output value="xxforms:instance('resources-instance')/titles/company-information"/>
                            </xforms:group>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-index"/>
                        <p>
                            <code>xxforms:index($repeat-id as xs:string?) as xs:integer</code>
                        </p>
                        <p>
                            The <code>xxforms:index()</code> function behaves like the standard XForms
                            <code>index()</code> function, except that its argument is optional. When the argument
                            is omitted, the function returns the index of the closest enclosing
                            <code>&lt;xforms:repeat></code> element. This function must always be used within
                            <code>&lt;xforms:repeat></code> otherwise an error is raised.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:repeat nodeset="employee" id="employee-repeat">
                                <div>
                                    <xforms:trigger>
                                        <xforms:label>Add One</xforms:label>
                                        <xforms:insert ev:event="DOMActivate" nodeset="../employee" at="xxforms:index()"/>
                                    </xforms:trigger>
                                </div>
                            </xforms:repeat>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-case"/>
                        <p>
                            <code>xxforms:case($switch-id as xs:string) as xs:string?</code>
                        </p>
                        <p>
                            The <code>xxforms:case()</code> function returns the id of the currently selected
                            <code>&lt;xforms:case></code> within the given <code>&lt;xforms:switch></code>. It is
                            recommended to use this function from XForms actions only.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:switch id="my-switch">
                                <xforms:case id="my-case-1">...</xforms:case>
                                <xforms:case id="my-case-2">...</xforms:case>
                            </xforms:switch>
                            ...
                            <xforms:trigger>
                                <xforms:label>Add One</xforms:label>
                                <xforms:setvalue if="xxforms:case('my-switch')" ref="foobar" value="12"/>
                            </xforms:trigger>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-property"/>
                        <p>
                            <code>xxforms:property($property-name as xs:string) as xs:anyAtomicType?</code>
                        </p>
                        <p>
                            The <code>xxforms:property()</code> function retrieves the value of a property defined
                            in <code>properties.xml</code>.
                        </p>
                        <p>
                            This function returns the following types: empty sequence (if the property is not found),
                            <code>xs:string</code>, <code>xs:integer</code>, <code>xs:boolean</code> or
                            <code>xs:anyURI</code> depending on the actual type of the property.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:repeat nodeset="employee" id="employee-repeat">
                                <div>
                                    <xforms:trigger>
                                        <xforms:label>Read Property</xforms:label>
                                        <xforms:setvalue ev:event="DOMActivate" ref="my-property" value="xxforms:property('my.property.name')"/>
                                    </xforms:trigger>
                                </div>
                            </xforms:repeat>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-element"/>
                        <p>
                            <code>xxforms:element($element-name as xs:anyAtomicType?) as element()</code>
                        </p>
                        <p>
                            <code>xxforms:element($element-name as xs:anyAtomicType?, $content as item()*) as element()</code>
                        </p>
                        <p>
                            The <code>xxforms:element()</code> function returns a new XML element with the qualified
                            name provided. If the qualified name is not of type <code>xs:QName</code> and if it has a
                            prefix, it is resolved using in-scope namespaces.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Insert an element called "value" as a child of element "section" </comment>
                            <xforms:insert context="section" origin="xxforms:element('value')"/>
                        </xml-source>
                        <p>
                            The second, optional argument can take a sequence of items specifying attributes and
                            content for the new element:
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Insert an element called "value" as a child of element "section", with an attribute and text content </comment>
                            <xforms:insert context="section" origin="xxforms:element('value', (xxforms:attribute('id', 'my-value'), 'John'))"/>
                        </xml-source>
                        <p>
                            The first argument can be of type <code>xs:QName</code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Insert an element called "foo:bar" as a child of element "section" and resolve the namespaces on element $element </comment>
                            <xforms:insert context="section" origin="xxforms:element(resolve-QName('foo:bar', $element))"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-attribute"/>
                        <p>
                            <code>xxforms:attribute($qname as xs:anyAtomicType?, $value as xs:anyAtomicType?) as attribute()</code>
                        </p>
                        <p>
                            The <code>xxforms:attribute()</code> function returns a new XML attribute with the qualified
                            name provided as first argument. If the qualified name is not of type <code>xs:QName</code>
                            and if it has a prefix, it is resolved using in-scope namespaces. The second argument is an
                            optional value for the attribute. It default to the empty string.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Add an attribute called "id" with a value of "first-name" to element "section" </comment>
                            <xforms:insert context="section" origin="xxforms:attribute('id', 'first-name')"/>
                        </xml-source>
                        <p>
                            The first argument can be of type <code>xs:QName</code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Add an attribute called "id" with a value of "foo:bar" to element "section" and resolve the namespaces on element $element </comment>
                            <xforms:insert context="section" origin="xxforms:attribute(resolve-QName('foo:bar', $element), 'first-name')"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-binding"/>
                        <p>
                            <code>xxforms:binding($control-id as xs:string) as node()*</code>
                        </p>
                        <p>
                            The <code>xxforms:binding()</code> function returns a control's binding, that is the node or
                            nodes to which the control is bound. Use this function carefully, as depending on when this
                            function is called during XForms processing, it may refer to stale nodes. Likely the safest
                            use of <code>xxforms:binding()</code> is in response to UI events.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Store the value of the element to which the first-name control is bound </comment>
                            <xforms:setvalue ref="my-value" value="xxforms:binding('first-name')"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-get-request-header"/>
                        <p>
                            <code>xxforms:get-request-header($header-name as xs:string) as xs:string*</code>
                        </p>
                        <p>
                            The <code>xxforms:get-request-header()</code> function returns the value(s) of the
                            given request HTTP header.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Remember the User-Agent header </comment>
                            <xforms:setvalue ref="user-agent" value="xxforms:get-request-header('User-Agent')"/>
                        </xml-source>
                        <note>
                            <p>
                                This function can only be called during page initialization, otherwise it will throw
                                an error. We recommend you use it only within event handlers called as a result of
                                processing <code>xforms-model-construct-done</code> or <code>xforms-ready</code>.
                            </p>
                        </note>
                    </li>
                    <li>
                        <a name="xxforms-get-request-parameter"/>
                        <p>
                            <code>xxforms:get-request-parameter($parameter-name as xs:string) xs:string*</code>
                        </p>
                        <p>
                            The <code>xxforms:get-request-parameter()</code> function returns the value(s) of the
                            given request parameter.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Remember the "columns" parameter </comment>
                            <xforms:setvalue ref="columns" value="xxforms:get-request-parameter('columns')"/>
                        </xml-source>
                        <note>
                            <p>
                                This function can only be called during page initialization, otherwise it will throw
                                an error. We recommend you use it only within event handlers called as a result of
                                processing <code>xforms-model-construct-done</code> or <code>xforms-ready</code>.
                            </p>
                        </note>
                    </li>
                    <li>
                        <a name="xxforms-get-request-attribute"/>
                        <p>
                            <code>xxforms:get-request-attribute($name as xs:string) document-node()?</code>
                        </p>
                        <p>
                            The <code>xxforms:get-request-attribute()</code> function returns the value of the given
                            request attribute. The attribute may have been previously placed in the request through
                            Java code, or using <code>xxforms:set-request-attribute()</code>, for example.
                        </p>
                        <p>
                            The types of attribute objects supported are the same <a
                            href="processors-generators#scope-generator-types">types supported by the Scope
                            generator</a>, plus types stored with <code>xxforms:set-request-attribute()</code>.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Get the "document" attribute and use it to replace instance "my-instance" </comment>
                            <xforms:insert nodeset="instance('my-instance')" origin="xxforms:get-request-attribute('document')"/>
                        </xml-source>
                        <note>
                            <p>
                                This function can only be called during page initialization, otherwise it will throw
                                an error. We recommend you use it only within event handlers called as a result of
                                processing <code>xforms-model-construct-done</code> or <code>xforms-ready</code>.
                            </p>
                        </note>
                    </li>
                    <li>
                        <a name="xxforms-get-session-attribute"/>
                        <p>
                            <code>xxforms:get-session-attribute($name as xs:string) document-node()?</code>
                        </p>
                        <p>
                            The <code>xxforms:get-session-attribute()</code> function returns the value of the given
                            session attribute.
                        </p>
                        <p>
                            The types of attribute objects supported are the same <a
                            href="processors-generators#scope-generator-types">types supported by the Scope
                            generator</a>, plus types stored with <code>xxforms:set-session-attribute()</code>.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Get the "document" attribute and use it to replace instance "my-instance" </comment>
                            <xforms:insert nodeset="instance('my-instance')" origin="xxforms:get-session-attribute('document')"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-set-request-attribute"/>
                        <p>
                            <code>xxforms:set-request-attribute($name as xs:string, $value item()) ()</code>
                        </p>
                        <p>
                            The <code>xxforms:set-request-attribute()</code> function stores the given value as a
                            request attribute.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Set the "document" attribute into the request </comment>
                            <xforms:insert context="." origin="xxforms:set-request-attribute('document', instance('my-instance'))"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-set-session-attribute"/>
                        <p>
                            <code>xxforms:set-session-attribute($name as xs:string, $value item()) ()</code>
                        </p>
                        <p>
                            The <code>xxforms:set-session-attribute()</code> function stores the given value as a
                            session attribute.
                        </p>
                        <xml-source show-namespaces="false">
                            <comment> Set the "document" attribute into the session </comment>
                            <xforms:insert context="." origin="xxforms:set-session-attribute('document', instance('my-instance'))"/>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-get-remote-user"/>
                        <p>
                            <code>xxforms:get-remote-user() xs:string?</code>
                        </p>
                        <p>
                            Returns the username for the current user of the application, if known by the
                            container, for instance because users log in with BASIC of FORM-based authentication.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-is-user-in-role"/>
                        <p>
                            <code>xxforms:is-user-in-role(xs:string) as xs:boolean</code>
                        </p>
                        <p>
                            Returns true if and only if the container recognizes that the current user of the application
                            has the specified role. Roles will be typically known by the container when users are logged
                            in using either BASIC or FORM-based authentication.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-valid"/>
                        <p>
                            <code>xxforms:valid($node as node()?, $recurse as xs:boolean) as xs:boolean</code>
                        </p>
                        <p>
                            The <code>xxforms:valid()</code> function returns the validity of a instance data node
                            or of a subtree of instance data. It recurses into attribute and descendant nodes if the
                            optional second argument is <code>true()</code>.
                        </p>
                        <p>
                            Because of the way the XForms processing model is defined, the evaluation of
                            <code>calculate</code>, <code>required</code>, <code>readonly</code> and
                            <code>relevant</code> takes place during the procesing of the
                            <code>xforms-recalculate</code> event, which generally takes place before the processing
                            of vaidation with the <code>xforms-revalidate</code> event. This means that by default
                            using <code>xxforms:valid()</code> to control, for example, whether a button is
                            read-only or relevant will not work.
                        </p>
                        <!-- Commented out as I don't think we really want to advertize this since we never use it at Orbeon:
                        <p>
                            However, Orbeon Forms allows you to switch the computation of the
                            <code>required</code>, <code>readonly</code> MIPs to after validation to cover this use
                            case, with the <code>xxforms:computed-binds</code> property set to
                            <code>revalidate</code>:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:model xxforms:computed-binds="revalidate">
                                <xforms:instance id="my-instance">
                                    <form>
                                        ...
                                    </form>
                                </xforms:instance>
                                <xforms:instance id="triggers">
                                    <triggers>
                                        <save-trigger/>
                                    </triggers>
                                </xforms:instance>
                                <xforms:bind nodeset="instance('triggers')/save-trigger" readonly="not(xxforms:valid(instance('my-instance'), true(), true()))"/>
                            </xforms:model>
                            ...
                            <xforms:trigger ref="instance('triggers')/save-trigger">
                                <xforms:label>Save</xforms:label>
                            </xforms:trigger>
                        </xml-source>
                        -->
                    </li>
                    <li>
                        <a name="xxforms-type"/>
                        <p>
                            <code>xxforms:type($node as node()?) as xs:QName?</code>
                        </p>
                        <p>
                            The <code>xxforms:type()</code> function returns the type of the instance data node passed
                            as parameter. If an empty sequence is passed, the function returns an empty sequence.
                            Otherwise, the type of the instance data node is searched. If no type information is
                            available, the function returns an empty sequence. Otherwise, a QName associated with the
                            type is returned.
                        </p>
                        <xml-source>
                            <xforms:output value="for $t in xxforms:type(date) return concat('{', namespace-uri-from-QName($t), '}', local-name-from-QName($t))">
                                <xforms:label>Type:</xforms:label>
                            </xforms:output>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-invalid-binds"/>
                        <p>
                            <code>xxforms:invalid-binds($node as node()?) as xs:string*</code>
                        </p>
                        <p>
                            The <code>xxforms:invalid-binds()</code> function returns a sequence of strings. If the node
                            was made invalid because of an <code>&lt;xforms:bind></code> element, then the id of that
                            bind element is present in the list.
                        </p>
                        <p>
                            This function is useful to help determine the reason why a node is invalid:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:bind nodeset="age" constraint=". ge 21" id="age-limit"/>
                            ...
                            <xforms:action if="xxforms:invalid-binds(event('xxforms:binding')) = 'age-limit'">
                                ...
                            </xforms:action>
                        </xml-source>
                    </li>
                    <li>
                        <a name="xxforms-encode-iso9075-14"/>
                        <p>
                            <code>xxforms:encode-iso9075-14($value as xs:string) as xs:string</code>
                        </p>
                        <p>
                            The <code>xxforms:encode-iso9075-14()</code> function encodes a string according to ISO
                            9075-14:2003. The purpose is to escape any character which is not valid in an XML name.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-decode-iso9075-14"/>
                        <p>
                            <code>xxforms:decode-iso9075-14($value as xs:string) as xs:string</code>
                        </p>
                        <p>
                            The <code>xxforms:decode-iso9075-14()</code> function decodes a string according to ISO
                            9075-14:2003.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-doc-base64"/>
                        <p>
                            <code>xxforms:doc-base64($href as xs:string) as xs:string</code>
                        </p>
                        <p>
                            The <code>xxforms:doc-base64()</code> function reads a resource identified by the given URL,
                            and returns the content of the file as a Base64-encoded string. It is a dynamic XPath error
                            if the resource cannot be read.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-doc-base64-available"/>
                        <p>
                            <code>xxforms:doc-base64-available($href as xs:string) as xs:boolean</code>
                        </p>
                        <p>
                            The <code>xxforms:doc-base64-available()</code> function reads a resource identified by the
                            given URL. It returns <code>true()</code> if the file can be read, <code>false()</code>
                            otherwise.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-mutable-document"/>
                        <p>
                            <code>xxforms:mutable-document($node as node()) as document-node()</code>
                        </p>
                        <p>
                            The <code>xxforms:mutable-document()</code> function takes a document as input and
                            returns a mutable document, i.e. a document on which you can for example use
                            <code>xforms:setvalue</code>.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:action ev:event="xforms-submit-serialize">
                                <comment> Get initial document to submit </comment>
                                <xxforms:variable name="request-document" select="xxforms:mutable-document(saxon:parse(/my/request))"/>
                                <comment> Set value </comment>
                                <xforms:setvalue ref="$request-document/my/first-name">Joe</xforms:setvalue>
                                <comment> Serialize request document </comment>
                                <xforms:setvalue ref="event('submission-body')" value="saxon:serialize($request-document, instance('my-output-instance'))"/>
                            </xforms:action>
                        </xml-source>
                        <p>
                            Note that by compatibility with the XSLT <code>document()</code> and XPath 2.0
                            <code>doc()</code> functions, and unlike the <code>instance()</code> function,
                            <code>xxforms:mutable-document()</code> returns a document node, not a document element
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-event"/>
                        <p>
                            <code>xxforms:event($attribute-name as xs:string) as item()*</code>
                        </p>
                        <p>
                            <code>xxforms:event()</code> works like the XForms 1.1 <code>event()</code> function, except
                            that when using XBL components, <code>xxforms:event()</code> returns event information from
                            the original event instead of the retargetted event.
                        </p>
                    </li>
                    <li>
                        <a name="xxforms-sort"/>
                        <p><code>exf:sort($sequence as item()*, $sort-key as item(), $datatype as xs:string?, $order as xs:string?, $case-order as xs:string?) as item()*</code></p>
                        <p>
                           Note that the second argument differs from the <code>exforms:sort()</code> function: it does
                           not take a plain string but a literal expression, for example:
                        </p>
                        <xml-source>
                            <xforms:itemset nodeset="xxforms:sort(instance('samples-instance')/file, @name, 'text', 'ascending')">
                                ...
                            </xforms:itemset>
                        </xml-source>
                    </li>

                    <li>
                        <a name="xxforms-repeat-current"/>
                        <p>
                            <code>xxforms:repeat-current($repeat-id as xs:string?) as node()</code>
                        </p>
                        <note>
                            <p>
                                This function is deprecated. Use <a
                                href="#xxforms-context"><code>xxforms:context()</code></a> or the XForms 1.1
                                <code>context()</code> function instead.
                            </p>
                        </note>
                        <p>
                            The <code>xxforms:repeat-current()</code> function allows you to obtain a reference to
                            an enclosing <code>xforms:repeat</code>'s current iteration node. It takes one optional
                            string parameter. If present, the id of the enclosing <code>xforms:repeat</code> is
                            searched. If absent, the function looks for the closest enclosing
                            <code>xforms:repeat</code>.
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:repeat nodeset="employee" id="employee-repeat">
                                <tr>
                                    <td>
                                        <comment> The context is being set to another instance that controls the visibility of the group. </comment>
                                        <xforms:group ref="instance('control-instance')/input">
                                            <comment> Using xxforms:repeat-current() allows reclaiming the context of the repeat iteration. </comment>
                                            <xforms:input ref="xxforms:repeat-current('employee-repeat')/name">
                                                <xforms:label>Employee Name</xforms:label>
                                            </xforms:input>
                                        </xforms:group>
                                    </td>
                                </tr>
                            </xforms:repeat>
                        </xml-source>
                        <p>
                            The <code>xxforms:repeat-current()</code> function must be called from within an
                            <code>xforms:repeat</code> element.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>eXForms Functions</title>
                <p>
                    <a href="http://www.exforms.org/">eXForms</a> is a suggested set of extensions to XForms 1.0,
                    grouped into different modules. Orbeon Forms supports the <a
                    href="http://www.exforms.org/mips.html"><code>exf:mip</code></a> module, which includes the
                    following functions:
                </p>
                <ul>
                    <li>
                        <p><code>exf:relevant()</code></p>
                    </li>
                    <li>
                        <p><code>exf:readonly()</code></p>
                    </li>
                    <li>
                        <p><code>exf:required()</code></p>
                    </li>
                </ul>
                <p>
                    Orbeon Forms also supports the following from the <a
                    href="http://exforms.org/sorting.html">sorting module</a>:
                </p>
                <ul>
                    <li>
                        <p><code>exf:sort($sequence as item()*, $sort-key as xs:string, $datatype as xs:string?, $order as xs:string?, $case-order as xs:string?) as item()*</code></p>
                        <p>
                           Note that the second argument is interpreted as a string, unlike with
                           <code>xxforms:sort()</code>:
                        </p>
                        <xml-source>
                            <xforms:itemset nodeset="exforms:sort(instance('samples-instance')/file, '@name', 'text', 'ascending')">
                                ...
                            </xforms:itemset>
                        </xml-source>
                    </li>
                </ul>
                <p>
                    eXForms functions live in the <code>http://www.exforms.org/exf/1-0</code> namespace, usually
                    bound to the prefix <code>exf</code> or <code>exforms</code>.
                </p>
            </section>
        </section>
    </body>
</document>
