#summary AtomBeat - an Atom protocol implementation for eXist

<wiki:toc/>

= Introduction =

AtomBeat is an [http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php Atom Protocol] implementation for [http://exist.sourceforge.net/ eXist] 1.4.

= Features =

  * [StandardAtomProtocolSupport Standard Atom Protocol Operations]: create, retrieve, update and delete Atom entries and media resources; retrieve feeds of Atom collection members.

  * [AtomProtocolExtensions#Managing_Collections Protocol Extensions for Managing Atom Collections]: create collections and update collection metadata; create collection hierarchies with recursive collections.

  * [AtomProtocolExtensions#Posting_Media_From_Forms Protocol Extensions for Posting Media Directly From HTML Forms or XForms]: create media resources using multipart/form-data requests.

  * [AtomProtocolExtensions#Multi-Create Protocol Extensions for Creating Multiple Collection Members in a Single Request]: add one or more members to a collection in a single request; copy one collection to another, including media resources. 

  * [VersioningExtension Protocol and Format Extensions for Versioning]: create versioned collections; retrieve a version history feed for any collection member; retrieve any previous revision of a member.

  * [SecurityExtension Security Extensions for Access Control]: manage access control lists for Atom collections and collection members; specify fine-grained access control rules for users, groups and roles; can be integrated with external authentication and user role management systems, e.g., via Spring Security.

  * A Plug-in Framework for Developing Custom Extensions: write plugin functions that modify the behaviour of standard Atom Protocol operations, or implement custom side-effects; intercept and modify requests before and/or after main protocol operation execution. 

= Status =

AtomBeat is in an experimental phase. If you're interested in the Atom Publishing Protocol and what to do some quick prototyping, then AtomBeat may be a good option. We don't as yet have any experience of deploying AtomBeat in a production setting.

AtomBeat is being developed as part of work on scientific data repositories at the University of Oxford, and is closely linked to the [http://dsn-chassis.googlecode.com Chassis project]. However, we've found a need across several projects for a customisable content repository capable of storing and querying files, data and metadata, with support for access control and versioning, all via HTTP and following the REST style. Because these are generic capabilities, we've factored this work out into AtomBeat. If it's of interest to you, please feel free to [mailto:alimanfoo@gmail.com get in touch].

= eXist already has an Atom Protocol implementation, why do another? =

There are a couple of reasons why we've rolled our own Atom Protocol implementation, rather than using the Atom servlet that comes bundled with eXist...

  * We wanted to experiment with new features, like versioning and access control, and we found it quicker to do that by starting from scratch and working entirely in XQuery, rather than working with the existing Java servlet code.

  * eXist has its own security system, which borrows from the Unix model of users and groups. This is fine for many use cases, but there are situations where this is not sufficient to express the desired security model. For example, if you want to have an Atom collection where readers can retrieve any entry, authors can create entries, update any entry they have created, and choose other authors to collaborate with, and editors can update any entry, you cannot implement that with the Unix model of one user (owner) and group per resource. AtomBeat has an experimental security system based on access control lists, which is capable of expressing a wider range of security models. However, there are pros and cons here, see the documentation on security (TODO).

  * eXist can be configured to authenticate users via HTTP basic or digest authentication, and the user's credentials can be either stored in the eXist database or can be drawn from an LDAP repository. While this is fine for many situations, other scenarios require integration with single-sign-on authentication systems and a variety of user databases. Rather than try to implement any of this ourselves, we have designed AtomBeat to work with a wide range of authentication systems. For example, it is straightforward to use AtomBeat with Spring Security, which gives you access to implementations of a variety of authentication mechanisms including OpenID and CAS, and configurable integration with a variety of user databases.

Of course, we're on the exist-open mailing list and hope to feed back as much as we can to the eXist developers.

= Why "Atom Beat"? =

No particular reason. Apparently, "Atom Beat" was the name given to the style of drumming that Pete Best brought back to Liverpool after the Beatles' stint in Hamburg. It's got nothing to do with the Atom Publishing Protocol, but I saw it on an old Beatles gig poster and it caught my eye.


